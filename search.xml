<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx</title>
      <link href="2021/09/27/Nginx/"/>
      <url>2021/09/27/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx学习笔记"><a href="#Nginx学习笔记" class="headerlink" title="Nginx学习笔记"></a>Nginx学习笔记</h1><h2 id="第一章-nginx基本概念"><a href="#第一章-nginx基本概念" class="headerlink" title="第一章 nginx基本概念"></a>第一章 nginx基本概念</h2><h3 id="1-nginx是什么？做什么事情？"><a href="#1-nginx是什么？做什么事情？" class="headerlink" title="1.nginx是什么？做什么事情？"></a>1.nginx是什么？做什么事情？</h3><p>nginx是</p><h3 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h3><p>正相代理：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210928160629280.png" alt="image-20210928160629280"></p><p>反向代理：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210928160722072.png" alt="image-20210928160722072"></p><h3 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3.负载均衡"></a>3.负载均衡</h3><h3 id="4-动静分离"><a href="#4-动静分离" class="headerlink" title="4.动静分离"></a>4.动静分离</h3><h2 id="第二章-nginx安装、常用命令和配置文件"><a href="#第二章-nginx安装、常用命令和配置文件" class="headerlink" title="第二章 nginx安装、常用命令和配置文件"></a>第二章 nginx安装、常用命令和配置文件</h2><h3 id="1-在Linux系统中安装nginx"><a href="#1-在Linux系统中安装nginx" class="headerlink" title="1.在Linux系统中安装nginx"></a>1.在Linux系统中安装nginx</h3><h3 id="2-nginx常用命令"><a href="#2-nginx常用命令" class="headerlink" title="2.nginx常用命令"></a>2.nginx常用命令</h3><h3 id="3-nginx配置文件"><a href="#3-nginx配置文件" class="headerlink" title="3.nginx配置文件"></a>3.nginx配置文件</h3><h2 id="第三章-nginx配置实例1-反向代理"><a href="#第三章-nginx配置实例1-反向代理" class="headerlink" title="第三章 nginx配置实例1-反向代理"></a>第三章 nginx配置实例1-反向代理</h2><h2 id="第四章-nginx配置实例2-负载均衡"><a href="#第四章-nginx配置实例2-负载均衡" class="headerlink" title="第四章 nginx配置实例2-负载均衡"></a>第四章 nginx配置实例2-负载均衡</h2><h2 id="第五章-nginx配置实例3-动静分离"><a href="#第五章-nginx配置实例3-动静分离" class="headerlink" title="第五章 nginx配置实例3-动静分离"></a>第五章 nginx配置实例3-动静分离</h2><h2 id="第六章-nginx配置高可用集群"><a href="#第六章-nginx配置高可用集群" class="headerlink" title="第六章 nginx配置高可用集群"></a>第六章 nginx配置高可用集群</h2><h2 id="第七章-nginx原理"><a href="#第七章-nginx原理" class="headerlink" title="第七章 nginx原理"></a>第七章 nginx原理</h2>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL实战</title>
      <link href="2021/08/26/MySQL%E5%AE%9E%E6%88%98/"/>
      <url>2021/08/26/MySQL%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<center>文案</center><center>要想成为强者，</center><center>绝不能绕过挡道的荆棘，也不能回避风雨的冲刷。</center><p>在复习java基础知识的时候，顺便学习一下sql，发现之前学过的数据库在用的时候不会了，拿过来重新拾起来，好难，加油。</p><a id="more"></a><p>视频来源：来自于美国一位老师，看了一些感觉还不错，就决定坚持看下去，在看的基础上，还要看相关书籍，并进行整理。</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1UE41147KC?p=3">简单易懂的MySQL教程</a></p><p>该教程使用到的文件：<a href="https://pan.baidu.com/s/1ao7TTXYQF6OFOPX-O0rOjw">点击这里</a> 密码: 8iha</p><p>以下sql语句是边学边敲的。设计到对数据库的方方面面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">use sql_store</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">-- WHERE customers_id &#x3D; 1</span><br><span class="line">ORDER BY first_name;</span><br><span class="line"></span><br><span class="line">SELECT first_name,last_name,points,points+10</span><br><span class="line">FROM customers;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">points,</span><br><span class="line">points*10+10</span><br><span class="line">FROM customers;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">points,</span><br><span class="line">(points+10)*10</span><br><span class="line">FROM customers;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">points,</span><br><span class="line">(points+10)*10 AS discountfactor </span><br><span class="line">FROM customers;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">points,</span><br><span class="line">(points+10)*10 AS &#39;discoun factor&#39; </span><br><span class="line">FROM customers;</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT state</span><br><span class="line">from customers;</span><br><span class="line"></span><br><span class="line">#练习,出现的错误，没有在new_price中加入_,导致执行不了</span><br><span class="line">#还有就是，字段之间要加入逗号。</span><br><span class="line">SELECT </span><br><span class="line">name,</span><br><span class="line">unit_price,</span><br><span class="line">unit_price*1.1 AS new_price</span><br><span class="line">from products;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这里还可以使用&gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D;或者&lt;&gt;</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">where points&gt;3000;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">where birth_date &gt; &#39;1990-01-01&#39;;</span><br><span class="line"></span><br><span class="line">#练习 GET the orders place this year</span><br><span class="line">#查看今年所有的订单</span><br><span class="line">select *</span><br><span class="line">from orders</span><br><span class="line">WHERE order_date &gt;&#x3D; &#39;2019-01-01&#39;;</span><br><span class="line"></span><br><span class="line">#组合筛选条件</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE birth_date &gt;&#39;1990-01-01&#39; AND points &gt; 1000;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE birth_date &gt;&#39;1990-01-01&#39; OR points &gt; 1000;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT *</span><br><span class="line">FROM order_items</span><br><span class="line">WHERE order_id &#x3D; 6 AND unit_price * quantity&gt;30;</span><br><span class="line"></span><br><span class="line">#in的练习</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE state &#x3D; &#39;VA&#39; OR state &#x3D;&#39;GA&#39; OR state &#x3D; &#39;FL&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE state in (&#39;VA&#39;,&#39;GA&#39;,&#39;FL&#39;);</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE state not in (&#39;VA&#39;,&#39;GA&#39;,&#39;FL&#39;);</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">select *</span><br><span class="line">from products</span><br><span class="line">WHERE quantity_in_stock IN (&#39;49&#39;,&#39;38&#39;,&#39;72&#39;);</span><br><span class="line"></span><br><span class="line">#关于between运算符</span><br><span class="line">select *</span><br><span class="line">from customers</span><br><span class="line">WHERE points&gt;1300 AND points&lt;3000;</span><br><span class="line"></span><br><span class="line">#使用between运算符</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers </span><br><span class="line">where points between 1000 AND 3000;</span><br><span class="line"></span><br><span class="line">#between练习</span><br><span class="line">select * </span><br><span class="line">FROM customers</span><br><span class="line">WHERE birth_date between &#39;1990-01-01&#39; AND &#39;2000-01-01&#39;;</span><br><span class="line"></span><br><span class="line">#字符串匹配,使用%，这里的b可以匹配大写的，百分号是表示任意多字符。</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name LIKE &#39;b%&#39;;</span><br><span class="line"></span><br><span class="line">#这里_表示只匹配一个字符</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name LIKE &#39;_____y&#39;;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE address LIKE &#39;%TRAIL%&#39;or  address LIKE &#39;%AVENUE%&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE phone LIKE &#39;%9&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE NOT phone LIKE &#39;%9&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># regexp </span><br><span class="line">#平常写：</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name LIKE &#39;%field%&#39;;</span><br><span class="line"></span><br><span class="line">#使用regexp</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;field&#39;;</span><br><span class="line"></span><br><span class="line">#表示只能以field开头</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;^field&#39;;</span><br><span class="line"></span><br><span class="line">#表示只能以field结尾</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;field$&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;field|mac&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;field|mac|rose&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;^field|mac|rose&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;field$|mac|rose&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;e&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#里面含有ge、ie、或者 me。</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;[gim]e&#39;;</span><br><span class="line"></span><br><span class="line">#里面含有eq、 ey、或者es。</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;e[qys]&#39;;</span><br><span class="line"></span><br><span class="line">#里面含有a-h和e组合的所有字符。</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;[a-h]e&#39;;</span><br><span class="line"></span><br><span class="line">#总结: ^:是在最开始</span><br><span class="line"># %:表示是结束</span><br><span class="line">#|:或</span><br><span class="line">#[abcd]</span><br><span class="line">#  [a-d]</span><br><span class="line"></span><br><span class="line">#四个练习</span><br><span class="line">select *</span><br><span class="line">from customers</span><br><span class="line">where first_name REGEXP &#39;ELKA|AMBUR&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;EY$|ON$&#39;;</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;^my|se&#39;;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">WHERE last_name REGEXP &#39;B[RU]&#39;;</span><br><span class="line"></span><br><span class="line">#如何获取缺省值</span><br><span class="line"></span><br><span class="line">#获取手机里面没有信息的</span><br><span class="line">SELECT * from customers</span><br><span class="line">WHERE phone is null;</span><br><span class="line"></span><br><span class="line">SELECT * from customers</span><br><span class="line">WHERE phone is null;</span><br><span class="line"></span><br><span class="line">#获取没有发货的订单</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM orders;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from orders</span><br><span class="line">WHERE shipper_id is null;</span><br><span class="line"></span><br><span class="line">#对查询的数据进行排序</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">ORDER BY customer_id DESC;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">ORDER BY first_name;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">ORDER BY state desc,first_name DESC;</span><br><span class="line"></span><br><span class="line">SELECT first_name,last_name,10 as point</span><br><span class="line">from customers</span><br><span class="line">ORDER BY 1,2;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT *</span><br><span class="line">from order_items</span><br><span class="line">WHERE order_id &#x3D; 2</span><br><span class="line">ORDER BY quantity * unit_price DESC ;</span><br><span class="line"></span><br><span class="line">SELECT * ,quantity * unit_price AS total_price</span><br><span class="line">from order_items</span><br><span class="line">WHERE order_id &#x3D; 2</span><br><span class="line">ORDER BY quantity * unit_price DESC ;</span><br><span class="line"></span><br><span class="line">SELECT * ,quantity * unit_price AS total_price</span><br><span class="line">from order_items</span><br><span class="line">WHERE order_id &#x3D; 2</span><br><span class="line">ORDER BY total_price DESC ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#限制展示查询的数据，比如查出来10条数据，只展示3条；</span><br><span class="line">#limit语句</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">LIMIT 3</span><br><span class="line"></span><br><span class="line"># page1  1-3</span><br><span class="line"># page2  4-6</span><br><span class="line"># page3  7-9</span><br><span class="line">#我们想取第三页的数据</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">LIMIT 6,3</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">ORDER BY points DESC</span><br><span class="line">LIMIT 3;</span><br><span class="line"></span><br><span class="line">#写sql语句时关键字的顺序</span><br><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE points&gt;2500</span><br><span class="line">ORDER BY points DESC</span><br><span class="line">LIMIT 3;</span><br><span class="line"></span><br><span class="line">##之前，都是在一张表上进行操作，但是实际上，我们需要在多张表上进行操作。</span><br><span class="line"></span><br><span class="line">#inner join</span><br><span class="line">SELECT *</span><br><span class="line">from orders</span><br><span class="line">inner JOIN customers on orders.customer_id &#x3D; customers.customer_id; #可选的</span><br><span class="line"></span><br><span class="line">SELECT order_id,first_name,last_name</span><br><span class="line">from orders</span><br><span class="line">inner JOIN customers on orders.customer_id &#x3D; customers.customer_id;</span><br><span class="line"></span><br><span class="line">#这样会报错，因为customer_id两张表都有，</span><br><span class="line">SELECT order_id,customer_id,first_name,last_name</span><br><span class="line">from orders</span><br><span class="line">inner JOIN customers on orders.customer_id &#x3D; customers.customer_id;</span><br><span class="line"></span><br><span class="line">#这样就可以了</span><br><span class="line">SELECT order_id,orders.customer_id,first_name,last_name</span><br><span class="line">from orders</span><br><span class="line">inner JOIN customers on orders.customer_id &#x3D; customers.customer_id;</span><br><span class="line"></span><br><span class="line">#除此之外，因为表名特别长。也可以对表名进行起别名</span><br><span class="line">SELECT order_id,o.customer_id,first_name,last_name</span><br><span class="line">from orders o</span><br><span class="line">JOIN customers c on o.customer_id &#x3D; c.customer_id;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT o.order_id,o.product_id,quantity,o.unit_price</span><br><span class="line">from order_items o</span><br><span class="line">JOIN products p on o.product_id &#x3D; p.product_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#跨数据库中的表查询</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">from order_items o</span><br><span class="line">JOIN sql_inventory.products p on o.product_id &#x3D; p.product_id;</span><br><span class="line">#此时是能够进行查询的，因为我们使用的是sql_store数据库，但是如果不是使用的这个数据库</span><br><span class="line">#我们就需要进行换一种写法</span><br><span class="line">SELECT *</span><br><span class="line">from sql_store.order_items o</span><br><span class="line">JOIN sql_inventory.products p on o.product_id &#x3D; p.product_id;</span><br><span class="line">#所以在查询不同数据库的时候，我们需要在不同数据库表的前面加上数据库的名字</span><br><span class="line"></span><br><span class="line">#其实表也是可以自链接的</span><br><span class="line">use sql_hr;</span><br><span class="line"></span><br><span class="line">SELECT e.employee_id,e.first_name,m.first_name AS manager</span><br><span class="line">from</span><br><span class="line">employees e</span><br><span class="line">JOIN employees m ON e.reports_to &#x3D; m.employee_id;</span><br><span class="line"></span><br><span class="line">#如何连接两个以上的表,这里连接的是三张表</span><br><span class="line">use sql_store;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM orders</span><br><span class="line">JOIN customers ON orders.customer_id &#x3D; customers.customer_id </span><br><span class="line">JOIN order_statuses on order_statuses.order_status_id &#x3D; orders.&#96;status&#96;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#改进</span><br><span class="line">SELECT </span><br><span class="line">o.order_id,</span><br><span class="line">o.order_date,</span><br><span class="line">c.first_name,</span><br><span class="line">c.last_name,</span><br><span class="line">os.name AS status</span><br><span class="line">FROM orders o</span><br><span class="line">JOIN customers c ON o.customer_id &#x3D; c.customer_id </span><br><span class="line">JOIN order_statuses os on os.order_status_id &#x3D; o.&#96;status&#96;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">use sql_invoicing</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">p.date,</span><br><span class="line">p.invoice_id,</span><br><span class="line">p.payment_id,</span><br><span class="line">p.amount,</span><br><span class="line">c.&#96;name&#96;,</span><br><span class="line">pm.&#96;name&#96;</span><br><span class="line">FROM payments p</span><br><span class="line">JOIN payment_methods pm ON p.payment_method &#x3D; pm.payment_method_id</span><br><span class="line">JOIN clients c ON p.client_id &#x3D; c.client_id;</span><br><span class="line"></span><br><span class="line">#到目前为止，我们只是做的事每一个表有主键只有一个，接下来是多个字段作为主键的情况</span><br><span class="line"></span><br><span class="line">#练习一个表与另一表进行连接，其中一个表主键包含两个字段</span><br><span class="line">USE sql_store</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM order_items</span><br><span class="line">JOIN order_item_notes </span><br><span class="line">on order_items.order_id &#x3D; order_item_notes.order_id</span><br><span class="line">AND order_items.product_id &#x3D; order_item_notes.product_id;</span><br><span class="line"></span><br><span class="line">#隐式连接</span><br><span class="line">#之前的是这样的</span><br><span class="line">SELECT *</span><br><span class="line">from orders o</span><br><span class="line">JOIN customers c on o.customer_id &#x3D; c.customer_id;</span><br><span class="line">#现在</span><br><span class="line">#我们称之为隐式语法，但是如果没有写where子句的话，查出来的数据与我们想要的不一样，</span><br><span class="line">#所以但是我们最好使用显示的。</span><br><span class="line">SELECT *</span><br><span class="line">FROM orders o,customers c</span><br><span class="line">WHERE o.customer_id &#x3D; c.customer_id;</span><br><span class="line"></span><br><span class="line">#下面的写法是没有问题的，但是发现，有的数据是不能展示出来的。</span><br><span class="line">SELECT </span><br><span class="line">c.customer_id,</span><br><span class="line">c.first_name,</span><br><span class="line">o.order_id</span><br><span class="line">FROM customers c</span><br><span class="line">JOIN orders o on c.customer_id &#x3D; o.customer_id</span><br><span class="line">ORDER BY c.customer_id;</span><br><span class="line"></span><br><span class="line">#左连接</span><br><span class="line">SELECT </span><br><span class="line">c.customer_id,</span><br><span class="line">c.first_name,</span><br><span class="line">o.order_id</span><br><span class="line">FROM customers c</span><br><span class="line">left JOIN orders o on c.customer_id &#x3D; o.customer_id</span><br><span class="line">ORDER BY c.customer_id;</span><br><span class="line"></span><br><span class="line">#右连接</span><br><span class="line">SELECT </span><br><span class="line">c.customer_id,</span><br><span class="line">c.first_name,</span><br><span class="line">o.order_id</span><br><span class="line">FROM customers c</span><br><span class="line">left JOIN orders o on c.customer_id &#x3D; o.customer_id</span><br><span class="line">ORDER BY c.customer_id;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">p.product_id,</span><br><span class="line">p.name,</span><br><span class="line">oi.quantity</span><br><span class="line">from products p</span><br><span class="line">LEFT JOIN order_items oi</span><br><span class="line">on p.product_id &#x3D; oi.product_id;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">p.product_id,</span><br><span class="line">p.name,</span><br><span class="line">oi.quantity</span><br><span class="line">from products p</span><br><span class="line">LEFT JOIN order_items oi</span><br><span class="line">on p.product_id &#x3D; oi.product_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">c.customer_id,</span><br><span class="line">c.first_name,</span><br><span class="line">o.order_id</span><br><span class="line">FROM customers c</span><br><span class="line">left JOIN orders o on c.customer_id &#x3D; o.customer_id</span><br><span class="line">JOIN shippers sh on o.shipper_id &#x3D; sh.shipper_id</span><br><span class="line">ORDER BY c.customer_id;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">c.customer_id,</span><br><span class="line">c.first_name,</span><br><span class="line">o.order_id</span><br><span class="line">FROM customers c</span><br><span class="line">left JOIN orders o on c.customer_id &#x3D; o.customer_id</span><br><span class="line">left JOIN shippers sh on o.shipper_id &#x3D; sh.shipper_id</span><br><span class="line">ORDER BY c.customer_id;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT </span><br><span class="line">o.order_id,</span><br><span class="line">o.order_date,</span><br><span class="line">c.first_name as customer,</span><br><span class="line">s.name as shipper</span><br><span class="line"></span><br><span class="line">from orders o</span><br><span class="line">LEFT JOIN customers c ON o.customer_id &#x3D; c.customer_id</span><br><span class="line">LEFT JOIN shippers s  on s.shipper_id &#x3D; o.shipper_id </span><br><span class="line">ORDER BY o.order_id</span><br><span class="line"></span><br><span class="line">#自连接</span><br><span class="line">use sql_hr;</span><br><span class="line"></span><br><span class="line">#如果不是使用left join，只是会显示employees有经理的，如下所示：</span><br><span class="line">SELECT </span><br><span class="line">e.employee_id,</span><br><span class="line">e.first_name,</span><br><span class="line">m.first_name as manager</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN employees m</span><br><span class="line">on e.reports_to &#x3D; m.employee_id;</span><br><span class="line"></span><br><span class="line">#改进：</span><br><span class="line">SELECT </span><br><span class="line">e.employee_id,</span><br><span class="line">e.first_name,</span><br><span class="line">m.first_name as manager</span><br><span class="line">FROM employees e</span><br><span class="line">LEFT JOIN employees m</span><br><span class="line">on e.reports_to &#x3D; m.employee_id;</span><br><span class="line"></span><br><span class="line">#USING 使用</span><br><span class="line">#之前是这样的，</span><br><span class="line">select</span><br><span class="line">o.order_id,</span><br><span class="line">c.first_name</span><br><span class="line">FROM orders o</span><br><span class="line">join customers c ON o.customer_id &#x3D; c.customer_id;</span><br><span class="line">#现在是这样的，</span><br><span class="line">select</span><br><span class="line">o.order_id,</span><br><span class="line">c.first_name</span><br><span class="line">FROM orders o</span><br><span class="line">join customers c  USING(customer_id);</span><br><span class="line"></span><br><span class="line">#关于之前的主键包含两个字段的</span><br><span class="line">select *</span><br><span class="line">from order_items</span><br><span class="line">JOIN order_item_notes</span><br><span class="line">on order_items.order_id &#x3D; order_item_notes.order_Id </span><br><span class="line">AND order_items.product_id &#x3D; order_item_notes.product_id;</span><br><span class="line"></span><br><span class="line">#可以换为：</span><br><span class="line">select *</span><br><span class="line">from order_items</span><br><span class="line">JOIN order_item_notes</span><br><span class="line">USING(order_id,product_id);</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">use sql_invoicing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这里面在使用Using()的时候，两个表名里面的字段名必须相同，否则没办法用。</span><br><span class="line">SELECT *</span><br><span class="line">FROM payments p</span><br><span class="line">JOIN payment_methods pm</span><br><span class="line">on pm.payment_method_id &#x3D; p.payment_id</span><br><span class="line">join clients USING(client_id);</span><br><span class="line"></span><br><span class="line">#交叉连接</span><br><span class="line">#例如：</span><br><span class="line">use sql_store;</span><br><span class="line"></span><br><span class="line">#交叉连接显示语法</span><br><span class="line">SELECT *</span><br><span class="line">from customers</span><br><span class="line">cross JOIN products;</span><br><span class="line"></span><br><span class="line">#交叉连接隐式语法</span><br><span class="line">SELECT *</span><br><span class="line">from customers,products;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#UNION,将多个查询的语句结果进行整合，但是如果没个查询的语句查询的列数不一样，比如</span><br><span class="line">#第一个查询是一个字段，第二个查询是两个字段，回产生错误。</span><br><span class="line"></span><br><span class="line"># &#39;Avtive&#39;是我们自己加上去的，题目意思是：2019-01-01之前的不是Active。</span><br><span class="line">SELECT </span><br><span class="line">order_id,</span><br><span class="line">order_date,</span><br><span class="line">&#39;Active&#39; AS status</span><br><span class="line">from orders</span><br><span class="line">WHERE order_date &gt;&#x3D; &#39;2019-01-01&#39; </span><br><span class="line">UNION</span><br><span class="line">SELECT </span><br><span class="line">order_id,</span><br><span class="line">order_date,</span><br><span class="line">&#39;Actived&#39; AS status</span><br><span class="line">from orders</span><br><span class="line">WHERE order_date &lt; &#39;2019-01-01&#39;;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">SELECT </span><br><span class="line">customer_id,</span><br><span class="line">first_name,</span><br><span class="line">points,</span><br><span class="line">&#39;Bronze&#39; AS type </span><br><span class="line">FROM customers</span><br><span class="line">WHERE points &lt; 2000</span><br><span class="line">UNION</span><br><span class="line">SELECT </span><br><span class="line">customer_id,</span><br><span class="line">first_name,</span><br><span class="line">points,</span><br><span class="line">&#39;Silver&#39; AS type </span><br><span class="line">FROM customers</span><br><span class="line">WHERE points BETWEEN 2000 AND 3000</span><br><span class="line">UNION</span><br><span class="line">SELECT </span><br><span class="line">customer_id,</span><br><span class="line">first_name,</span><br><span class="line">points,</span><br><span class="line">&#39;Gold&#39; AS type </span><br><span class="line">FROM customers</span><br><span class="line">WHERE points &gt; 3000</span><br><span class="line">ORDER BY first_name;</span><br><span class="line"></span><br><span class="line">#-----------------------------------------------------------</span><br><span class="line">#插入、更新和删除</span><br><span class="line">#在表格中插入一行,这里default是默认真，起初设置的是id，</span><br><span class="line">#我们遵循mysql里面的自动增长，不能进行显示赋值。</span><br><span class="line">INSERT INTO customers</span><br><span class="line">VALUES(</span><br><span class="line">DEFAULT,</span><br><span class="line">&#39;LGY&#39;,</span><br><span class="line">&#39;GG&#39;,</span><br><span class="line">NULL,</span><br><span class="line">&#39;17863978947&#39;,</span><br><span class="line">&#39;山东省&#39;,</span><br><span class="line">&#39;聊城&#39;,</span><br><span class="line">&#39;aa&#39;,</span><br><span class="line">DEFAULT);</span><br><span class="line"></span><br><span class="line">#也可以指定值，我们没必要按照顺序进行</span><br><span class="line">INSERT INTO customers(</span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">birth_date,</span><br><span class="line">address,</span><br><span class="line">city,</span><br><span class="line">state</span><br><span class="line">)</span><br><span class="line">VALUES(</span><br><span class="line">&#39;LGY1&#39;,</span><br><span class="line">&#39;GG&#39;,</span><br><span class="line">&#39;1996-06-26&#39;,</span><br><span class="line">&#39;山东省&#39;,</span><br><span class="line">&#39;聊城&#39;,</span><br><span class="line">&#39;aa&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#一次性插入多行</span><br><span class="line">INSERT into shippers (name)</span><br><span class="line">VALUES (&#39;shipper1&#39;),(&#39;shipper2&#39;),(&#39;shipper&#39;);</span><br><span class="line">#练习</span><br><span class="line">INSERT INTO products(name,quantity_in_stock,unit_price)</span><br><span class="line">VALUES(&#39;lhu&#39;,&#39;22&#39;,&#39;33&#39;),</span><br><span class="line">(&#39;ldu&#39;,&#39;3&#39;,&#39;3&#39;),</span><br><span class="line">(&#39;lhuw&#39;,&#39;7&#39;,&#39;1&#39;);</span><br><span class="line"></span><br><span class="line">#将数据插入到多表中,关于order与order_item表</span><br><span class="line"></span><br><span class="line">INSERT INTO orders(customer_id,order_date,&#96;status&#96;)</span><br><span class="line">VALUES(1,&#39;2020-01-01&#39;,1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT into order_items</span><br><span class="line">VALUES</span><br><span class="line">(LAST_INSERT_ID(),1,1,2.98),</span><br><span class="line">(LAST_INSERT_ID(),2,1,3.98)</span><br><span class="line"></span><br><span class="line">#复制数据从一个表到另一个表,但是，复制产生的表里面的主键是没有的，</span><br><span class="line">#而且没有设置为自动增长的</span><br><span class="line">#这里是查询所有的数据进行复制过去</span><br><span class="line">CREATE table order_archived as</span><br><span class="line">SELECT * from orders;</span><br><span class="line"></span><br><span class="line">#也可以先清空表，然后进行复制筛选出来的部分</span><br><span class="line">INSERT into order_archived</span><br><span class="line">SELECT *</span><br><span class="line">from orders</span><br><span class="line">WHERE order_date &lt; &#39;2019-01-01&#39;;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">use sql_invoicing;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create TABLE invoices_archied as</span><br><span class="line">SELECT </span><br><span class="line">client_id,</span><br><span class="line">invoice_id,</span><br><span class="line">&#96;name&#96; AS client,</span><br><span class="line">invoice_total,</span><br><span class="line">payment_total,</span><br><span class="line">invoice_date,</span><br><span class="line">due_date,</span><br><span class="line">payment_date</span><br><span class="line">FROM invoices</span><br><span class="line">JOIN clients USING(client_id)</span><br><span class="line">WHERE payment_date is not null</span><br><span class="line"></span><br><span class="line">#更新数据</span><br><span class="line">UPDATE invoices</span><br><span class="line">SET payment_total &#x3D; 10,payment_date &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">where invoice_id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">#更新多行</span><br><span class="line">UPDATE invoices</span><br><span class="line">SET payment_total &#x3D; 10,payment_date &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">where client_id &#x3D; 3;</span><br><span class="line"></span><br><span class="line">UPDATE invoices</span><br><span class="line">SET payment_total &#x3D; 10,payment_date &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">where client_id &#x3D; (3,4);</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">use sql_store;</span><br><span class="line"></span><br><span class="line">UPDATE customers</span><br><span class="line">SET points &#x3D; points +50</span><br><span class="line">WHERE birth_date &lt;&#39;1990-01-01&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use sql_invoicing</span><br><span class="line"></span><br><span class="line">UPDATE invoices</span><br><span class="line">SET payment_total &#x3D; 10,payment_date &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">where client_id &#x3D; (SELECT client_id FROM clients WHERE name &#x3D; &#39;Myworks&#39;);</span><br><span class="line"></span><br><span class="line">UPDATE invoices</span><br><span class="line">SET payment_total &#x3D; 10,payment_date &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">where client_id in (SELECT client_id FROM clients WHERE state in (&#39;CA&#39;,&#39;NY&#39;));</span><br><span class="line"></span><br><span class="line">#delete删除</span><br><span class="line">DELETE from invoices</span><br><span class="line">WHERE invoice_id &#x3D; 1</span><br><span class="line"></span><br><span class="line">##################################</span><br><span class="line">到此完成了数据库前四章基础内容，对应视频1-40小节</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 算法题目</title>
      <link href="2021/08/20/LeetCode/"/>
      <url>2021/08/20/LeetCode/</url>
      
        <content type="html"><![CDATA[<center>只有经历过地狱般的磨砺，才能练就创造天堂的力量，只有流过血的手指，才能弹出世间的绝响</center><p>​            本篇博客是关于Leetcode的算法题汇总，计划按照顺序依次作答记录，包括但不限于题目说明，解答思路，代码实现，知识补充四个部分，希望通过努力与自律，踏实和实事求是的态度，为未来一年的秋招做好准备！</p><a id="more"></a><h1 id="LeetCode题目"><a href="#LeetCode题目" class="headerlink" title="LeetCode题目"></a>LeetCode题目</h1><h2 id="3-无重复字符的最长字串"><a href="#3-无重复字符的最长字串" class="headerlink" title="3.无重复字符的最长字串"></a>3.无重复字符的最长字串</h2><p>题目链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">点击这里</a>  </p><ul><li><strong>题目说明</strong></li></ul><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p>举例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p>举例2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p>举例3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p>举例4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p><code>0 &lt;= s.length &lt;= 5 * 104</code></p></li><li><p><code>s</code> 由英文字母、数字、符号和空格组成</p></li></ol><ul><li><strong>解答思路</strong></li></ul><p>一读题目，以为之前做过，认为是给出一个字符串，总包含第一个字符，但是仔细一读，发现不是这样的，对于字串，字串开始并不一定就是给出字符串的第一个字母，想到了头指针和尾指针，但是没有考虑到如果是写循环的话，会有大量的重复工作，最后看了官方的思路，豁然开朗。</p><ul><li><strong>代码实现</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        Set&lt;Character&gt; characters = <span class="keyword">new</span> HashSet&lt;Character&gt;();<span class="comment">//创建一个HashSet的对象</span></span><br><span class="line">        <span class="keyword">int</span> n = s.length();<span class="comment">//求字符串的长度</span></span><br><span class="line">        <span class="keyword">int</span> rk = -<span class="number">1</span>;<span class="comment">//指向第0个元素的左边，以-1开头</span></span><br><span class="line">        <span class="keyword">int</span> ans= <span class="number">0</span>;<span class="comment">//返回的最大字串长度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)&#123;</span><br><span class="line">                characters.remove(s.charAt(i-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (rk+<span class="number">1</span>&lt;n &amp;&amp; !characters.contains(s.charAt(rk+<span class="number">1</span>)))&#123;</span><br><span class="line">                characters.add(s.charAt(rk+<span class="number">1</span>));</span><br><span class="line">                ++rk;</span><br><span class="line">            &#125;</span><br><span class="line">           ans = Math.max(ans,rk-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;<span class="comment">//返回的是该字符串的无重复字串的长度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>知识补充</strong></li></ul><p><strong>HashSet</strong>：是一个不允许有重复元素的集合，允许null，是无序的，不是线程安全的，他实现了set()接口，里面存储的是对象，一些常见的基本类型可以使用他的包装类。使用HashSet,需要导入java.util.HashSet包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>里面存储的是String类型的对象，可以是Character的对象都可以。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sites.add()<span class="comment">//添加方法</span></span><br><span class="line">sites.contains(<span class="string">&quot;Taobao&quot;</span>)<span class="comment">//返回的是布尔值，查看是否包含这个字符串</span></span><br><span class="line">sites.remove(<span class="string">&quot;Taobao&quot;</span>);<span class="comment">//删除字符串</span></span><br><span class="line">sites.size()<span class="comment">//返回的是int类型的数字</span></span><br></pre></td></tr></table></figure><p><strong>String</strong>：</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String site = <span class="string">&quot;www.runoob.com&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = site.length();<span class="comment">//字符串长度</span></span><br><span class="line"></span><br><span class="line">string1.concat(string2);<span class="comment">//连接两个字符串</span></span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;www.runoob.com&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> result = s.charAt(<span class="number">6</span>);去索引为<span class="number">6</span>的字符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda总结</title>
      <link href="2021/08/13/Anaconda/"/>
      <url>2021/08/13/Anaconda/</url>
      
        <content type="html"><![CDATA[<center>文案</center><center>白天隐藏在入夜的灯，风躺进熟睡人的呼吸</center><center>芦苇是地底的云，你推窗望过来，瞳孔是距我最近的星🌟</center><a id="more"></a><p>​        最近在进行python实验环境安装过程中，了解的Anaconda（蟒蛇）软件能够有效管理python中的包，于是上手体验啦一番，期间遇到了一些问题，我把我用到的关于Anaconda的常用知识进行汇总。</p><h3 id="关于Anaconda-的常用命令"><a href="#关于Anaconda-的常用命令" class="headerlink" title="关于Anaconda 的常用命令"></a>关于Anaconda 的常用命令</h3><ol><li>检查anaconda 的版本(可以在Anaconda Prompt或者windows自带的命令提示符都可以)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><ol start="2"><li>显示所有环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个名称为KGCN环境，并指定python版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name KGCN python &#x3D; 3.7.11</span><br></pre></td></tr></table></figure><ol start="4"><li>切换环境到KGCN（默认使用环境为base）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate KGCN</span><br></pre></td></tr></table></figure><ol start="5"><li>删除环境KGCN(虚拟环境名称)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n KGCN --all</span><br></pre></td></tr></table></figure><ol start="6"><li>导出某个环境到yaml作为备份，文件存储在命令行打印的目录，前提要进入该环境。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; 名称.yaml</span><br></pre></td></tr></table></figure><ol start="7"><li>在另一台电脑上进行克隆环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f 名称.yaml</span><br></pre></td></tr></table></figure><ol start="8"><li>mac安装了anaconda后，进入命令行自动带（base）LGYdeMacBook-Pro:~ lvguangyue$，要想不显示，执行如下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set auto_activate_base false</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>链接：<a href="https://blog.csdn.net/ysq319/article/details/102773615?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">https://blog.csdn.net/ysq319/article/details/102773615?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p><p>你哈，我们是</p><p>·12    、</p><p>dSvfqwertyuiopasdfghjklzxcvbnm,.’;./[]\</p><p>/ dddhj………cscscsscscss你好，我们是这样的吗我们是s你好，我们，，烦烦烦呀qwertyyuityuiopasdfghjklzxcvbnm/？》；“;;womenw我们都是好孩子，哈哈哈，么么么。</p>]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="2021/08/13/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>2021/08/13/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<center>文案</center><center>白天隐藏在入夜的灯，风躺进熟睡人的呼吸</center><center>芦苇是地底的云，你推窗望过来，瞳孔是距我最近的星🌟</center><a id="more"></a><ol><li><p>SqlServer只适合windows操作系统，不适合其他系统，所以存在一定的局限性。</p></li><li><p>DB（数据库）、DBMS（数据库管理系统）、SQL（结构化查询语言）</p></li><li><p>安装数据库，其实是安装数据库的服务端。</p></li></ol><p>关于卸载MySql：</p><ol><li>在windows里卸载后，其实还没卸载完全</li><li>在安装路径下，存在残留，要删除。</li><li>C盘根目录下，隐藏文件夹ProgramData存在数据库文件，存在mysql文件，要删除。</li></ol><p>停止/打开mysql服务</p><ol><li>通过命令行的方式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">stop</span> mysql(musql为服务里面的mysql的名字)</span><br><span class="line">net <span class="keyword">start</span> mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>通过windows服务页面</li></ol><p>退出mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit或者ctrl+C</span><br></pre></td></tr></table></figure><p>##本单元目标</p><pre><code>一、为什么要学习数据库二、数据库的相关概念          DBMS、DB、SQL三、数据库存储数据的特点四、初始MySQL    MySQL产品的介绍            MySQL产品的安装          ★            MySQL服务的启动和停止     ★    MySQL服务的登录和退出     ★          MySQL的常见命令和语法规范      五、DQL语言的学习   ★                  基础查询        ★                 条件查询         ★                排序查询         ★                    常见函数        ★                   分组函数        ★                  分组查询           ★                连接查询         ★                子查询       √                      分页查询       ★                  union联合查询    √            六、DML语言的学习    ★                 插入语句                            修改语句                            删除语句                        七、DDL语言的学习      库和表的管理     √                    常见数据类型介绍  √              常见约束        √            八、TCL语言的学习    事务和事务处理                 九、视图的讲解           √十、变量                      十一、存储过程和函数   十二、流程控制结构       </code></pre><p>##数据库的好处<br>    1.持久化数据到本地<br>    2.可以实现结构化查询，方便管理</p><p>##数据库相关概念<br>    1、DB：数据库，保存一组有组织的数据的容器<br>    2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>    3、SQL:结构化查询语言，用于和DBMS通信的语言</p><p>##数据库存储数据的特点<br>    1、将数据放到表中，表再放到库中<br>    2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>    3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>    4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>    5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><p>##MySQL产品的介绍和安装</p><p>###MySQL服务的启动和停止<br>    方式一：计算机——右击管理——服务<br>    方式二：通过管理员身份运行<br>    net start 服务名（启动服务）<br>    net stop 服务名（停止服务）</p><p>###MySQL服务的登录和退出<br>    方式一：通过mysql自带的客户端<br>    只限于root用户</p><pre><code>方式二：通过windows自带的客户端登录：mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C</code></pre><p>​<br>​<br>​<br>###MySQL的常见命令 </p><pre><code>1.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名(    列名 列类型,    列名 列类型，    。。。);6.查看表结构desc 表名;7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V</code></pre><p>###MySQL的语法规范<br>    1.不区分大小写,但建议关键字大写，表名、列名小写<br>    2.每条命令最好用分号结尾<br>    3.每条命令根据需要，可以进行缩进 或换行<br>    4.注释<br>        单行注释：#注释文字<br>        单行注释：– 注释文字<br>        多行注释：/* 注释文字  */</p><p>​<br>​    </p><p>###SQL的语言分类<br>    DQL（Data Query Language）：数据查询语言<br>        select<br>    DML(Data Manipulate Language):数据操作语言<br>        insert 、update、delete<br>    DDL（Data Define Languge）：数据定义语言<br>        create、drop、alter<br>    TCL（Transaction Control Language）：事务控制语言<br>        commit、rollback</p><p>###SQL的常见命令</p><pre><code>show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名(    字段名 字段类型,        字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据</code></pre><p>在navicat细节问题：</p><ol><li>在使用数据库的时候，要先打开指定的库，</li><li>``叫做着重号，一般使用在字段里面，但是不使用也没事，主要是区分是不是字段或者是不是着重号。</li><li>想执行某条语句，选中要执行的语句进行.</li></ol><p>##DQL语言的学习<br>###进阶1：基础查询<br>    语法：<br>    SELECT 要查询的东西<br>    【FROM 表名】;</p><pre><code>类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数</code></pre><p>###进阶2：条件查询<br>    条件查询：根据条件过滤原始表的数据，查询到想要的数据<br>    语法：<br>    select<br>        要查询的字段|表达式|常量值|函数<br>    from<br>        表<br>    where<br>        条件 ;</p><pre><code>分类：一、条件表达式    示例：salary&gt;10000    条件运算符：    &gt; &lt; &gt;= &lt;= = != &lt;&gt;二、逻辑表达式示例：salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符：    and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false    or(||)：两个条件只要有一个成立，结果为true，否则为false    not(!)：如果条件成立，则not后为false，否则为true三、模糊查询示例：last_name like &#39;a%&#39;</code></pre><h4 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h4><p>方式一：使用AS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select last_name AS 姓 from teacher;</span><br></pre></td></tr></table></figure><p>方式二：省略AS，直接相连，也可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select last_name 姓 from teacher;</span><br></pre></td></tr></table></figure><p>如果是把结果显示为某一项，但是某一项有特殊符号，需要加””或者’’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select age AS &quot;out put&quot; from students;</span><br></pre></td></tr></table></figure><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><p>distinct关键字</p><h4 id="号的作用"><a href="#号的作用" class="headerlink" title="+号的作用"></a>+号的作用</h4><p>加号+在mysql中只有一个功能，那就是作为运算符，</p><p>###进阶3：排序查询    </p><pre><code>语法：select    要查询的东西from    表where     条件order by 排序的字段|表达式|函数|别名 【asc|desc】</code></pre><p>​<br>###进阶4：常见函数<br>    一、单行函数<br>    1、字符函数<br>        concat拼接<br>        substr截取子串<br>        upper转换成大写<br>        lower转换成小写<br>        trim去前后指定的空格和字符<br>        ltrim去左边空格<br>        rtrim去右边空格<br>        replace替换<br>        lpad左填充<br>        rpad右填充<br>        instr返回子串第一次出现的索引<br>        length 获取字节个数</p><pre><code>2、数学函数    round 四舍五入    rand 随机数    floor向下取整    ceil向上取整    mod取余    truncate截断3、日期函数    now当前系统日期+时间    curdate当前系统日期    curtime当前系统时间    str_to_date 将字符转换成日期    date_format将日期转换成字符4、流程控制函数    if 处理双分支    case语句 处理多分支        情况1：处理等值判断        情况2：处理条件判断5、其他函数    version版本    database当前库    user当前连接用户</code></pre><p>​    </p><p>二、分组函数</p><pre><code>    sum 求和    max 最大值    min 最小值    avg 平均值    count 计数    特点：    1、以上五个分组函数都忽略null值，除了count(*)    2、sum和avg一般用于处理数值型        max、min、count可以处理任何数据类型    3、都可以搭配distinct使用，用于统计去重后的结果    4、count的参数可以支持：        字段、*、常量值，一般放1       建议使用 count(*)</code></pre><p>##进阶5：分组查询<br>    语法：<br>    select 查询的字段，分组函数<br>    from 表<br>    group by 分组的字段</p><p>​<br>​    特点：<br>​    1、可以按单个字段分组<br>​    2、和分组函数一同查询的字段最好是分组后的字段<br>​    3、分组筛选<br>​            针对的表    位置            关键字<br>​    分组前筛选：    原始表        group by的前面        where<br>​    分组后筛选：    分组后的结果集    group by的后面        having<br>​<br>​    4、可以按多个字段分组，字段之间用逗号隔开<br>​    5、可以支持排序<br>​    6、having后可以支持别名</p><p>##进阶6：多表连接查询</p><pre><code>笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件</code></pre><p>一、传统模式下的连接 ：等值连接——非等值连接</p><pre><code>1.等值连接的结果 = 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能</code></pre><p>二、sql99语法：通过join关键字实现连接</p><pre><code>含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on  连接条件【inner|left outer|right outer|cross】join 表3 on  连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！</code></pre><p>​<br>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><pre><code>SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.`manager_id`=m.`employee_id`;</code></pre><p>sql92</p><pre><code>SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.`manager_id`=m.`employee_id`;</code></pre><p>##进阶7：子查询</p><p>含义：</p><pre><code>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询</code></pre><p>特点：</p><pre><code>1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all往往可以用其他查询代替</code></pre><p>##进阶8：分页查询</p><p>应用场景：</p><pre><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></pre><p>语法：</p><pre><code>select 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数;</code></pre><p>特点：</p><pre><code>1.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page</code></pre><p>##进阶9：联合查询</p><p>引入：<br>    union 联合、合并</p><p>语法：</p><pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】</code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重</code></pre><p>##DML语言</p><p>###插入</p><p>语法：<br>    insert into 表名(字段名，…)<br>    values(值1，…);</p><p>特点：</p><pre><code>1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</code></pre><p>###修改</p><p>修改单表语法：</p><pre><code>update 表名 set 字段=新值,字段=新值【where 条件】</code></pre><p>修改多表语法：</p><pre><code>update 表1 别名1,表2 别名2set 字段=新值，字段=新值where 连接条件and 筛选条件</code></pre><p>###删除</p><p>方式1：delete语句 </p><p>单表的删除： ★<br>    delete from 表名 【where 筛选条件】</p><p>多表的删除：<br>    delete 别名1，别名2<br>    from 表1 别名1，表2 别名2<br>    where 连接条件<br>    and 筛选条件;</p><p>方式2：truncate语句</p><pre><code>truncate table 表名</code></pre><p>两种方式的区别【面试题】</p><pre><code>#1.truncate不能加where条件，而delete可以加where条件#2.truncate的效率高一丢丢#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始#4.truncate删除不能回滚，delete删除可以回滚</code></pre><p>##DDL语句<br>###库和表的管理<br>库的管理：</p><pre><code>一、创建库create database 库名二、删除库drop database 库名</code></pre><p>表的管理：<br>    #1.创建表</p><pre><code>CREATE TABLE IF NOT EXISTS stuinfo(    stuId INT,    stuName VARCHAR(20),    gender CHAR,    bornDate DATETIME</code></pre><p>​<br>​    );<br>​<br>​    DESC studentinfo;<br>​    #2.修改表 alter<br>​    语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;<br>​<br>    #①修改字段名<br>    ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;</p><pre><code>#②修改表名ALTER TABLE stuinfo RENAME [TO]  studentinfo;#③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;#④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;#⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;</code></pre><p>​<br>​    #3.删除表<br>​<br>​    DROP TABLE [IF EXISTS] studentinfo;</p><p>​    </p><p>###常见类型</p><pre><code>整型：小数：    浮点型    定点型字符型：日期型：Blob类型：</code></pre><p>###常见约束</p><pre><code>NOT NULLDEFAULTUNIQUECHECKPRIMARY KEYFOREIGN KEY</code></pre><p>##数据库事务<br>###含义<br>    通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><p>###特点<br>    （ACID）<br>    原子性：要么都执行，要么都回滚<br>    一致性：保证数据的状态操作前和操作后保持一致<br>    隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰<br>    持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p><p>相关步骤：</p><pre><code>1、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务</code></pre><p>###事务的分类：</p><p>隐式事务，没有明显的开启和结束事务的标志</p><pre><code>比如insert、update、delete语句本身就是一个事务</code></pre><p>显式事务，具有明显的开启和结束事务的标志</p><pre><code>    1、开启事务    取消自动提交事务的功能    2、编写事务的一组逻辑操作单元（多条sql语句）    insert    update    delete    3、提交事务或回滚事务</code></pre><p>###使用到的关键字</p><pre><code>set autocommit=0;start transaction;commit;rollback;savepoint  断点commit to 断点rollback to 断点</code></pre><p>###事务的隔离级别:</p><p>事务并发问题如何发生？</p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p>事务的并发问题有哪些？</p><pre><code>脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</code></pre><p>如何避免事务的并发问题？</p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读</code></pre><p>设置隔离级别：</p><pre><code>set session|global  transaction isolation level 隔离级别名;</code></pre><p>查看隔离级别：</p><pre><code>select @@tx_isolation;</code></pre><p>##视图<br>含义：理解成一张虚拟的表</p><p>视图和表的区别：</p><pre><code>    使用方式    占用物理空间视图    完全相同    不占用，仅仅保存的是sql逻辑表    完全相同    占用</code></pre><p>视图的好处：</p><pre><code>1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性</code></pre><p>###视图的创建<br>    语法：<br>    CREATE VIEW  视图名<br>    AS<br>    查询语句;<br>###视图的增删改查<br>    1、查看视图的数据 ★</p><pre><code>SELECT * FROM my_v4;SELECT * FROM my_v1 WHERE last_name=&#39;Partners&#39;;2、插入视图的数据INSERT INTO my_v4(last_name,department_id) VALUES(&#39;虚竹&#39;,90);3、修改视图的数据UPDATE my_v4 SET last_name =&#39;梦姑&#39; WHERE last_name=&#39;虚竹&#39;;</code></pre><p>​<br>​    4、删除视图的数据<br>​    DELETE FROM my_v4;<br>###某些视图不能更新<br>    包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all<br>    常量视图<br>    Select中包含子查询<br>    join<br>    from一个不能更新的视图<br>    where子句的子查询引用了from子句中的表<br>###视图逻辑的更新<br>    #方式一：<br>    CREATE OR REPLACE VIEW test_v7<br>    AS<br>    SELECT last_name FROM employees<br>    WHERE employee_id&gt;100;</p><pre><code>#方式二:ALTER VIEW test_v7ASSELECT employee_id FROM employees;SELECT * FROM test_v7;</code></pre><p>###视图的删除<br>    DROP VIEW test_v1,test_v2,test_v3;<br>###视图结构的查看<br>    DESC test_v7;<br>    SHOW CREATE VIEW test_v7;</p><p>##存储过程</p><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数</code></pre><p>分类：</p><pre><code>1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个</code></pre><p>###创建存储过程<br>语法：</p><pre><code>create procedure 存储过程名(in|out|inout 参数名  参数类型,...)begin    存储过程体end</code></pre><p>类似于方法：</p><pre><code>修饰符 返回类型 方法名(参数类型 参数名,...)&#123;    方法体;&#125;</code></pre><p>注意</p><pre><code>1、需要设置新的结束标记delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)BEGIN    sql语句1;    sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出</code></pre><p>#调用存储过程<br>    call 存储过程名(实参列表)<br>##函数</p><p>###创建函数</p><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><pre><code>CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN    函数体END</code></pre><p>###调用函数<br>    SELECT 函数名（实参列表）</p><p>###函数和存储过程的区别</p><pre><code>        关键字        调用语法    返回值            应用场景函数        FUNCTION    SELECT 函数()    只能是一个        一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个存储过程    PROCEDURE    CALL 存储过程()    可以有0个或多个        一般用于更新</code></pre><p>##流程控制结构</p><p>###系统变量<br>一、全局变量</p><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><pre><code>查看所有全局变量SHOW GLOBAL VARIABLES;查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;查看指定的系统变量的值SELECT @@global.autocommit;为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;</code></pre><p>二、会话变量</p><p>作用域：针对于当前会话（连接）有效</p><pre><code>查看所有会话变量SHOW SESSION VARIABLES;查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;为某个会话变量赋值SET @@session.tx_isolation=&#39;read-uncommitted&#39;;SET SESSION tx_isolation=&#39;read-committed&#39;;</code></pre><p>###自定义变量<br>一、用户变量</p><p>声明并初始化：</p><pre><code>SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select @变量名;</code></pre><p>二、局部变量</p><p>声明：</p><pre><code>declare 变量名 类型 【default 值】;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select 变量名</code></pre><p>二者的区别：</p><pre><code>        作用域            定义位置        语法</code></pre><p>用户变量    当前会话        会话的任何地方        加@符号，不用指定类型<br>局部变量    定义它的BEGIN END中     BEGIN END的第一句话    一般不用加@,需要指定类型</p><p>###分支<br>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><pre><code>情况一：类似于switchcase 表达式when 值1 then 结果1或语句1(如果是语句，需要加分号) when 值2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</code></pre><p>特点：<br>    可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><pre><code>if 情况1 then 语句1;elseif 情况2 then 语句2;...else 语句n;end if;</code></pre><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>            应用场合<br>    if函数        简单双分支<br>    case结构    等值判断 的多分支<br>    if结构        区间判断 的多分支</p><p>###循环</p><p>语法：</p><pre><code>【标签：】WHILE 循环条件  DO    循环体END WHILE 【标签】;</code></pre><p>特点：</p><pre><code>只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言</title>
      <link href="2021/08/13/Java/"/>
      <url>2021/08/13/Java/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210831130537444.png" alt="image-20210831130537444"></p><p>最近在复盘Java基础，有些在之前的学习过程中遗忘，现在进行查缺补漏。</p><a id="more"></a> <h1 id="Java语言学习"><a href="#Java语言学习" class="headerlink" title="Java语言学习"></a>Java语言学习</h1><h2 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h2><h2 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>命名规范：</p><p>类名：XxxYyyZzz </p><p>包名：xxxyyyzzz</p><p>常量名、方法名还有多单词首字母大写时：xxxYyyZzz</p><p>常量名：所有字母都大写，多单词用下划线 XXX_YYY_ZZZ，除此之外还要见名知意。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量必须先声明再赋值</p><h4 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h4><p><strong>8种基本数据类型：</strong></p><p>byte：1字节，占8bit（位）、bit不是存0就是存1，标识范围：-128～127（-2*2的7次方～2的7次方-1）。</p><p>short：2字节。</p><p>int：4字节，经常用。</p><p>long：8字节：声明long型的变量，必须以l或者L结尾。只是标示一下。</p><p>float：4字节，精度有限，单精度，虽然也占4个字节，但是要比int表示的范围还要大。定义float类型要以f或者F结尾，只是标示。</p><p>doublt：8字节，双精度，精度要高。要用浮点型的话，经常用double，但是不如float存的多。</p><p>char：（1个字符等于2个字节，16位）例：char c1= ‘a’，只能写一个字符，不能写两个。char c2 = ‘\n’,表示换行</p><p>boolean：只能有两个值，一个是true，一个是false。</p><p><u>字符集，所有的东西在存储的时候都是01010…..，但是展现的时候是丰富多彩的，a = 3 ，美国的ASCII规定了每个字符代表着什么，比如，a为97，但是中国却不能一一对应，Unicode是使用最广的一种，但是落地的是UTF-8，我们都是用它。</u></p><p><strong>3种引用类型：</strong>（以后再说）</p><p>class：</p><p>interface</p><p>[]数组（字符串是一个类类型）</p><p><strong>7种基本数据类型（不包括boolean）之间的运算规则</strong>：</p><p>byte、char、short –&gt;int –&gt; long –&gt;float –&gt; double</p><ul><li>自动类型提升：</li></ul><ol><li>byte和int类型做运算，转为int型，转为long型也可以，使用float型也可以，会补小数点。</li><li>char和int做运算，转为int类型，但是byte和char还要short俩俩做运算时，只能使用int型。</li></ol><p><strong>总结：</strong>当容量小的变为数据类型转位容量大的类型的时候，自动提升为容量大的。</p><ul><li>强制类型转换（自动类型提升的逆运算）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> b1 = <span class="number">12.3</span></span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)b1</span><br><span class="line">结果：<span class="number">12</span></span><br></pre></td></tr></table></figure><p>强制转换可能会导致精度损失</p><p><strong>String</strong></p><p>String属于引用数据类型，翻译为字符串，是可以和8种数据类型做运算的，且运算只能是连接运算，</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>要不停的敲，不停的写代码，边写边想，强化记忆，刚开始拿来题目不会很正常，但是要想且要敲就好了。</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>+、-、*、/、%、++、–、+（字符串连接）</p><p>a++、++a、（先写先加，后写后加），这种自增1不会改变原来的数据类型。</p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>=、+=、-=、*=、/=，%=</p><p>+=：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">s1 = s1 +<span class="number">2</span>;</span><br><span class="line">s1 += <span class="number">2</span>;</span><br><span class="line">第一种不会改变变量本身的数据类型，第二种会改变本身的数据类型。</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>(结果是boolean型)</p><p>==、!=、&lt;、&gt;、&lt;=、&gt;=、instanceof</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符只能适用于布尔类型的变量</p><p>&amp;（逻辑与）、|（逻辑或）、！（逻辑非）、&amp;&amp;(短路与)、||（短路或）、^ （逻辑异或）</p><p>&amp;（逻辑与）：全为真才为真</p><p>|（逻辑或）：有一个为真就是真</p><p>&amp;&amp;(短路与)：全是真才为真</p><p>||（短路或）：有一个真就是真</p><p>^ （逻辑异或）：相同为false，不同就为true。</p><p>问题1:<strong>&amp;和&amp;&amp;之间的相同点与区别</strong></p><ol><li>都表示且对关系，只有当都满足（true）的时候才才为真</li><li>当左边是true 的时候，右边都执行。</li><li>当左边是false 的时候，&amp;&amp;左边为false 的时候，右边就不执行了。</li></ol><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>&lt;&lt;（左移）、&gt;&gt;（右移）、&gt;&gt;&gt;（无符号右移）、&amp;（与运算）、|（或运算）、^（异或运算） 、～（）取反运算</p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>（条件表达式）？表达式1:表达式2；</p><p>true：执行表达式1，false：执行表达式2</p><p>三元运算符是可以嵌套的，除此之外，凡是可以使用三元运算符的，都是可以使用if else语句的。但是反过来是不一定的。</p><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><p>if … else</p><p>switch….</p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>for循环、while循环、do while循环</p><p><strong>break与continue的关系</strong></p><p>break应用在switch-case循环结构中，当调用break时，是结束<strong>当前</strong>循环</p><p>continue应用在循环结构中，只是结束<strong>当次</strong>循环。</p><h2 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h2><ol><li>Eclipse中的workspace就是工作空间，把所有的代码自动放在一个空间里。</li><li>eclipse导入到工作空间中，如果工作空间中有一个相同的项目，更改名字是不能够导入的，这时候要改一下工作空间中的项目名字，再把项目整进去，可以选择复制进去，然后进行删除页面的项目。</li><li>关于单个文件的乱码问题，可以单独用记事本打开，然后另存为UTF-8的格式，然后再粘进去。Notepad软件能够直接更改格式。</li></ol><h2 id="day08"><a href="#day08" class="headerlink" title="day08"></a>day08</h2><p>内存中的区域：方法区、虚拟机栈、本地方法栈、堆、程序计数器。</p><h2 id="day09"><a href="#day09" class="headerlink" title="day09"></a>day09</h2><ol><li><p>可变形参方法的函数中，如过还有一个确定的形参，需要把确定的形参放到前面，可变形参放到后面。</p></li><li><p>可变形参数一个方法只能有一个。</p></li><li><p>关于值传递机制：形参接受的是实参的地址值。</p></li></ol><h2 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h2><p>java规定的四种权限修饰符，private、缺省、provated、public</p><p>修饰类的话只能是public或者是缺省。其他的不能修饰类。</p><p>任何一个类，都有构造器。constructor：建造者。</p><p>默认的构造器的权限跟类的权限相同。</p><p>构造器的作用：</p><ol><li>创建对象。</li><li>还可以进行对对象进行初始化。</li></ol><p>new + 构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>只要显示定义了构造器，系统就不再提供空参构造器。</p><p>属性赋值的先后顺序：1.默认初始化值、2.显示初始化值（在类的属性中进行赋值）3.构造器赋值、4.方法赋值</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>可以修饰：属性、方法、构造器</p><p>this理解为：当前对象或者为正在创建的对象，可以this.属性或者this.方法，一般我们都不写this，但是当方法的形参和类的属性同名的时候，就要使用this。</p><p>this可以修饰构造器</p><p>原因：当不同构造器中含有很多相同的方法，除了把相同的方法写成一个函数，也可以调用构造器。</p><p>如果一个类中有n个构造器，那么最多有（n-1）个构造器使用了this（形参列表）</p><p>this（构造器）一定要放在构造器的首行。</p><p>构造器内部只能声明一个this（形参列表），用来调用其他的构造器。</p><h2 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h2><p>关于多态：</p><p>这里Person是父类，Man是子类。这里是：父亲的引用指向子类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p2 = <span class="keyword">new</span> Man</span><br></pre></td></tr></table></figure><p>这里面执行的是子类重写父类的方法（work()方法在子类的方法中重写过）也就是子父类都有walk()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.work()</span><br></pre></td></tr></table></figure><p>而earnMoney()方法是子类特有的方法，但是p2.earnMoney()是不能调用的，因为父类中没有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2.earnMoney()</span><br></pre></td></tr></table></figure><p>多态时是运行时行为，</p><p>使用前提：1⃣️ 类的继承 2⃣️方法的重写</p><p>说明：</p><ol><li><p>如果子父类有一个相同的属性，在new完对象的时候，如果调用子父类都有的属性，调用的是父类的属性，所以说，多态适合于方法，而不适合于属性，</p></li><li><p>有了对象以后，我们在编译期，只能调用父类声明的方法，但在运行期，执行的是子类重写父类的方法。</p><p>有了对象的多态性以后，内存中实际上是加载了子类的属性和方法的，到那时由于变量声明为父类类型，</p><p>导致编译时，只能调用父类声明的属性和方法，子类特有的属性和方法不能够调用。</p></li></ol><p>如何能调用子类特有的属性和方法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Man m1 = (Man)p2</span><br></pre></td></tr></table></figure><p>这里p2是父类类型的对象，进行父类向子类对象进行强转。也就是<strong>向下转型</strong>（父类向子类转）</p><p>使用强转时，可能会造成ClassCastExceotion的异常，比如Momen和Man都是Person的子类，但是如果这样使用就会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Women w1 = (Women)p2</span><br></pre></td></tr></table></figure><p>这样会报错，这里引入：instanceof关键字，使用情景，为了避免在向下转型出现异常，使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">instanceof</span> A</span><br></pre></td></tr></table></figure><p>如果是，那就继续执行，不是就不执行了。</p><p>如果a instanceof A为true，那么a instance B也一定对，那么B一定是A 的父类。</p><p>== 和equals() 的区别</p><p>== ：运算符</p><ol><li>可以使用在基本数据类型变量和引用数据类型变量中(但如果比较多是基本数据类型，知识比较多数据是否相等，类型不一定相同)</li><li>如果比较的是引用数据类型，那么比较多两个对象的地址值是不是相同。</li></ol><p>equals()：是一个方法</p><ol><li>只适用于引用数据类型 。</li><li>Object类中的equals()中与 == 相同。</li><li>但是，像String、Date、File等包装类都重写了Object类中的equals()，重写以后，比较的不是引用的地址值是不是相同，而是比较的是两个对象的“实体内容”是不是相同。</li></ol><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210817201217488.png" alt="image-20210817201217488"></p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>视频301</p><h3 id="基本数据类型与包装类"><a href="#基本数据类型与包装类" class="headerlink" title="基本数据类型与包装类"></a>基本数据类型与包装类</h3><p>int对应与Integer类，一般我们都需要进行如下操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">Intenger int1 = <span class="keyword">new</span> Intenger(i);</span><br></pre></td></tr></table></figure><p>此时，int1就为Integer 的对象，但是以下操作也是正确的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">Integer int1 = num2;</span><br></pre></td></tr></table></figure><p>这里面设计自动封箱，以前还需要进行包装，现在是不需要进行包装。</p><p>自动装箱和自动拆箱是JDK 5.0以后才有的，拿过来使用即可。</p><p>基本数据类型、包装类 —&gt; String类型：调用String重载的valueof()</p><p>重点：基本数据类型和包装类 转 String 使用valueof(),String转为基本数据类型、包装类的时候使用parseXXX(String).</p><h2 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h2><p>如果在类中声明了static类型的，那就不归某一个对象所拥有，所有创建的对象，都有static的这部分，翻译为静态的</p><p>static可以修饰：属性、方法、代码块、内部类。不能修饰构造器。</p><ol><li>static修饰属性叫做静态变量，</li></ol><p>属性：按是否使用static修饰，氛围静态属性 vs 非静态属性（实例变量）。</p><p>静态变量随着类的加载而加载，静态变量加载要早于对象的创建。由于类只加载一次，所以，静态变量也只加载一次，存在于<strong>方法区的静态域</strong>中。</p><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println()</span><br></pre></td></tr></table></figure><p>没有声明但是可以进行使用，就因为是静态变量，不需要创建对象就可以使用。</p><ol><li>static修饰方法</li></ol><p>随着类的加载而加载，也就是说，在不创建对象的时候，也是可以进行调用的。</p><p>静态方法中，只能调用静态的方法或者属性</p><p>非静态方法中，既可以进行调用非静态的属性和方法，也可以调用静态的方法和属性。</p><p>开发中，如何确定一个属性是否应该声明为static的？</p><ul><li>属性不会随着对象的不同而不同的。</li></ul><p>开发中，如何确定一个属性是否应该声明为static的？</p><ul><li>如果一个属性被设置为静态的，调用这些属性的时候不需要造对象。还有一些经常用的工具类，也经常设置为静态的。</li></ul><p>饿汉式：一上来就造好了。</p><p>懒汉式：啥时候用啥时候造，属于懒汉式，什么时候用什么时候造。</p><p>区分饿汉式和懒汉式，（一般懒汉式比较好，延迟对象的创建）</p><p>饿汉式：坏处，对象加载时间过长，好处：线程安全的。</p><p>懒汉式：好处：延迟对象的创建，坏处：目前线程不安全，到多线程的时候在进行修改。</p><p>单例模式应用场景：</p><ol><li>网站的计数器</li><li>应用程序的日志应用</li><li>数据库连接池</li><li>读取配置文件的类</li><li>Application也是单例</li><li>windows 的任务管理器及回收站也是单例模式。</li></ol><h2 id="day15"><a href="#day15" class="headerlink" title="day15"></a>day15</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块也叫做初始化块，写在类里面哪里都可以，使用一对大括号{}表示</p><p>代码块的作用：用来初始化类、对象，<strong>只能使用static 修饰</strong>，不能使用其他的修饰</p><p>于是分为：<strong>静态代码块、非静态代码块</strong></p><ul><li>静态代码块</li></ul><ol><li>内部可以有输出语句</li><li><strong>随着类的加载而执行，而且只加载一次，</strong>静态方法是随着类的加载而加载，但是不调用就不会起作用，而静态代码块只要是类加载进去，就被调用。作用<strong>是可以初始化类的一些信息</strong>。</li><li>如果定义了多个静态代码块，那么按照先后顺序进行执行。</li><li>静态代码块的执行要优于非静态代码块的执行。</li><li>对于静态代码块内，只能调用静态的属性和方法，不能调用非静态的结构。</li></ol><ul><li>非静态代码块</li></ul><ol><li>内部可以有输出语句</li><li><strong>随着对象的创建而执行，</strong>每造一个对象就执行一次非静态代码块。也就是说，在创建对象时，<strong>对对象的属性进行初始化。</strong></li><li>如果定义了多个非静态代码块，那么按照先后顺序进行执行。</li><li>非静态代码块，可以调用静态的属性、静态的方法、或者非静态的属性、非静态的方法。</li></ol><p>对属性可以赋值的位置：</p><ol><li>默认初始化</li><li>显示初始化/在代码块中进行赋值（谁在前面谁先执行）</li><li>构造器中初始化</li><li>有了对象以后，可以通过“对象.属性”或”对象.方法”进行赋值。</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final关键字可以修饰的结构：类、方法、变量</p><ul><li><p>final修饰类的时候：代表该类没有子类，绝了。像是String类、System类、StringBufffer类就是final的。</p></li><li><p>修饰方法的时候；表示该方法不能被子类进行重写，比如Object类中的getClass()方法就是final的。</p></li></ul><p>这里涉及到native关键字,native代表着调用底层的c或者c++</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure><ul><li>final修饰变量，那么变量就变为常量，<ul><li>final修饰属性：可以考虑赋值的位置；显示初始化、代码块中赋值、构造器中初始化、其他的都不行</li><li>final修饰局部变量（局部变量有方法内部的局部变量，另一种是形参）<ul><li>尤其是使用final修饰形参时，这时候表明此形参为常量。当我们调用此方法时，会穿入一个数值，一旦传入后，就没办法改变了。</li></ul></li></ul></li></ul><p>satatic final 组合可以修饰属性（我们成为全局常量）和方法（用的比较少）</p><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><p>abstract关键字的使用</p><p>可以修饰类、方法（不可以修饰属性、构造器，也不能修饰私有方法和静态方法、final 的方法、final的类）</p><p>使用abstract修饰类的时候，一旦修饰类，就不能创建对象了，也就是不能实例化了。但是其子类可以进行创建对象，子类创建对象的时候，回调用父类中构造器，所有父类的构造器还是有用的。</p><p>修饰方法的时候，就没有方法体了,例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>包含抽象方法的类，一定是抽象类。反之，抽象类是可以没有抽象方法的。</strong></p><p>子类继承抽象类的时候，要么重写一下，要么也写为抽象类。如果重写了父类的所有抽象方法的时候，此时子类才可以进行实例化。若子类没有全部重写抽象方法，那么子类也需要写为抽象类。</p><h3 id="匿名对象于抽象类的匿名子类"><a href="#匿名对象于抽象类的匿名子类" class="headerlink" title="匿名对象于抽象类的匿名子类"></a>匿名对象于抽象类的匿名子类</h3><p>匿名对象：只是new出来的一个对象，并没有进行赋值</p><p>抽象类的匿名子类</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口和类属于并列关系，但是在java中只能进行单继承，不能进行多继承，使用接口就可以实现多重继承的效果。</p><p>有时候我们需要在几个类中抽取一些相同的特征，但是他们之间有不适is-a的关系，只是具有相同行为的特征。</p><p>接口使用interface关键字</p><h4 id="如何定义接口"><a href="#如何定义接口" class="headerlink" title="如何定义接口"></a>如何定义接口</h4><p>接口中可以定义的成员：</p><p>JDK7及以前：只能定义全局常量和抽象方法</p><ul><li>全局常量：public static final 的，但是书写时可以不写public static final</li><li>抽象方法：public abstract 的</li></ul><p>JDK8：除了定义全局常量和抽象方法以外，还可以定义静态方法、默认方法（略）</p><p>接口中是不能定义构造器的，也就是说接口是不能进行实例化的</p><p>在java开发中，接口通过让类实现（implements）的方式来使用，如果实现类实现了抽象类中的所有抽象方法，那么此类就可以进行实例化。如果没有全部实现，那么此类还是抽象类，需要加入abstract。</p><p>java类可以实现多个接口，于是就弥补了单继承的局限性。</p><p>格式：class AA extends BB implements CC,DD,EE</p><p>接口和接口之间的关系是：继承，而且还是多继承，不像类一样只可以进行单继承。</p><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><p>接口的具体使用，体现了多态性，接口实际上可以看做一种规范。（具体不明白接口定义了规范看视频351）</p><ol><li><p>在JDK8以后，如果在接口中定义了静态方法，子类实现接口的时候，并且在创建子类对象的时候，子类对象是拿不到接口中定义的静态方法。只能通过接口来调用，这时接口就有点像工具类了。</p></li><li><p>如果是默认方法，通过子类的实现接口，并且创建子类对象是可以调用默认方法的。如果想重写，直接在子类中进行重写。</p></li><li><p>如果一个子类继承了父类并且实现了一个接口，但是此时父类有一个和实现接口相同的同名同参数的默认方法，此时在子类实例中调用的时候，优先考虑父类中的方法，成为类优先原则。</p></li><li><p>如果一个子类只是实现了多个接口，但是接口中有相同的同名同参数的默认方法，那么在实现类中没有重写此方法的情况下，会报错，接口冲突，解决冲突就需要在子类中进行重写方法。</p></li><li><p>如何在子类的方法中调用父类、接口中重写的方法？</p><p>形式：接口.super.方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CompareA.<span class="keyword">super</span>.method();</span><br></pre></td></tr></table></figure></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B就是内部类，类A就成为内部类</p><p>内部类有分为成员内部类和局部内部类，成员内部类和属性并列，局部内部类是定义在（类方法、代码块、构造器）里面的类。</p><p>成员内部类也是可以定义类的所有东西，可以被final修饰，可以被abstract修饰（不可被实例化）</p><h2 id="day16"><a href="#day16" class="headerlink" title="day16"></a>day16</h2><p>异常处理分为：Error和Exception,这里主要说明一下Exception。</p><p>Exception又分为编译时异常(非受检异常)和运行时异常(受检异常)</p><p>面试题：常见的异常有哪些？举例说明。</p><p>编译时异常：IOException、ClassNotFondException</p><p>运行时异常：</p><ul><li>NullPointerException(空指针异常)</li><li>ArrayIndexOutOfBoundException(数组角标越界)还有字符串角标越界</li><li>ClassCastException(类型转换异常)</li><li>NumberFormatException</li><li>InputMismatchException(输入不匹配异常)</li><li>ArithmeticException(算数异常)</li><li>······</li></ul><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>两种方式：</p><p>方式一：Try-catch-finally</p><p>方式二：throws+异常类型</p><p>异常的处理：抓抛模型</p><p>过程一：“抛”：程序在执行的过程中，一旦出现异常，就会在异常代码出生成一个异常类对象。并将此对象抛出，一旦抛出异常对象以后，其后的代码就不再执行了。</p><p>过程二：“抓”：可以理解为异常处理的方式，也就是上面的两种方式。</p><h3 id="Try-catch-finally的使用"><a href="#Try-catch-finally的使用" class="headerlink" title="Try-catch-finally的使用"></a>Try-catch-finally的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//可能出现的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//处理异常类型的1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finally是可选的，如果没得，如果在try{}里面出现异常，会出现一个异常类的对象，如果被捕获切匹配成功，则说明匹配，以后的catch{}就不执行了，跳出try-catch结构。继续执行后面的代码。</p><p>说明：catch中的异常类型，如果没有子父类关系，谁先谁后无所谓，如果是含有子父类关系，那么要求子类在先，父类在后，不这样做就会报错，显示后面的catch不可到达。</p><p>常用的异常对象处理的方式：1⃣️String getMessage() 2⃣️2printStackTrace</p><p>注意：在try{}里面声明的变量，出了结构以后就不能用了。解决方法：可以在外面声明，在里面进行赋值。</p><p>使用try-catch-finally处理编译时异常时，使得程序不在报错，但是在运行时可不一定不报错。</p><p>finally中声明的都是一定被执行的代码，即使catch中又出现异常了，try中有return语句，catch中有return语句等情况。</p><p>什么写在finally块内？</p><ul><li>想数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动回收的，我们需要手动的对资源进行释放，此时写在finally内。</li></ul><p>try-catch-finally也是可以进行嵌套的。</p><p>现实开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了，我们只针对编译型异常进行处理。</p><h3 id="thows-异常类型"><a href="#thows-异常类型" class="headerlink" title="thows+异常类型"></a>thows+异常类型</h3><p>样例：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210817195846461.png" alt="image-20210817195846461"></p><p>throws + 异常类型写在方法的声明处，指明此方法执行时，可能会抛出的异常，一旦方法体执行时，出现异常，仍会在异常代码处声明一个异常类，此对象满足throws后异常类型时，就会被抛出，异常代码的后续代码，就不再执行了。</p><p>try-catch-finally :真正的将异常处理掉了</p><p>throws：只是把异常抛给了方法的调用者，并没有真正解决异常。</p><h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法有异常，则必须使用try-catch-finally方式进行处理。    </p><p>关于异常的产生？</p><ol><li>系统自动生成</li><li>手动生成一个异常对象，并抛出(throw), 注意：throw 与throws不一样。</li></ol><h3 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h3><h4 id="如何自定义异常类？"><a href="#如何自定义异常类？" class="headerlink" title="如何自定义异常类？"></a>如何自定义异常类？</h4><ol><li>写一个类继承于现有的异常类：RuntimeException或Exception</li><li>提供全局常量：serialVersionUID，可以模仿父类里面的写，可以理解为对类的标识。</li><li>提供重载的构造器</li></ol><h4 id="异常处理练习：视频382"><a href="#异常处理练习：视频382" class="headerlink" title="异常处理练习：视频382"></a>异常处理练习：视频382</h4><h3 id="throws与throw-的不同"><a href="#throws与throw-的不同" class="headerlink" title="throws与throw 的不同"></a>throws与throw 的不同</h3><p>他俩没什么关系，顶多是在讲异常的时候一起讲的。</p><p>throws是异常处理的一种方式，声明在方法的声明处。</p><p>而throw是生成一个异常对象声明在方法体内，抛出对象的一种情况。</p><h2 id="day17"><a href="#day17" class="headerlink" title="day17"></a>day17</h2><h2 id="day18-多线程"><a href="#day18-多线程" class="headerlink" title="day18 多线程"></a>day18 多线程</h2><h3 id="基本概念：程序、进程、线程"><a href="#基本概念：程序、进程、线程" class="headerlink" title="基本概念：程序、进程、线程"></a>基本概念：程序、进程、线程</h3><p><strong>程序</strong>(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。<br><strong>进程</strong>(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期<br>例如：运行中的QQ，运行中的MP3播放器，程序是静态的，进程是动态的</p><p>进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域<br><strong>线程</strong>(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><ul><li><p>若一个进程同一时间并行执行多个线程，就是支持多线程的</p></li><li><p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小</p></li><li><p>一个进程中的多个线程共享相同的内存单元/内存地址空间à它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。</p></li></ul><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210818200735250.png" alt="image-20210818200735250"></p><h3 id="多线程创建的方式"><a href="#多线程创建的方式" class="headerlink" title="多线程创建的方式"></a>多线程创建的方式</h3><p>方式一：继承与Thread类</p><ol><li>写一个类继承于Thread类</li><li>重写Thread类里面的run()方法，把要执行的代码写在此方法里。</li><li>创建Thread类的子类对象</li><li>通过此对象调用start()方法</li></ol><p>方式二：实现Runnable接口</p><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><p>比较创建线程的两种方式:</p><ul><li><p>开发中：优先选择：实现Runnable接口的方式</p></li><li><p>原因：</p><ol><li><p>实现的方式没有类的单继承性的局限性</p></li><li><p>实现的方式更适合来处理多个线程有共享数据的情况。</p></li></ol></li><li><p>联系：public class Thread implements Runnable</p></li><li><p>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p></li></ul><p>发现：Thread类本身也是实现类Runnable接口，方式一是继承Thread类，然后重写父类的run()方法，方式二是直接进行实现Runnable()接口，进而重写run()方法。</p><h3 id="测试Thread中的常用方法："><a href="#测试Thread中的常用方法：" class="headerlink" title="测试Thread中的常用方法："></a>测试Thread中的常用方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. start():启动当前线程；调用当前线程的run()</span><br><span class="line">2. run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</span><br><span class="line">3. currentThread():静态方法，返回执行当前代码的线程</span><br><span class="line">4. getName():获取当前线程的名字</span><br><span class="line">5. setName():设置当前线程的名字</span><br><span class="line">6. yield():释放当前cpu的执行权</span><br><span class="line">7. join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</span><br><span class="line">8. stop():已过时。当执行此方法时，强制结束当前线程。</span><br><span class="line">9. sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</span><br><span class="line">10. isAlive():判断当前线程是否存活</span><br></pre></td></tr></table></figure><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAX_PRIORITY：10</span><br><span class="line">MIN _PRIORITY：1</span><br><span class="line">NORM_PRIORITY：5  --&gt;默认优先级</span><br></pre></td></tr></table></figure><p>如何获取和设置当前线程的优先级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getPriority():获取线程的优先级</span><br><span class="line">setPriority(int p):设置线程的优先级</span><br><span class="line">说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</span><br></pre></td></tr></table></figure><h3 id="线程的声明周期"><a href="#线程的声明周期" class="headerlink" title="线程的声明周期"></a>线程的声明周期</h3><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210821101501463.png" alt="image-20210821101501463"></p><h3 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h3><p>问题；在买票过程中，出现重票、错票。就会导致线程安全问题</p><h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><h3 id="字符串相关的类"><a href="#字符串相关的类" class="headerlink" title="字符串相关的类"></a>字符串相关的类</h3><p>String：字符串，使用一对””引起来表示。</p><ol><li><p>String声明为final的，不可被继承</p></li><li><p>String实现了Serializable接口：表示字符串是支持序列化的。实现了Comparable接口：表示String可以比较大小</p></li><li><p>String内部定义了final char[] value用于存储字符串数据</p></li><li><p>String:代表不可变的字符序列。简称：不可变性。<br>体现：</p><p>1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</p><ol start="2"><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。 </li></ol></li><li><p>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</p></li><li><p>字符串常量池中是不会存储相同内容的字符串的。</p></li></ol><p>String的实例化方式：<br>    方式一：通过字面量定义的方式<br>    方式二：通过new + 构造器的方式</p><p><strong>面试题</strong>：String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？<br>            两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210830132449790.png" alt="image-20210830132449790"></p><p>关字符串的拼接：</p><ol><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量，结果就在堆中。</li><li>如果拼接的结果调用intern()方法，返回值就在常量池中。</li></ol><p><strong>字符串相关的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>：返回字符串的长度： return value.length</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>： 返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>：判断是否是空字符串：return value.length </span>== <span class="number">0</span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span>：使用默认语言环境，将 String 中的所有字符转换为小写</span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span>：使用默认语言环境，将 String 中的所有字符转换为大写</span></span><br><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span>：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>：比较字符串的内容是否相同</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span>：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="function">String <span class="title">concat</span><span class="params">(String str)</span>：将指定字符串连接到此字符串的结尾。 等价于用“+”</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span>：比较两个字符串的大小</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span>：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> ：返回一个新字符串，它是此字符串从beginIndex开始截取到<span class="title">endIndex</span><span class="params">(不包含)</span>的一个子字符串。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span>：测试此字符串是否以指定的后缀结束</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span>：测试此字符串是否以指定的前缀开始</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span>：当且仅当此字符串包含指定的 <span class="keyword">char</span> 值序列时，返回 <span class="keyword">true</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span>：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">替换：</span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line"><span class="function">String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span>：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="function">String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">匹配:</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span>：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class="line"><span class="function">切片：</span></span><br><span class="line"><span class="function">String[] <span class="title">split</span><span class="params">(String regex)</span>：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="function">String[] <span class="title">split</span><span class="params">(String regex, <span class="keyword">int</span> limit)</span>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br></pre></td></tr></table></figure><p><strong>String 与基本数据类型、包装类之间的转换。</strong></p><p>String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</p><p>基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</p><p><strong>String 与 char[]之间的转换</strong></p><p>String –&gt; char[]:调用String的toCharArray()</p><p>char[] –&gt; String:调用String的构造器</p><p><strong>String 与 byte[]之间的转换</strong></p><p>编码：String –&gt; byte[]:调用String的getBytes()</p><p>解码：byte[] –&gt; String:调用String的构造器</p><p>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)</p><p>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂）</p><p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p><p><strong>String、StringBuffer、StringBuilder三者的异同？</strong></p><p>String:不可变的字符序列；相同点：底层使用char[]存储</p><p>StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储</p><p>StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer的常用方法：</span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(xxx)</span>：提供了很多的<span class="title">append</span><span class="params">()</span>方法，用于进行字符串拼接</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>：删除指定位置的内容</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span>：把[start,end)位置替换为str</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, xxx)</span>：在指定位置插入xxx</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">reverse</span><span class="params">()</span> ：把当前字符序列逆转</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>:返回一个从start开始到end索引结束的左闭右开区间的子字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">总结：</span></span><br><span class="line"><span class="function">增：<span class="title">append</span><span class="params">(xxx)</span></span></span><br><span class="line"><span class="function">删：<span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">改：<span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">char</span> ch)</span> / <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span></span></span><br><span class="line"><span class="function">查：<span class="title">charAt</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">插：<span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, xxx)</span></span></span><br><span class="line"><span class="function">长度：<span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">遍历：<span class="keyword">for</span>() + charAt() / toString()</span><br></pre></td></tr></table></figure><h3 id="时间日期API"><a href="#时间日期API" class="headerlink" title="时间日期API"></a>时间日期API</h3><p>（未学）</p><h2 id="枚举类与新注解"><a href="#枚举类与新注解" class="headerlink" title="枚举类与新注解"></a>枚举类与新注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>一、枚举类的使用</p><p>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</p><p>2.当需要定义一组常量时，强烈建议使用枚举类</p><p>3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</p><p>二、如何定义枚举类</p><p>方式一：jdk5.0之前，自定义枚举类</p><p>方式二：jdk5.0，可以使用<strong>enum</strong>关键字定义枚举类</p><p>三、Enum类中的常用方法：</p><p>**values()**方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</p><p>**valueOf(String str)**：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</p><p>**toString()**：返回当前枚举类对象常量的名称</p><p>四、使用enum关键字定义的枚举类实现接口的情况</p><p>情况一：实现接口，在enum类中实现抽象方法</p><p>情况二：让枚举类的对象分别实现接口中的抽象方法</p><h3 id="注解（Annotation）"><a href="#注解（Annotation）" class="headerlink" title="注解（Annotation）"></a>注解（Annotation）</h3><ol><li>注解的使用</li></ol><p>理解Annotation:</p><p>① jdk 5.0 新增的功能</p><p>② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</p><p>通过使用 Annotation,程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。</p><p>③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</p><ol start="2"><li>Annocation的使用示例</li></ol><p>示例一：生成文档相关的注解</p><p>示例二：在编译时进行格式检查(JDK内置的三个基本注解)</p><p>@Override: 限定重写父类方法, 该注解只能用于方法</p><p>@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p><p>@SuppressWarnings: 抑制编译器警告</p><p>示例三：跟踪代码依赖性，实现替代配置文件功能</p><ol start="3"><li>如何自定义注解：参照@SuppressWarnings定义</li></ol><p>① 注解声明为：@interface</p><p>② 内部定义成员，通常使用value表示</p><p>③ 可以指定成员的默认值，使用default定义</p><p>④ 如果自定义注解没有成员，表明是一个标识作用。</p><p>如果注解有成员，在使用注解时，需要指明成员的值，但是有默认值就不需要指定了 。自定义注解必须配上注解的信息处理流程(使用反射)才有意义。</p><p><strong>自定义注解通过都会指明两个元注解：Retention、Target</strong></p><ol start="4"><li>jdk 提供的4种元注解 （元注解就是修饰其他注解的注解）（顺便说一下元数据，对现有数据的进行修饰的数据）</li></ol><p>元注解：对现有的注解进行解释说明的注解</p><p><strong>Retention：</strong>指定所修饰的 Annotation 的生命周期：<strong>SOURCE、CLASS（默认行为）、RUNTIME</strong>，只有声明为</p><p>RUNTIME生命周期的注解，才能通过反射获取。</p><p><strong>Target：</strong>用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p><p><strong>Documented：</strong>表示所修饰的注解在被javadoc解析时，保留下来。</p><p><strong>Inherited：</strong>被它修饰的 Annotation 将具有继承性。</p><ol start="5"><li><p>通过反射获取注解信息 —到反射内容时在讲解</p><ol start="6"><li>jdk 8 中注解的新特性：可重复注解、类型注解</li></ol><p>6.1 可重复注解：① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</p><pre><code>         ② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</code></pre><p>6.2 类型注解：<br>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。<br>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</p></li></ol><h2 id="java集合"><a href="#java集合" class="headerlink" title="java集合"></a>java集合</h2><p>一、集合框架的概述</p><p>1.集合、数组都是对多个数据进行存储（针对内存层面）操作的结构，简称 Java容器。</p><p>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中）</p><p>2.1 数组在存储多个数据方面的特点：</p><ul><li><p>一旦初始化以后，其长度就确定了。（长度确定）</p></li><li><p>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。（类型确定）</p><ul><li>比如：String[] arr;int[] arr1;Object[] arr2;</li></ul></li></ul><p>2.2 数组在存储多个数据方面的缺点：</p><ul><li>一旦初始化以后，其长度就不可修改。</li><li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</li><li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li><li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。 </li></ul><p>二、集合框架 （两个接口 Collection 和 Map，两个并列）</p><ul><li><p>Collection接口：单列集合，用来存储一个一个的对象</p><ul><li>List接口：存储有序的、可重复的数据。  –&gt;“动态”数组<ul><li>ArrayList、LinkedList、Vector （主要实现类）</li></ul></li><li>Set接口：存储无序的、不可重复的数据   –&gt;像高中讲的“集合”<ul><li>HashSet、LinkedHashSet、TreeSet</li></ul></li></ul></li><li><p>Map接口：双列集合，用来存储一对(key - value)一对的数据   –&gt;高中函数：y = f(x)，不同的key可以指向</p><p> 同一个value</p><ul><li>HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List接口框架</span><br><span class="line">|----Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="line">    |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组</span><br><span class="line">        |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</span><br><span class="line">        |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span><br><span class="line">        |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</span><br></pre></td></tr></table></figure><p><strong>面试题：ArrayList、LinkedList、Vector 三者的异同</strong></p><p>相同点：三个类都实现了List接口，存储数据的特点相同，存储有序的、可重复的数据。</p><p>不同点：见上面👆</p><p><strong>ArrayList的源码分析：</strong>这里分为jdk7和jdk8</p><p>jdk 7情况下：</p><ul><li>ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData</li><li>list.add(123);//elementData[0] = new Integer(123);</li><li>…</li><li>list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。</li><li>默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</li><li>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</li></ul><p>jdk 8中ArrayList的变化：</p><ul><li>ArrayList list = new ArrayList();//底层Object[] elementData初始化为{}.并没有创建长度为10的数组</li><li>list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</li><li>…</li><li>后续的添加和扩容操作与jdk 7 无异。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</span><br></pre></td></tr></table></figure><p><strong>LinkedList的源码分析：</strong></p><p>LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</p><ul><li>list.add(123);//将123封装到Node中，创建了Node对象。</li></ul><p><strong>Vector的源码分析：</strong>jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</p><ul><li>在扩容方面，默认扩容为原来的数组长度的2倍。（不重要）</li></ul><p>set接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set接口的框架：</span><br><span class="line">|----Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="line">     |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”</span><br><span class="line">          |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值</span><br><span class="line">          |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历，对于频繁的遍历操作，LinkedHashSet效率高于HashSet.</span><br><span class="line">          |----TreeSet：可以按照添加对象的指定属性，进行排序。</span><br></pre></td></tr></table></figure><p>Map的实现类的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|----Map:双列数据，存储key-value对的数据   ---类似于高中的函数：y &#x3D; f(x)</span><br><span class="line">     |----HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value</span><br><span class="line">          |----LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。</span><br><span class="line">               原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</span><br><span class="line">               对于频繁的遍历操作，此类执行效率高于HashMap。</span><br><span class="line">          |----TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序，底层使用红黑树。</span><br><span class="line">     |----Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value</span><br><span class="line">          |----Properties:常用来处理配置文件。key和value都是String类型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap的底层：数组+链表  （jdk7及之前）</span><br><span class="line">              数组+链表+红黑树 （jdk 8）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面试题：</span><br><span class="line">1. HashMap的底层实现原理？</span><br><span class="line">2. HashMap 和 Hashtable的异同？</span><br><span class="line">3. CurrentHashMap 与 Hashtable的异同？（暂时不学）</span><br></pre></td></tr></table></figure><p>Map结构的理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map中的key:无序的、不可重复的，使用Set存储所有的key  ---&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）</span><br><span class="line">Map中的value:无序的、可重复的，使用Collection存储所有的value ---&gt;value所在的类要重写equals()，</span><br><span class="line"></span><br><span class="line">一个键值对：key-value构成了一个Entry对象。</span><br><span class="line">Map中的entry:无序的、不可重复的，使用Set存储所有的entry</span><br></pre></td></tr></table></figure><p>三、HashMap的底层实现原理？以jdk7为例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashMap map &#x3D; new HashMap():</span><br><span class="line">在实例化以后，底层创建了长度是16的一维数组Entry[] 名字叫table。</span><br><span class="line">      ...然后可能已经执行过多次put...</span><br><span class="line">      map.put(key1,value1):</span><br><span class="line">      首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</span><br><span class="line">      如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1</span><br><span class="line">      如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：</span><br><span class="line">      如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2</span><br><span class="line">      如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</span><br><span class="line">      如果equals()返回false:此时key1-value1添加成功。----情况3</span><br><span class="line">      如果equals()返回true:使用value1替换value2。说明此时的put方法有修改的功能了。</span><br><span class="line"></span><br><span class="line">补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</span><br><span class="line"></span><br><span class="line">      在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jdk8 相较于jdk7在底层实现方面的不同：</span><br><span class="line">1. new HashMap():底层没有创建一个长度为16的数组</span><br><span class="line">2. jdk 8底层的数组是：Node[],而非jdk7里面的Entry[]</span><br><span class="line">3. 首次调用put()方法时，底层创建长度为16的数组</span><br><span class="line">4. jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</span><br><span class="line">  4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</span><br><span class="line">  4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</span><br><span class="line">    DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</span><br><span class="line">    DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</span><br><span class="line">    threshold：扩容的临界值，&#x3D;容量*填充因子：16 * 0.75 &#x3D;&gt; 12</span><br><span class="line">    TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</span><br><span class="line">    MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型的使用</p><p>1.jdk 5.0新增的特性</p><p>2.在集合中使用泛型：</p><p>总结：</p><p>① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。</p><p>② 在实例化集合类时，可以指明具体的泛型类型</p><p>③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</p><p>比如：add(E e)  —&gt;实例化以后：add(Integer e)</p><p>④ 注意点：<strong>泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</strong></p><p>⑤ 如果实例化时，没有指明泛型的类型。<strong>默认类型为java.lang.Object类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();<span class="comment">//jdk5新特性    </span></span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//jdk7新特性：类型推断</span></span><br></pre></td></tr></table></figure><p>ORM（对象关系映射），数据库中的一张表对应一个java类，体现的是万事万物皆对象。</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>泛型方法：在方法中出现了泛型结构，泛型参数与类的泛型参数没有任何关系，换句话说，泛型方法所属的类是不是泛型都无所谓。</p><p>泛型方法可以声明为是静态的，只要在调用的时候指明是什么类型的就可以了。</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>节点流：直接作用在文件上</p><p>处理流：是在节点流的基础上进行包裹的流。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210906192257236.png" alt="image-20210906192257236"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</span><br><span class="line">2. 对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,...)，使用字节流处理</span><br></pre></td></tr></table></figure><p>但是：如果是文本文件，只是想复制一下，使用字节流也行，但是不要读出来，但是即使是复制，去处理非文本文件，也不能使用字符流。</p><p>缓冲流：是处理流的一种，主要是为了提高速度。</p><p>对象流：不仅可以存储基本数据类型数据，还可以把对象写入到数据源中，也可以把对象从数据源中还原回来</p><p><strong>序列化：</strong>用ObjectOutputStream类保存基本类型数据或对象的机制</p><p><strong>反序列化：</strong>用ObjectInputStream类读取基本类型数据或对象的机制</p><p>举例：自己写的一个类Person</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person需要满足如下的要求，方可序列化</span><br><span class="line">1.需要实现接口：Serializable</span><br><span class="line">2.当前类提供一个全局常量：serialVersionUID</span><br><span class="line">3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）</span><br></pre></td></tr></table></figure><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h2 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h2><p>本节主要的是<strong>获取Class实例，创建运行时类的对象、调用运行时类的结构</strong></p><h3 id="1-Java反射机制概述"><a href="#1-Java反射机制概述" class="headerlink" title="1. Java反射机制概述"></a>1. Java反射机制概述</h3><h4 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h4><p>​        反射是被视为<strong>动态语言</strong>的关键，是因为 Java 文件要进行两个阶段的“洗礼”，第一个编译阶段是生成  .java 文件编译为 .class 文件，此时还不能确定某一类的对象，只有在运行时才能确定是哪个。体现了动态性。反射可以获取对象的任何信息。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201124193827032.png" alt="image-20201124193827032"></p><p>反射的意思就是 通过类的对象，能了解到类的信息。就是反射。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201127142743534.png" alt="image-20201127142743534"></p><h4 id="动态语言-与-静态语言"><a href="#动态语言-与-静态语言" class="headerlink" title="动态语言 与 静态语言"></a>动态语言 与 静态语言</h4><p><strong>动态语言</strong>：在运行时可以改变其结构的语言，例如新的函数、对象、甚至代码可以 被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是<strong>在运行时代码可以根据某些条件改变自身结构。</strong> </p><p><strong>静态语言</strong>：运行时结构不可改变，如Java、C、 C++。</p><p>虽然Java不是动态语言，但是Java可以成为“<strong>准动态语言</strong>”，也就是说它有动态性，可以利用反射的机制来体现。</p><h4 id="Java反射机制研究与应用"><a href="#Java反射机制研究与应用" class="headerlink" title="Java反射机制研究与应用"></a>Java反射机制研究与应用</h4><p>反射可以干什么？</p><ul><li>在运行时判断任意一个对象所属的类 </li><li>在运行时构造任意一个类的对象 </li><li>在运行时判断任意一个类所具有的成员变量和方法 </li><li>在运行时获取泛型信息 </li><li>在运行时调用任意一个对象的成员变量和方法 </li><li>在运行时处理注解 </li><li>生成动态代理</li></ul><p>总之一句话：就是可以获取类的任何信息。</p><p>关于反射相关的API</p><ul><li>java.lang.Class:代表一个类，（一个类也是一个类）</li><li>java.lang.reflect.Method:代表类的方法</li><li>java.lang.reflect.Field:代表类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造器</li></ul><h3 id="2-理解Class类并获取Class实例"><a href="#2-理解Class类并获取Class实例" class="headerlink" title="2. 理解Class类并获取Class实例"></a>2. 理解Class类并获取Class实例</h3><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><p>Class是用来描述类的类，比如每个类都有属性，都有方法等等，所以又抽象出一个类。Class类是反射的源头。</p><img src="https://gitee.com/dlutlgy/window_typora/raw/master/images/image-20201127144332468.png" alt="image-20201127144332468" style="zoom: 80%;" /><p>因为 Object 类是所有类的父类，要想得到每个类的信息，getClass()方法就声明在了 Object 类中。</p><p>​        对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构的有关信息。</p><ul><li>Class本身也是一个类 </li><li>Class 对象只能由系统建立对象 </li><li>一个加载的类在 JVM 中只会有一个Class实例 </li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件 </li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成 </li><li>通过Class可以完整地得到一个类中的所有被加载的结构 </li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的 Class对</li></ul><h4 id="获取Class类的实例-（四种方法）"><a href="#获取Class类的实例-（四种方法）" class="headerlink" title="获取Class类的实例 （四种方法）"></a>获取Class类的实例 （四种方法）</h4><p>获取Class类的实例的四种方法，其中前三种方法比较重要，经常用到，最后一种不需要掌握。</p><p> 方式一：调用运行时类的属性：.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz1 = Person.class;</span><br><span class="line">System.out.println(clazz1);</span><br></pre></td></tr></table></figure><p>方式二：通过运行时类的对象,调用getClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(); <span class="comment">// 此时Person类为运行时类</span></span><br><span class="line">Class clazz2 = p1.getClass();<span class="comment">//.getclass 是在object里面造的</span></span><br><span class="line">System.out.println(clazz2);</span><br></pre></td></tr></table></figure><p>方式三：调用Class的 静态方法 ：forName(String classPath)。这里必须写 类的全类名，因为同一个module下可能有多个person（使用的比较多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz3 = Class.forName(<span class="string">&quot;com.atguigu.java.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz3+<span class="string">&quot;打印3&quot;</span>);</span><br></pre></td></tr></table></figure><p>方式四：使用类的加载器：ClassLoader  (了解)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = ReflectionTest.class.getClassLoader();</span><br><span class="line">Class clazz4 = classLoader.loadClass(<span class="string">&quot;com.atguigu.java.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz4);</span><br></pre></td></tr></table></figure><h3 id="3-类的加载-与ClassLoader的理解（了解）"><a href="#3-类的加载-与ClassLoader的理解（了解）" class="headerlink" title="3. 类的加载 与ClassLoader的理解（了解）"></a>3. 类的加载 与ClassLoader的理解（了解）</h3><h4 id="类的加载过程-（了解）"><a href="#类的加载过程-（了解）" class="headerlink" title="类的加载过程 （了解）"></a>类的加载过程 （了解）</h4><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过 如下三个步骤来对该类进行初始化。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201127152144541.png" alt="image-20201127152144541"></p><ul><li>加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时 数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问 入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的 过程需要类加载器参与。</li><li>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。<ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题 </li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存 都将在方法区中进行分配。 </li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul></li><li>初始化<ul><li>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中 所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类 的初始化。</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</li></ul></li></ul><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201125121333135.png" alt="image-20201125121333135"></p><h4 id="类加载器的作用："><a href="#类加载器的作用：" class="headerlink" title="类加载器的作用："></a>类加载器的作用：</h4><ul><li>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。 </li><li>类缓存：标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器 中，它将维持加载（缓存）一段时间。不过 JVM 垃圾回收机制可以回收这些Class对象。</li></ul><h4 id="类的加载器的种类："><a href="#类的加载器的种类：" class="headerlink" title="类的加载器的种类："></a>类的加载器的种类：</h4><p>引导类加载器、扩展类加载器、系统类加载器</p><ul><li>引导类加载器：是C、C++编写的，是JVM自带的加载器，<strong>主要负责Java平台核心库</strong>，用来加载核心类库。</li><li>扩展类加载器：负责jre/lib/ext目录下的jar包或指定目录下的jar包</li><li>系统类加载器：自己定义的类都是有系统类加载器进行加载</li></ul><h3 id="4-创建运行时类对象（重点）"><a href="#4-创建运行时类对象（重点）" class="headerlink" title="4. 创建运行时类对象（重点）"></a>4. 创建运行时类对象（重点）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.根据全类名获取对应的Class对象 </span></span><br><span class="line">String name = <span class="string">&quot;atguigu.java.Person&quot;</span>; </span><br><span class="line">Class clazz = <span class="keyword">null</span>; </span><br><span class="line">clazz = Class.forName(name); </span><br><span class="line"><span class="comment">//2.调用指定参数结构的构造器，生成Constructor的实例 </span></span><br><span class="line">Constructor con = clazz.getConstructor(String.class,Integer.class); </span><br><span class="line"><span class="comment">//3.通过Constructor的实例创建对应类的对象，并初始化类属性 </span></span><br><span class="line">Person p2 = (Person) con.newInstance(<span class="string">&quot;Peter&quot;</span>,<span class="number">20</span>); </span><br><span class="line">System.out.println(p2);</span><br></pre></td></tr></table></figure><h3 id="5-获取运行时类的完整结构"><a href="#5-获取运行时类的完整结构" class="headerlink" title="5. 获取运行时类的完整结构"></a>5. 获取运行时类的完整结构</h3><p>具体内容在代码中体现。</p><h3 id="6-调用运行时类的指定结构"><a href="#6-调用运行时类的指定结构" class="headerlink" title="6. 调用运行时类的指定结构"></a>6. 调用运行时类的指定结构</h3><p>主要是调用运行时类中指定的结构：属性、方法、构造器。</p><p>具体内容在代码中体现。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="2021/02/18/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/18/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="2021/01/31/JavaWeb/"/>
      <url>2021/01/31/JavaWeb/</url>
      
        <content type="html"><![CDATA[<center>珍惜时间</center><a id="more"></a><h1 id="Servlet技术"><a href="#Servlet技术" class="headerlink" title="Servlet技术"></a>Servlet技术</h1><h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1.Servlet"></a>1.Servlet</h2><h3 id="1-什么是Servlet"><a href="#1-什么是Servlet" class="headerlink" title="1. 什么是Servlet"></a>1. 什么是Servlet</h3><ol><li>Servlet是JavaEE规范之一，规范就是接口</li><li>Servlet就是JavaWeb三大组件之一，三大组件就是：Servlet程序、Filter监听器、Listener监视器。</li><li>Servlet是运行中服务器上的java小程序，可以接收客户端发送过来的请求，并响应数据给客户端。</li></ol><h3 id="2-手动实现Servlet程序"><a href="#2-手动实现Servlet程序" class="headerlink" title="2. 手动实现Servlet程序"></a>2. 手动实现Servlet程序</h3><ol><li>编写一个类实现Servlet接口</li><li>实现service，处理请求，并响应数据。</li><li>到web.xml文件中去配置servlet访问地址</li></ol><h3 id="3-URL地址到Servlet程序的访问过程"><a href="#3-URL地址到Servlet程序的访问过程" class="headerlink" title="3. URL地址到Servlet程序的访问过程"></a>3. URL地址到Servlet程序的访问过程</h3><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210131110407795.png" alt="image-20210131110407795"></p><h3 id="4-Servlet的生命周期"><a href="#4-Servlet的生命周期" class="headerlink" title="4. Servlet的生命周期"></a>4. Servlet的生命周期</h3><ol><li>执行Servlet构造器方法</li><li>执行init方法（第一二步是在第一次访问的时候创建Servlet程序会调用）</li><li>执行service方法（每次访问都会调用）</li><li>执行destory方法（停止的时候才会执行）</li></ol><h3 id="5-GET请求和POST请求的分发处理"><a href="#5-GET请求和POST请求的分发处理" class="headerlink" title="5. GET请求和POST请求的分发处理"></a>5. GET请求和POST请求的分发处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;3 service === Hello Servlet 被访问了&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 类型转换（因为它有getMethod()方法,ServletRequest没有这样的方法，HttpServletRequest是ServletRequest的子类）</span></span><br><span class="line">       HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">       <span class="comment">// 获取请求的方式</span></span><br><span class="line">       String method = httpServletRequest.getMethod();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">           doGet();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">          doPost();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 做get请求的操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;get请求&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;get请求&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 做post请求的操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;post请求&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;post请求&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-通过继承HttpServlet实现Servlet程序"><a href="#6-通过继承HttpServlet实现Servlet程序" class="headerlink" title="6. 通过继承HttpServlet实现Servlet程序"></a>6. 通过继承HttpServlet实现Servlet程序</h3><p>一般在实际项目开发中，都是使用继承 HttpServlet 类的方式实现 Serlvet 程序</p><ol><li>编写一个类去继承 Httpservlet 类</li><li>根据业务需要重写 doGet 或者doPost 方法</li><li>到web.xml文件中配置 Servlet 程序的访问地址</li></ol><h3 id="7-使用IDEA-创建-Servlet-程序"><a href="#7-使用IDEA-创建-Servlet-程序" class="headerlink" title="7. 使用IDEA 创建 Servlet 程序"></a>7. 使用IDEA 创建 Servlet 程序</h3><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210131112916266.png" alt="image-20210131112916266" style="zoom:50%;" /><p>而且还会帮你在web.xml文件中配置部分<servlet></p><h3 id="8-Servlet类的继承体系"><a href="#8-Servlet类的继承体系" class="headerlink" title="8. Servlet类的继承体系"></a>8. Servlet类的继承体系</h3><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210131114658790.png" alt="image-20210131114658790" style="zoom:50%;" /><h2 id="2-ServletConfig-类"><a href="#2-ServletConfig-类" class="headerlink" title="2. ServletConfig 类"></a>2. ServletConfig 类</h2><p>ServletConfig是Servlet程序的配置信息类，Servlet 程序和 ServletConfig 对象都是由 Tomcat对象负责创建，我们负责使用。</p><p>Servlet程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的ServletConfig 对象。ServletConfig就封装了<strong>初始化配置的信息</strong>。</p><p>Servlet 里面的 ServletConfig对象是不能获取其他Servlet 的配置信息的。</p><h3 id="1-ServletConfig-类的三大作用"><a href="#1-ServletConfig-类的三大作用" class="headerlink" title="1.ServletConfig 类的三大作用"></a>1.ServletConfig 类的三大作用</h3><ul><li>获取Servlet程序的别名 servlet-name的值</li><li>获取初始化参数 init-param</li><li>获取 ServletContext 对象</li></ul><h2 id="3-ServletContext类"><a href="#3-ServletContext类" class="headerlink" title="3. ServletContext类"></a>3. ServletContext类</h2><h3 id="1-什么是ServletContext"><a href="#1-什么是ServletContext" class="headerlink" title="1. 什么是ServletContext"></a>1. 什么是ServletContext</h3><ul><li><p>ServletContext 是一个接口，表示一个servlet 上下文对象。</p></li><li><p>一个web工程，只会有一个 ServletContext对象实例。</p></li><li><p>ServletContext是一个域对象。</p><p>域对象是可以像Map一样存取数据的对象，叫做域对象。域对象指的是存取数据的<strong>操作范围</strong>，也就是整个web工程。</p></li><li><p>ServletContext是在web工程部署的启动的时候创建，在web工程停止的时候销毁。</p></li></ul><table><thead><tr><th></th><th>存数据</th><th>取数据</th><th>删除数据</th></tr></thead><tbody><tr><td>Map</td><td>put</td><td>get</td><td>remove()</td></tr><tr><td>域对象</td><td>setAttribute()</td><td>getAttribute()</td><td>removeAttribute()</td></tr></tbody></table><h3 id="2-ServletContext类有什么作用？"><a href="#2-ServletContext类有什么作用？" class="headerlink" title="2. ServletContext类有什么作用？"></a>2. ServletContext类有什么作用？</h3><ol><li>获取web.xml文件中配置的上下文参数</li><li>获取当前的工程路径</li><li>获取工程部署后在服务器硬盘上的绝对路径</li><li>像Map一样存取数据</li></ol><h2 id="4-Http协议"><a href="#4-Http协议" class="headerlink" title="4. Http协议"></a>4. Http协议</h2><h3 id="1-什么是Http协议"><a href="#1-什么是Http协议" class="headerlink" title="1.什么是Http协议"></a>1.什么是Http协议</h3><p>协议是指双方或者多方，相互约定好，大家都需要遵守的规则，叫做协议。</p><p>Http协议也就是客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫做Http协议，Http协议中的数据又称作报文。</p><h3 id="2-请求的Http协议格式"><a href="#2-请求的Http协议格式" class="headerlink" title="2.请求的Http协议格式"></a>2.请求的Http协议格式</h3><p>客户端给服务器发送的数据叫做请求。</p><p>服务器给客户端的回传数据叫做响应。</p><ol><li>Get请求</li></ol><ul><li><p>请求行</p><ul><li>请求的方式                      GET</li><li>请求的资源路径【+?+请求参数】</li><li>请求协议的版本号。     Http/1.1</li></ul></li><li><p>请求头</p><p>Key:value 组成 ，不同的键值对表示不同的含义</p></li></ul><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210131153750111.png" alt="image-20210131153750111"></p><ol start="2"><li>Post请求</li></ol><ul><li><p>请求行</p><ul><li>请求的方式                      Post</li><li>请求的资源路径【+?+请求参数】</li><li>请求协议的版本号。     Http/1.1</li></ul></li><li><p>请求头</p><p>Key:value 组成 ，不同的键值对表示不同的含义</p></li><li><p>请求体，就是发送给服务器的数据</p></li></ul><ol start="3"><li>常用请求头的说明</li></ol><p>Accept：表示客户端可以接收的数据类型</p><p>Accept-Language：表示客户端可以接受的语言类型</p><p>User-Agent：表示客户端浏览器的信息</p><p>Host： 表示请求的服务器ip和端口号</p><ol start="4"><li>Get请求有哪些？Post请求有哪些？</li></ol><p>GET请求：</p><ul><li>form标签 method=get</li><li>a标签</li><li>link标签引入css</li><li>Script标签引入js文件</li><li>img标签引入图片</li><li>iframe引入html页面</li><li>在浏览器地址栏中输入地址后会车</li></ul><p>POST请求：</p><ul><li>form标签 form=post</li></ul><h3 id="3-响应的Http协议格式"><a href="#3-响应的Http协议格式" class="headerlink" title="3.响应的Http协议格式"></a>3.响应的Http协议格式</h3><ol><li><p>响应行</p><ol><li>响应的协议和版本号（HTTP/1.1）</li><li>响应状态吗（200、302、404、500）</li><li>响应状态描述符</li></ol></li><li><p>响应头</p><ol><li>Key:value 不同的响应头，有不同的含义</li></ol></li><li><p>响应体（就是回传给客户端数据）</p></li></ol><h2 id="5-HttpServletRequest类"><a href="#5-HttpServletRequest类" class="headerlink" title="5. HttpServletRequest类"></a>5. HttpServletRequest类</h2><h3 id="1-httpServletRequest类有什么作用？"><a href="#1-httpServletRequest类有什么作用？" class="headerlink" title="1.httpServletRequest类有什么作用？"></a>1.httpServletRequest类有什么作用？</h3><h1 id="EL表达式-amp-JSTL"><a href="#EL表达式-amp-JSTL" class="headerlink" title="EL表达式 &amp; JSTL"></a>EL表达式 &amp; JSTL</h1><h2 id="1-EL表达式"><a href="#1-EL表达式" class="headerlink" title="1. EL表达式"></a>1. EL表达式</h2><h3 id="1-什么是EL表达式"><a href="#1-什么是EL表达式" class="headerlink" title="1.什么是EL表达式"></a>1.什么是EL表达式</h3><p>EL表达式说的全称：Expression Language 是表达式语言</p><p>EL表达式作用：EL表达式主要是替代jsp页面中的表达式脚本在jsp页面进行数据的输出，</p><p>为什么用EL表达式来代替jsp页面表达式脚本？因为比jsp脚步简洁。</p><p>格式： ${}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>(&quot;<span class="attr">key</span>&quot;,&quot;值&quot;);</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    表达式脚本输出key的值是：<span class="tag">&lt;<span class="name">%=request.getAttribute(&quot;key1&quot;)==null?&quot;&quot;:request.getAttribute(&quot;key1&quot;)%</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    EL表达式输出key的值是：$&#123;key&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-EL表达式搜索域数据的顺序"><a href="#2-EL表达式搜索域数据的顺序" class="headerlink" title="2. EL表达式搜索域数据的顺序"></a>2. EL表达式搜索域数据的顺序</h3><p>EL表达式主要是在jsp页面中输出数据，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //往四个域中都保存了相同的<span class="attr">key</span>的数据。</span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>(&quot;<span class="attr">key</span>&quot;, &quot;<span class="attr">request</span>&quot;);</span></span><br><span class="line"><span class="tag">        <span class="attr">session.setAttribute</span>(&quot;<span class="attr">key</span>&quot;, &quot;<span class="attr">session</span>&quot;);</span></span><br><span class="line"><span class="tag">        <span class="attr">application.setAttribute</span>(&quot;<span class="attr">key</span>&quot;, &quot;<span class="attr">application</span>&quot;);</span></span><br><span class="line"><span class="tag">        <span class="attr">pageContext.setAttribute</span>(&quot;<span class="attr">key</span>&quot;, &quot;<span class="attr">pageContext</span>&quot;);</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    $&#123; key &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">//输出pageContext，若是注掉pageContext一行，输出request，注掉request，显示session，关闭浏览器，注掉session，显示application</span><br></pre></td></tr></table></figure><p>当四个域中都有相同的数据时，EL表达式会按照四个域中从小到大的顺序去进行搜索，找到就输出。</p><p>域范围 : pageContext&lt;request&lt;session&lt;application</p><h3 id="3-EL表达式输出Bean的普通属性，数组属性，List集合属性，Map集合属性"><a href="#3-EL表达式输出Bean的普通属性，数组属性，List集合属性，Map集合属性" class="headerlink" title="3. EL表达式输出Bean的普通属性，数组属性，List集合属性，Map集合属性"></a>3. EL表达式输出Bean的普通属性，数组属性，List集合属性，Map集合属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Person</span> <span class="attr">person</span> = <span class="string">new</span> <span class="attr">Person</span>();</span></span><br><span class="line"><span class="tag">        <span class="attr">person.setName</span>(&quot;国哥好帅！&quot;);</span></span><br><span class="line"><span class="tag">        <span class="attr">person.setPhones</span>(<span class="attr">new</span> <span class="attr">String</span>[]&#123;&quot;<span class="attr">18610541354</span>&quot;,&quot;<span class="attr">18688886666</span>&quot;,&quot;<span class="attr">18699998888</span>&quot;&#125;);</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">        List&lt;String&gt; cities = new ArrayList&lt;String&gt;();</span><br><span class="line">        cities.add(&quot;北京&quot;);</span><br><span class="line">        cities.add(&quot;上海&quot;);</span><br><span class="line">        cities.add(&quot;深圳&quot;);</span><br><span class="line">        person.setCities(cities);</span><br><span class="line"></span><br><span class="line">        Map<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span>map = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        map.put(&quot;key1&quot;,&quot;value1&quot;);</span><br><span class="line">        map.put(&quot;key2&quot;,&quot;value2&quot;);</span><br><span class="line">        map.put(&quot;key3&quot;,&quot;value3&quot;);</span><br><span class="line">        person.setMap(map);</span><br><span class="line"></span><br><span class="line">        pageContext.setAttribute(&quot;p&quot;, person);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    输出Person：$&#123; p &#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    输出Person的name属性：$&#123;p.name&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    输出Person的pnones数组属性值：$&#123;p.phones[2]&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    输出Person的cities集合中的元素值：$&#123;p.cities&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    输出Person的List集合中个别元素值：$&#123;p.cities[2]&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    输出Person的Map集合: $&#123;p.map&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    输出Person的Map集合中某个key的值: $&#123;p.map.key3&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    输出Person的age属性：$&#123;p.age&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-EL表达式–运算"><a href="#4-EL表达式–运算" class="headerlink" title="4.  EL表达式–运算"></a>4.  EL表达式–运算</h3><h5 id="1-关系运算、逻辑运算、算术运算"><a href="#1-关系运算、逻辑运算、算术运算" class="headerlink" title="1.关系运算、逻辑运算、算术运算"></a>1.关系运算、逻辑运算、算术运算</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123; 12 == 12 &#125; 或 $&#123; 12 eq 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 12 != 12 &#125; 或 $&#123; 12 ne 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 12 &lt; 12 &#125; 或 $&#123; 12 lt 12 &#125; &lt;br&gt;</span><br><span class="line">    $&#123; 12 &gt; 12 &#125; 或 $&#123; 12 gt 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 12 &lt;= 12 &#125; 或 $&#123; 12 le 12 &#125; &lt;br&gt;</span><br><span class="line">    $&#123; 12 &gt;= 12 &#125; 或 $&#123; 12 ge 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    $&#123; 12 == 12 &amp;&amp; 12 &gt; 11 &#125; 或 $&#123; 12 == 12 and 12 &gt; 11 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 12 == 12 || 12 &gt; 11 &#125; 或 $&#123; 12 == 12 or 12 &gt; 11 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; ! true &#125; 或 $&#123; not true &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    $&#123; 12 + 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 12 - 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 12 * 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 18 / 12 &#125; 或 $&#123; 18 div 12 &#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    $&#123; 18 % 12 &#125; 或 $&#123; 18 mod 12 &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-empty运算"><a href="#2-empty运算" class="headerlink" title="2. empty运算"></a>2. empty运算</h5><p>可以判断一个数据是否为空，如果空，为输出true，不为空，输出false。</p><p>以下几种情况为空：</p><ul><li>值为 null 的时候</li><li>空串</li><li>Object类型数组，长度为0</li><li>list集合，元素个数0</li><li>map集合，元素个数0</li></ul><h5 id="3-三元运算"><a href="#3-三元运算" class="headerlink" title="3. 三元运算"></a>3. 三元运算</h5><p>表达式1？表达式2:表达式3</p><h5 id="4-“-”点运算-和-“-”-中括号运算"><a href="#4-“-”点运算-和-“-”-中括号运算" class="headerlink" title="4. “.”点运算 和 “[]” 中括号运算"></a>4. “.”点运算 和 “[]” 中括号运算</h5><p>“.”点运算可以输出Bean对象中某个属性的值</p><p>“[]” 中括号运算，可以输出有序集合中某个元素的值，</p><p>并且[]中括号运算，可以输出map集合里含有特殊字符的key的值</p><h3 id="5-EL表达式中11个隐含对象"><a href="#5-EL表达式中11个隐含对象" class="headerlink" title="5. EL表达式中11个隐含对象"></a>5. EL表达式中11个隐含对象</h3><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210201150612549.png" alt="image-20210201150612549" style="zoom: 67%;" /><h2 id="2-JSTL表达式"><a href="#2-JSTL表达式" class="headerlink" title="2.JSTL表达式"></a>2.JSTL表达式</h2><h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><p>文件的上传和下载功能非常常见，经常使用，扣扣头像，邮箱中附件的上传和下载功能。</p><h2 id="1-文件的上传介绍"><a href="#1-文件的上传介绍" class="headerlink" title="1. 文件的上传介绍"></a>1. 文件的上传介绍</h2><ol><li>要有一个form标签，method=post请求</li><li>form标签的enctype属性，值必须是multipart/form-data值。</li><li>在form标签中使用input type = file 添加上传的文件</li><li>编写服务器代码（这里使用servlet进行接收）接收，处理上传的数据。</li></ol><p>enctype=multipart/form-data表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼接，然后以二进制流的方式进行发送，发送给服务器。</p><h2 id="2-文件上传时协议内容"><a href="#2-文件上传时协议内容" class="headerlink" title="2. 文件上传时协议内容"></a>2. 文件上传时协议内容</h2><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210202150927155.png" alt="image-20210202150927155"></p><h2 id="3-commons-fileload-jar-常用API介绍说明"><a href="#3-commons-fileload-jar-常用API介绍说明" class="headerlink" title="3. commons-fileload.jar 常用API介绍说明"></a>3. commons-fileload.jar 常用API介绍说明</h2><p>commons-fileload.jar 需要commons-io.jar这个包，所以导入这两个包。</p><p>第一步：导入这两个包</p><p>commons-fileload.jar和commons-io.jar中常用的类有哪些？</p><p><strong>ServletFileUpload 类</strong>：用于解析上传的数据。</p><p><strong>FileItem类</strong> ：表示没一个表单项，有普通的表单项，还是上传的类型</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210202152417085.png" alt="image-20210202152417085"></p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210202152949156.png" alt="image-20210202152949156" style="zoom:67%;" /><h2 id="4-文件的下载"><a href="#4-文件的下载" class="headerlink" title="4. 文件的下载"></a>4. 文件的下载</h2><p>见代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//       1. 获取要下载的文件名</span></span><br><span class="line">        String download = <span class="string">&quot;1.jpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 读取要下载的文件内容(通过ServletContext对象可以获取)</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      获取要下载的文件类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(<span class="string">&quot;/file/1.jpeg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载的文件类型:&quot;</span>+mimeType);</span><br><span class="line"><span class="comment">//        4. 在回传前，通过响应头告诉客户端返回的数据类型</span></span><br><span class="line">        resp.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. 还要告诉客户端收到的数据是用于下载使用（还是使用响应头）</span></span><br><span class="line"><span class="comment">//        Content-Disposition响应头，表示收到的数据怎么处理</span></span><br><span class="line"><span class="comment">//        attachment表示附件，filename表示指定的文件名（这里的指定的文件名不一定要和上面的文件名一致，可以自己设置）</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=1.jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        第一个斜杠表示工程路径</span></span><br><span class="line">        InputStream resourceAsStream = servletContext.getResourceAsStream(<span class="string">&quot;/file/1.jpeg&quot;</span>);</span><br><span class="line"><span class="comment">//         获取响应的输出流</span></span><br><span class="line">        OutputStream outputStream = resp.getOutputStream();</span><br><span class="line"><span class="comment">//        3. 把下载的文件回传给客户端</span></span><br><span class="line">        IOUtils.copy(resourceAsStream,outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="1-什么是Cookie"><a href="#1-什么是Cookie" class="headerlink" title="1.什么是Cookie"></a>1.什么是Cookie</h2><ol><li>Cookie翻译过来是饼干</li><li>Cookie是服务器通知客户端保存键值对的一种技术</li><li>客户端有了 Cookie 以后，每次请求都发送给服务器。</li><li>每个Cookie 端大小不能超过 4kb</li></ol><h2 id="2-如何创建Cookie？"><a href="#2-如何创建Cookie？" class="headerlink" title="2. 如何创建Cookie？"></a>2. 如何创建Cookie？</h2><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210203141258607.png" alt="image-20210203141258607"></p><h2 id="3-服务器如何获取Cookie"><a href="#3-服务器如何获取Cookie" class="headerlink" title="3. 服务器如何获取Cookie"></a>3. 服务器如何获取Cookie</h2><p>Cookie是保存在客户端的，但是客户端每次请求都会发给服务器。那么服务器是如何获取Cookie？只需要一行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getCookies():Cookie[]</span><br></pre></td></tr></table></figure><h2 id="4-Cookie值的修改"><a href="#4-Cookie值的修改" class="headerlink" title="4. Cookie值的修改"></a>4. Cookie值的修改</h2><p>方案一：</p><ol><li>先创建一个要修改的同名的Cookie对象</li><li>在构造器，同时赋予新的Cookie值</li><li>调用response.addCookie(Cookie);</li></ol><p>方案二：</p><ol><li>先查找到需要修改的Cookie对象</li><li>调用setValue()方法赋于新的Cookie值。</li><li>调用response.addCookie()通知客户端保存修改</li></ol><h2 id="5-浏览器查看Cookie"><a href="#5-浏览器查看Cookie" class="headerlink" title="5. 浏览器查看Cookie"></a>5. 浏览器查看Cookie</h2><h3 id="1-谷歌浏览器查看Cookie"><a href="#1-谷歌浏览器查看Cookie" class="headerlink" title="1.谷歌浏览器查看Cookie"></a>1.谷歌浏览器查看Cookie</h3><p>F12 找到Application，然后找到Cookies，就可以看到Cookie的信息。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210203144148799.png" alt="image-20210203144148799"></p><h3 id="2-火狐浏览器查看Cookie"><a href="#2-火狐浏览器查看Cookie" class="headerlink" title="2.火狐浏览器查看Cookie"></a>2.火狐浏览器查看Cookie</h3><p>F12 找到存储，找到Cookie。然后操作。</p><h2 id="6-Cookie的生命控制"><a href="#6-Cookie的生命控制" class="headerlink" title="6. Cookie的生命控制"></a>6. Cookie的生命控制</h2><p>Cookie的生命控制指的是如何管理Cookie 什么时候被销毁，主要是被setMaxAge()方法操控。</p><p>正数：表示在指定的秒数后过期</p><p>负数：表示浏览器一关，Cookie就会被删除</p><p>0: 表示马上删除Cookie</p><h2 id="7-Cookie有效路径Path的设置"><a href="#7-Cookie有效路径Path的设置" class="headerlink" title="7.Cookie有效路径Path的设置"></a>7.Cookie有效路径Path的设置</h2><p>Cookie的path属性可以有效的过滤那些Cookie可以发送给服务器，那些不发。path属性是通过请求的地址来进行有效的过滤。</p><p>例子：</p><p>CookieA    path=/工程路径</p><p>CookieB    path=/工程路径/abc</p><ol><li><a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a></li></ol><p>CookieA    发送</p><p>CookieB    不发送</p><ol start="2"><li><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a></li></ol><p>CookieA    发送</p><p>CookieB    发送</p><h2 id="8-Cookie练习–免输入用户名密码登录"><a href="#8-Cookie练习–免输入用户名密码登录" class="headerlink" title="8. Cookie练习–免输入用户名密码登录"></a>8. Cookie练习–免输入用户名密码登录</h2><p>登录细节：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210205111540262.png" alt="image-20210205111540262"></p><h1 id="Session-会话"><a href="#Session-会话" class="headerlink" title="Session 会话"></a>Session 会话</h1><h2 id="1-什么是Session会话"><a href="#1-什么是Session会话" class="headerlink" title="1. 什么是Session会话"></a>1. 什么是Session会话</h2><ol><li>Session是一个接口（HttpSession） </li><li>Session就是会话，它是用来维护一个客户端和服务器之间关联的一种技术。</li><li>每个客户端都有自己的一个Session会话</li><li>Session会话中，我们经常有一个来保存用户登录之后的信息。</li></ol><p>cookie是保存在客户端，而session是保存在服务器端。</p><h2 id="2-如何创建Session-和获取（id号，是否为新）"><a href="#2-如何创建Session-和获取（id号，是否为新）" class="headerlink" title="2. 如何创建Session 和获取（id号，是否为新）"></a>2. 如何创建Session 和获取（id号，是否为新）</h2><p>通过request.getsession()，第一次调用是创建，之后调用都是获取前面创建好的Session会话对象。</p><p>isNew()，判断到底是不是新创建的。</p><p>每个会话都有一个身份号码，都有一个ID值，且唯一。</p><p>getId() 得到Session会话的id值</p><h2 id="3-Session-域数据的存取"><a href="#3-Session-域数据的存取" class="headerlink" title="3. Session 域数据的存取"></a>3. Session 域数据的存取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       req.getSession().setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">       resp.getWriter().write(<span class="string">&quot;已经往Session中保存了数据&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">getAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       Object attribute = req.getSession().getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">       resp.getWriter().write(<span class="string">&quot;从Session中获取出key1的数据是：&quot;</span> + attribute);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-Session-生命周期控制"><a href="#4-Session-生命周期控制" class="headerlink" title="4. Session 生命周期控制"></a>4. Session 生命周期控制</h2><p> public void setMaxInactiveInterval(int interval); 设置Session的超时时间，超过指定的时长，Seesion就会被销毁。值为正数的时候，设置为Session的超时时长，负数是永不超时（一般不用）。</p><p> public void getMaxInactiveInterval(int interval); 获取Session的超时时间，默认30分钟(1800秒),因为在tomcat的xml文件中配置了30分钟。也可以进行修改。</p><p>如果你希望你的web工程，默认的session的超时时长为其他时长，你可以在你的web.xml配置文件中做以上相同的配置，就可以修改tomcat里配置文件中的默认时长。</p><p>如果你想只修改个别的Session的超时时长，就可以使用上面的API，setMaxInactiveInterval(int interval)来进行单独的设置。</p><h2 id="5-浏览器和Session之间的技术内幕"><a href="#5-浏览器和Session之间的技术内幕" class="headerlink" title="5. 浏览器和Session之间的技术内幕"></a>5. 浏览器和Session之间的技术内幕</h2><p>Session技术，其实是基于Cookie技术实现的。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210205173453678.png" alt="image-20210205173453678"></p><h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><h2 id="1-什么是过滤器及过滤器的应用场景"><a href="#1-什么是过滤器及过滤器的应用场景" class="headerlink" title="1. 什么是过滤器及过滤器的应用场景"></a>1. 什么是过滤器及过滤器的应用场景</h2><ol><li>Filter 过滤器它是 JavaWeb 的三大组件之一。三大组件分别是:Servlet 程序、Listener 监听器、Filter 过滤器</li><li>Filter是javaweb的规范，也就是接口。</li><li>Filter过滤器它的作用是：<strong>拦截请求</strong>，过滤响应。</li></ol><p>拦截请求的常见的应用场景有：</p><ol><li>权限检查</li><li>日记操作</li><li>事务管理</li><li>……</li></ol><h2 id="2-Filter-体验一番"><a href="#2-Filter-体验一番" class="headerlink" title="2. Filter 体验一番"></a>2. Filter 体验一番</h2><p>要求：在你的web工程下，有一个admin，这个admin目录下的所有资源必须是用户登录以后才可以进行访问。比如：html文件、jpg文件、jsp文件等。</p><p>思考:根据之前我们学过内容。我们知道，用户登录之后都会把用户登录的信息保存到 Session 域中。所以要检查用户是否</p><p>登录，可以判断 Session 中否包含有用户登录的信息即可!!!</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210224120934086.png" alt="image-20210224120934086"></p><p>Filter 的工作流程图:</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210222175830683.png" alt="image-20210222175830683"></p><p>Filter的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123; </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* doFilter 方法，专门用于拦截请求。可以做权限检查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">HttpSession session = httpServletRequest.getSession(); Object user = session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">// 如果等于 null，说明还没有登录</span></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse); <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 让程序继续往下访问用户的目标资源 filterChain.doFilter(servletRequest,servletResponse);</span></span><br><span class="line">&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml 中的配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给 filter 起一个别名--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 filter 的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter-mapping 配置 Filter 过滤器的拦截路径--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter-name 表示当前的拦截路径给哪个 filter 使用--&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--url-pattern 配置拦截路径</span></span><br><span class="line"><span class="comment">/表示请求地址为:http://ip:port/工程路径/ 映射到IDEA的web目录</span></span><br><span class="line"><span class="comment">/admin/* 表示请求地址为:http://ip:port/工程路径/admin/* --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Filter 过滤器的使用步骤: </p><ol><li>编写一个类去实现 Filter 接口 </li><li>实现过滤方法 doFilter()</li><li>到 web.xml 中去配置 Filter 的拦截路径</li></ol><h2 id="3-Filter-的生命周期"><a href="#3-Filter-的生命周期" class="headerlink" title="3. Filter 的生命周期"></a>3. Filter 的生命周期</h2><p>Filter 的生命周期包含几个方法 </p><p>1、构造器方法</p><p>2、init 初始化方法<br> 第 1，2 步，在 web 工程启动的时候执行(Filter 已经创建)</p><p>3、doFilter 过滤方法<br> 第 3 步，每次拦截到请求，就会执行</p><p>4、destroy 销毁<br> 第 4 步，停止 web 工程的时候，就会执行(停止 web 工程，也会销毁 Filter 过滤器)</p><h2 id="4-FilterConfig-类"><a href="#4-FilterConfig-类" class="headerlink" title="4. FilterConfig 类"></a>4. FilterConfig 类</h2><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。</p><p>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息。</p><p>FilterConfig 类的作用是获取 filter 过滤器的配置内容 </p><ol><li>获取 Filter 的名称 filter-name 的内容 </li><li>获取在 Filter 中配置的 init-param 初始化参数 </li><li>获取 ServletContext 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123; </span><br><span class="line">  System.out.println(<span class="string">&quot;2.Filter 的 init(FilterConfig filterConfig)初始化&quot;</span>);</span><br><span class="line"><span class="comment">//1、获取 Filter 的名称 filter-name 的内容</span></span><br><span class="line">System.out.println(<span class="string">&quot;filter-name 的值是:&quot;</span> + filterConfig.getFilterName());</span><br><span class="line"><span class="comment">//2、获取在 web.xml 中配置的 init-param 初始化参数 </span></span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数username的值是:&quot;</span>+filterConfig.getInitParameter(<span class="string">&quot;username&quot;</span>)); System.out.println(<span class="string">&quot;初始化参数 url 的值是:&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line"><span class="comment">//3、获取 ServletContext 对象</span></span><br><span class="line">System.out.println(filterConfig.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给 filter 起一个别名--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--配置 filter 的全类名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-FilterChain-过滤器链"><a href="#5-FilterChain-过滤器链" class="headerlink" title="5. FilterChain 过滤器链"></a>5. FilterChain 过滤器链</h2><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210224122812200.png" alt="image-20210224122812200"></p><h2 id="6-Filter的拦截路径"><a href="#6-Filter的拦截路径" class="headerlink" title="6. Filter的拦截路径"></a>6. Filter的拦截路径</h2><ol><li>精确匹配</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/target.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为:<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p><ol start="2"><li>目录匹配</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为:<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</p><ol start="3"><li>后缀名匹配</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须以.do 结尾才会拦截到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须以.action 结尾才会拦截到</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven笔记</title>
      <link href="2021/01/28/Maven%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/28/Maven%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center> 远处的钟声迴荡在雨里</center><center>我们在屋簷底下牵手听</center><a id="more"></a><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/%E5%B0%9A%E7%A1%85%E8%B0%B7_Maven%E7%AC%94%E8%AE%B0.png" alt="尚硅谷_Maven笔记"  />]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea永久破解</title>
      <link href="2021/01/18/IDEA%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3/"/>
      <url>2021/01/18/IDEA%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>技术文档：<a href="https://tech.souyunku.com/?p=30970">https://tech.souyunku.com/?p=30970</a></p><p>压缩包下载：<a href="https://souyunku.lanzous.com/b0aki3kna">https://souyunku.lanzous.com/b0aki3kna</a></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="2021/01/11/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/11/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center>若女生没有暗示，男人就不敢追</center><center> 一个暗示一个勾搭，一个调戏一个愿意，促成一段苟且</center><center>事后的不甘，纯属你俩分赃不均。</center><a id="more"></a><h1 id="Spring-5"><a href="#Spring-5" class="headerlink" title="Spring 5"></a>Spring 5</h1><h2 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h2><ul><li>Spring 框架概述</li><li>IOC容器<ol><li>IOC底层原理</li><li>IOC接口（BeanFactory）</li><li>IOC具体操作（基于xml的Bean管理）</li><li>IOC具体操作（基于注解的Bean管理）</li></ol></li><li>AOP</li><li>JdbcTemplate</li><li>事务管理</li><li>Spring5新特性</li></ul><h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><ol><li><p>Spring框架是一个开放源代码的J2EE应用程序框架</p></li><li><p>解决企业应用开发的复杂性</p></li><li><p>Spring有两个核心部分：IOC部分和AOP部分</p><ul><li>IOC：控制反转（之前创建对象是自己new一个类，现在是把创建对象的过程交给Spring进行管理）</li><li>AOP：面向切面（如果增强功能，可以做到不修改原代码进行代码增强）</li></ul></li><li><p>Spring特点</p><ul><li><p><strong>方便解耦，简化开发</strong>（有IOC，降低耦合度）</p></li><li><p>对AOP的支持</p></li><li><p>方便程序的测试</p></li><li><p>方便集成其他框架</p></li><li><p>降低Java EE API的使用难度</p></li><li><p>方便事务的操作</p></li><li><p>Java源码是经典学习范例</p><p>Spring的源码设计精妙、结构清晰、匠心独运，处处体现着大师对<a href="https://baike.baidu.com/item/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">Java设计模式</a>灵活运用以及对Java技术的高深造诣。Spring框架源码无疑是Java技术的最佳实践范例。如果想在短时间内迅速提高自己的Java技术水平和应用开发水平，学习和研究Spring源码将会使你收到意想不到的效果。</p></li></ul></li></ol><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ol><li>下载Spring5 <a href="https://repo.spring.io/release/org/springframework/spring/">地址</a></li></ol><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119140619780.png" alt="image-20210119140619780"></p><p>解压后文件目录：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119140952443.png" alt="image-20210119140952443"></p><p>关于lib文件</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119141818763.png" alt="image-20210119141818763"></p><ol start="2"><li>使用Idea创建普通java工程</li></ol><p>新建项目，选择java，然后选择</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119141428868.png" alt="image-20210119141428868"></p><p>最后创建一个项目</p><ol start="3"><li>导入相关包</li></ol><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119142125405.png" alt="image-20210119142125405"></p><p>找的相关包进行导入</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119142233650.png" alt="image-20210119142233650"></p><p>除此之外，还需要日志包</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119142918774.png" alt="image-20210119142918774"></p><p>然后Project Structure –&gt; Modules</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119143200971.png" alt="image-20210119143200971"></p><ol start="4"><li>使用（用Spring的方式进行使用）。创建一个普通的类，然后在再写几个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.Spring5;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;add。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建对象有多种方法，这里使用Spring方式创建对象，创建Spring配置文件，在配置文件创建对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一下User类对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;User&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.加载Spring配置文件 ClassPathXmlApplicationContext 是在类路径下</span></span><br><span class="line">      ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取配置创建的对象，其中&quot;user&quot;是在配置文件中的id值，也就是别名。不是对象的名字，是通过id值得到对应的类，然后进行创建对象，第二个参数进行得到什么类型的对象</span></span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);<span class="comment">//这就是通过Spring得到的对象。</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">user.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC-概念及原理"><a href="#IOC-概念及原理" class="headerlink" title="IOC(概念及原理)"></a>IOC(概念及原理)</h3><ol><li><p>什么是IOC</p><ul><li>控制反转，把对象的创建和对象之间的调用过程，交给Spring管理</li></ul><p><strong>举例</strong>：在Servlet中我们需要使用Service，然而我们之前的做法是在Servlet中创建Service对象， 增加了耦合度，我们现在就把这些对象的创建交给Spring来管理。</p><ul><li>使用IOC的目的：是为了<strong>降低</strong>耦合度</li><li>入门案例就是IOC的实现</li></ul></li><li><p>IOC底层原理主要用到的3个技术</p><ul><li>xml文件的解析</li><li>工厂模式</li><li>反射</li></ul></li><li><p>底层原理-画图</p><ul><li>原始方式</li></ul><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119151941904.png" alt="image-20210119151941904"></p><ul><li>工厂方式（通常的解决方案，不是最终的方案）</li></ul><p>此种方式的出现就是为了解耦合，此种方法虽然是解决了Service和Dao之间的耦合度，但是还是引入了Userfactory，也是增加了耦合度。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119152030500.png" alt="image-20210119152030500"></p><ul><li>IOC方式（主要技术：xml文件的解析、工厂模式、反射）</li></ul><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119152140670.png" alt="image-20210119152140670"></p></li></ol><p>好处说明：比如我们的UserDao路径变了，那么Service是也需要改，但是现在我们只需要更改配置文件就可以了。</p><h3 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h3><ol><li><p>IOC的思想基于IOC容器完成，IOC容器底层就是<strong>对象工厂</strong></p></li><li><p>Spring提供了IOC实现的两种方式：（两个接口）</p><p>这两个接口实现的功能相似，都能实现加载配置文件，然后通过工厂这个过程去创建对象。</p><ul><li><strong>BeanFactory</strong> (IOC容器基本实现，是Spring内部使用的接口，一般不提供我们开发人员使用，但是可以使用)</li></ul><p>也就是说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以换为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>ApplicationContext</strong> （是BeanFactory 接口的一个子接口，提供了更多，更强大的功能，提供我们开发人员进行使用）</li></ul><p><strong>区别</strong>：若使用BeanFactory是只是加载配置文件，而不是去创建对象，而我们在使用对象的时候，才去创建对象。ApplicationContext在加载配置文件过程中，如果在里面进行了配置<bean>,那么将把声明的所有对象都进行了创建。（其实使用ApplicationContext这种方式是最好的）</p><ol start="3"><li>ApplicationContext 接口有实现类</li></ol><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210119153715972.png" alt="image-20210119153715972"></p><h3 id="IOC操作（Bean管理操作）"><a href="#IOC操作（Bean管理操作）" class="headerlink" title="IOC操作（Bean管理操作）"></a>IOC操作（Bean管理操作）</h3><h4 id="1-什么是Bean管理"><a href="#1-什么是Bean管理" class="headerlink" title="1. 什么是Bean管理"></a>1. 什么是Bean管理</h4><p>Bean管理分为两个操作：</p><ol><li><p>Spring 创建对象</p></li><li><p>Spring 注入属性</p></li></ol><h4 id="2-Bean管理操作的两种方式"><a href="#2-Bean管理操作的两种方式" class="headerlink" title="2.Bean管理操作的两种方式"></a>2.Bean管理操作的两种方式</h4><ul><li><p><strong>基于xml文件的方式</strong></p></li><li><p><strong>基于注解的方式</strong></p></li></ul><h5 id="2-1-基于xml方式创建对象"><a href="#2-1-基于xml方式创建对象" class="headerlink" title="2.1.基于xml方式创建对象"></a>2.1.基于xml方式创建对象</h5><p>在 Spring 配置文件中，使用 Bean 标签，标签里面添加对应属性，就可以实现对象创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他属性：</p><ul><li>id：唯一标识，这里使用的user，那么用的时候也是user</li><li>class：类全类名</li><li>name: 不怎么使用，可以使用特殊符号</li></ul><p>创建对象时，默认使用无参构造器进行创建，也就是说，如果在写实体类时，写了有参构造器，没写无参构造器，会出错。</p><h5 id="2-2-基于xml方式注入属性"><a href="#2-2-基于xml方式注入属性" class="headerlink" title="2.2.基于xml方式注入属性"></a>2.2.基于xml方式注入属性</h5><pre><code>1. DI ：依赖注入，就是注入属性（要在创建对象的基础之上）</code></pre><p><strong>面试：IOC 与 DI的区别？</strong></p><p><strong>答：DI 是 IOC 里面的一种具体实现，就是注入属性，他是在创建完对象进行注入。</strong></p><p>传统方式注入：</p><ol><li>set 注入。(创建一个实体类，有set方法，new对象时使用set方法进行注入初始化)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;bname=&#x27;&quot;</span> + bname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, bauthor=&#x27;&quot;</span> + bauthor + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring配置文件配置对象创建，配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring源码解析&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lgy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>有参构造注入（创建有参构造器，在new对象时传递参数进行注入初始化）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String oname, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring配置文件配置对象创建，配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;顺丰&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;山东省&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>了解内容：（另外一种属性注入的方式）</p><p>使用P名称空间在配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进行属性注入，在bean标签里面进行操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.bean.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;九阳神功&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;无名氏&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-XML注入其他属性"><a href="#2-3-XML注入其他属性" class="headerlink" title="2.3.XML注入其他属性"></a>2.3.XML注入其他属性</h5><ol><li>字面量</li></ol><ul><li>空值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring源码解析&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>包含特殊符号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> &gt;</span></span><br><span class="line">          <span class="comment">&lt;!--&lt;&lt;Spring源码解析&gt;&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[&lt;&lt;Spring源码解析&gt;&gt;]]&gt;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lgy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>注入属性 – 外部Bean</li></ol><p>Service调用dao层就是引用外部Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name属性值：类里面的属性名称--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--也就是在UserServlce里面private UserDao userDao的值userDao--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.dao.UserDaoImpl&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>注入属性 – 内部 Bean 和 级联属性</li></ol><ul><li>一对多关系：部门：员工</li></ul><p>在实体类中表示一对多的关系</p><ol start="4"><li>注入数组类型的属性</li><li>注入 List 集合类型的属性</li><li>注入map集合类型的属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.bean.Stu&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组类型的属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sourses&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>java 课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--List类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>历史<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--map类型的属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JSP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>在集合里面设置对象类型的信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--给每个学生注入list集合类型，值是对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建多个course对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.bean.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;数学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.bean.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;英语&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>把集合注入部分提取出来(未记)</li></ol><h4 id="3-FactoryBean"><a href="#3-FactoryBean" class="headerlink" title="3.FactoryBean"></a>3.FactoryBean</h4><p>Spring中有两种Bean，一种是自己创建的Bean，一种是工厂Bean（FactoryBean）</p><p>两者区别，普通Bean定义什么类型就返回什么类型，工厂Bean定义什么类型不一定就返回什么类型，可以不一样。</p><p>工厂Bean演示：</p><ol><li>创建类，让这个类作为工厂bean，只需要实现接口FactoryBean</li><li>实现接口里面的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"><span class="comment">//    定义类型可以和返回类型可以不一样，在返回方法里面进行定义就好了。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;优化方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Bean-的作用域"><a href="#4-Bean-的作用域" class="headerlink" title="4.Bean 的作用域"></a>4.Bean 的作用域</h4><p>什么是Bean的作用域？</p><p>答：在Spring里面可以设置bean 的单实例，还是多实例，默认的是单实例对象，但是可以配置多实例，至于Bean实例是个单实例还是多实例这就是作用域。</p><ol start="2"><li><p>如何设置多实例？</p><p>spring的配置文件bean里面有一个scope属性，用于设置单实例还是多实例。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210121111620970.png" alt="image-20210121111620970"></p><p>若是不设置，使用默认的也就是单实例，singleton，在加载配置文件的时候，就把对象创建出来了，</p><p>若是设置多实例，使用prototype，这里面加载Spring的时候，不会创建对象，只有在调用getBean方法的时候才会创建。</p></li></ol><h4 id="5-Bean-的生命周期"><a href="#5-Bean-的生命周期" class="headerlink" title="5.Bean 的生命周期"></a>5.Bean 的生命周期</h4><ol><li>生命周期（从创建到销毁的过程）</li></ol><ul><li>创建Bean实例（通过构造器）</li><li>为bean 的属性设置值和对其他bean的引用（调用set方法）</li><li>调用bean 的初始化方法（需在配置文件里面进行配置init-method属性值，方法定义在bean中，在xml文件中使用）</li><li>bean可以使用了，也就是可以获得了。</li><li>当容器关闭的时候，会调用bean销毁的方法（需要进行配置销毁的方法destory-method属性值，方法定义在bean中，在xml文件中使用）</li></ul><h4 id="6-Bean-的后置处理器"><a href="#6-Bean-的后置处理器" class="headerlink" title="6.Bean 的后置处理器"></a>6.Bean 的后置处理器</h4><p>Bean的后置处理器是在上面第5个问题上继续完善的。</p><ul><li>创建Bean实例，（通过构造器）</li><li>为bean 的属性设置值和对其他bean的引用（调用set方法）</li><li><strong>初始化之前 在Bean 的实例传递给Bean的后置处理器（需要在配置文件里面配置处理器，然后配置文件里面的所有bean都会调用前置后置处理器）</strong></li><li>调用bean 的初始化方法（需进行配置）</li><li><strong>把Bean 的实例传递给Bean的后置处理器，</strong>初始化之后。</li><li>bean可以使用了（也就是获取到了bean实例）</li><li>当容器关闭的时候，会调用bean销毁的方法（需要进行配置销毁的方法）</li></ul><p>第三步和第五中种需要创建一个类实现BeanPostProcessor,然后重写此接口中的方法。最后在xml配置文件中进行bean配置，只要是这样写了以后，就在所有xml文件中配置的所有bean都加上第三步和第五步。</p><h4 id="7-xml的自动装配（用的很少）"><a href="#7-xml的自动装配（用的很少）" class="headerlink" title="7.xml的自动装配（用的很少）"></a>7.xml的自动装配（用的很少）</h4><ol><li>什么是自动装配</li></ol><p>在<property>里面设置初始化的值，这是手动装配。</p><p>自动装配：Spring 是根据<strong>属性类型</strong>或者<strong>属性名称</strong>进行自动装配。</p><ol start="2"><li>演示自动装配的过程</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--autowire=&quot;byName&quot; 是根据属性名称找到，实体中属性名字 与 bean中的id 的值名字 要相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire=&quot;byType&quot; 是根据类型找到--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动装配--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.Spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是根据类型进行注入，但是配置文件中有多个bean，类型相同但是命名不相同，这个时候就会出现问题。就会报错。</p><h4 id="8-外部属性文件（比如数据库连接信息文件）"><a href="#8-外部属性文件（比如数据库连接信息文件）" class="headerlink" title="8.外部属性文件（比如数据库连接信息文件）"></a>8.外部属性文件（比如数据库连接信息文件）</h4><ol><li>直接配置数据库信息</li></ol><ul><li>配置连接池（Druid连接池）</li><li>引入Druid连接池依赖jar包，并把该jar包引入依赖中</li></ul><p>然后在配置文件中引入context名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是为了在xml配置文件中，引入properties文件，然后在properties配置文件中写入数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-基于注解的方式"><a href="#9-基于注解的方式" class="headerlink" title="9.基于注解的方式"></a>9.基于注解的方式</h4><h5 id="9-1-什么是注解"><a href="#9-1-什么是注解" class="headerlink" title="9.1 什么是注解"></a>9.1 什么是注解</h5><p>注解是特殊标记。格式@注解名称(属性名称= 属性值，属性名称=属性值 ..)</p><h5 id="9-2-哪里可以使用注解"><a href="#9-2-哪里可以使用注解" class="headerlink" title="9.2 哪里可以使用注解"></a>9.2 哪里可以使用注解</h5><p>注解可以在<strong>方法、类上、属性</strong>上都可以加注解</p><h5 id="9-3-为什么用注解？"><a href="#9-3-为什么用注解？" class="headerlink" title="9.3 为什么用注解？"></a>9.3 为什么用注解？</h5><p>为了简化xml配置</p><p>Spring针对Bean管理中创建的对象提供注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component //普通的注解</span><br><span class="line">@Service //一般用在业务逻辑层</span><br><span class="line">@Controller //一般用在web层（控制层）</span><br><span class="line">@Respository //一般用在持久层（dao层）</span><br></pre></td></tr></table></figure><p>上面的四个注解功能是一样的，都用来创建Bean实例</p><h5 id="9-4-基于注解方式实现对象的创建"><a href="#9-4-基于注解方式实现对象的创建" class="headerlink" title="9.4 基于注解方式实现对象的创建"></a>9.4 基于<strong>注解方式</strong>实现对象的创建</h5><p>第一步：需要引入aop的jar包</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210123103222813.png" alt="image-20210123103222813"></p><p>第二步：开启组建扫描</p><p>在开启组件扫描之前还需要进行引入context名称空间，要是已经引入了就不需要了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组建扫描--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若扫描多个包，也可以使用,隔开 ，或者扫描父包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lgy.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：创建类，在类的上面添加对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解里面的value可以不写，默认的是把类名字就是为userService</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService.add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一点提醒：</strong>这里是自己配置的过滤器，把默认的过滤器进行了屏蔽，然后这里扫描的是com.lgy.annotation下的标有@Controller注解的类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--use-default-filters=&quot;false&quot;关闭默认的过滤器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--然后扫描要扫描包下的所有标有 Controller 的注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lgy.annotation&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，这是不扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lgy.annotation&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9-5-基于注解的方式实现属性注入"><a href="#9-5-基于注解的方式实现属性注入" class="headerlink" title="9.5 基于注解的方式实现属性注入"></a>9.5 基于注解的方式实现属性注入</h5><ol><li>==@AutoWired==：根据<strong>属性类型</strong>进行自动装配。</li></ol><p>第一步：把Service和dao的对象进行创建，在service和dao类添加创建对象注解</p><p>第二步：在service注入dao对象，在service类中添加dao类型属性，在属性上面使用注解</p><ol start="2"><li>==@Qualifier==：根据<strong>属性名称</strong>进行注入。</li></ol><p>@Qualifier 与 @AutoWired 一起使用</p><p>为什么一起使用？</p><p>举例：比如UserService这个接口可以有多个实现类，，如果有多个实现类，那么类型注入不知道找哪个实现类？这时候我们加入@Qualifier就可以根据名称进行注入。</p><ol start="3"><li>==@Resource==： 可以根据类型注入，可以根据名称注入。</li></ol><p>只有一个@Resource是类型注入，@Resource（name=”userDaoImpl”）,是根据名称进行注入。</p><ol start="4"><li>==@Value== ：注入普通属性类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value=&quot;123&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h4 id="10-纯（完全）注解开发"><a href="#10-纯（完全）注解开发" class="headerlink" title="10. 纯（完全）注解开发"></a>10. 纯（完全）注解开发</h4><ol><li>创建一个配置类，为了替代xml配置文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.annotation.config;</span><br><span class="line"><span class="comment">//是为了去除Spring配置文件</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//把当前类变为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.lgy.annotation&quot;&#125;)</span> <span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>编写测试类（之前其他的不变）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;    </span><br><span class="line">        <span class="comment">//加载配置类</span></span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">       UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">       System.out.println(userService);</span><br><span class="line"></span><br><span class="line">       userService.addUserService();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是完全注解开发。</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><p>面向切面编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑的各部分之间的耦合度降低，提高程序的可重用行，同时提高开发效率。</p><p>==也就是说再不修改源代码的基础上，在主干功能基础上增加新的功能。==</p><p>举例：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/CC1B6FF7A3316FB8AD31E1F271947F2A.png" alt="CC1B6FF7A3316FB8AD31E1F271947F2A"></p><ul><li>连接点：在一个类中，哪一个方法能够被增强，那这个方法就叫做连接点</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">add();</span><br><span class="line">delete()；</span><br><span class="line">  update();</span><br><span class="line">  query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>切入点：<strong>实际</strong>被真正增强的方法叫做切入点（因为并不是所有的连接点都被增强）</p></li><li><p>通知/增强</p><ul><li>实际增强的逻辑的部分就是通知，比如在add（）方法后加了一个输出语句，那么那个输出语句就是通知</li><li>通知有多种类型<ul><li>前置通知（在执行之前执行）</li><li>后置通知（在执行之后执行）</li><li>环绕通知（前后都执行）</li><li>异常通知（出现异常的时候执行）</li><li>最终通知（不管怎么样，都会执行）</li></ul></li></ul></li><li><p>切面：是动作，是把<strong>通知</strong>应用到<strong>切入点</strong>的过程</p></li></ul><h3 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h3><ol><li>AOP底层使用动态代理</li></ol><ul><li>有两种情况的动态代理</li></ul><p>第一种：有接口的情况，使用JDK动态代理</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/129F5C335BF42EDF428477B6336F26BC.png" alt="129F5C335BF42EDF428477B6336F26BC"></p><p>第二种：没有接口的情况，使用CGLIB动态代理</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/EB70BE5F744FAEC3B48B198634757EC8.png" alt="EB70BE5F744FAEC3B48B198634757EC8"></p><h3 id="AOP-JDK动态代理"><a href="#AOP-JDK动态代理" class="headerlink" title="AOP (JDK动态代理)"></a>AOP (JDK动态代理)</h3><ol><li>使用JDK动态代理，使用Proxy类里面的方法创建代理对象,Proxy是 java.lang.reflect.Proxy包下的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数：类的加载器，就是获取被代理类的类的加载器，被代理类是什么加载的，那代理类就用一样的类加载器</span></span><br><span class="line"><span class="comment">//第二个参数：获取被代理类的所有接口，被代理类实现了什么接口，那代理类就实现什么接口。 </span></span><br><span class="line"><span class="comment">//第三个参数：实现这个接口InvocationHander，创建代理对象，写增强的方法</span></span><br><span class="line">Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler)</span><br></pre></td></tr></table></figure><p>反射的时候讲的动态代理代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.java;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 动态代理举例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LGY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-04 15:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取信仰</span></span><br><span class="line">    <span class="function">String <span class="title">getBelife</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i believe i can fly&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃：&quot;</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用动态代理，需要解决的问题：</span></span><br><span class="line"><span class="comment"> * 问题一：如何根据加载内存中的被代理类，动态创建一个代理类及其对象</span></span><br><span class="line"><span class="comment"> * 问题二：当通过代理类的对象调用方法时，如何动态调用被代理类中的同名方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回代理类的对象。为了解决问题一</span></span><br><span class="line">    <span class="comment">//返回值Object就是返回的代理类的类型，不能写成具体的某一个类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//被创建的代理类的对象</span></span><br><span class="line">        <span class="comment">//handler作为参数，会自动调用invoke方法</span></span><br><span class="line">        MyInvocationhandler handler = <span class="keyword">new</span> MyInvocationhandler();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个参数：类的加载器，就是获取被代理类的类的加载器，被代理类是什么加载的，那代理类就用一样的类加载器</span></span><br><span class="line">        <span class="comment">//第二个参数：获取被代理类的所有接口，被代理类实现了什么接口，那代理类就实现什么接口。</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationhandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//赋值时，也需要使用被代理类的对象进行赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a 的功能就声明在invoke()中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理类的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 代理类要执行的方法，就声明在invoke()中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理类对象调用的方法，此方法也就作为被代理类对象要调用的方法</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance就是代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        proxyInstance.getBelife();</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;四川麻辣烫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AOP术语-1"><a href="#AOP术语-1" class="headerlink" title="AOP术语"></a>AOP术语</h3><ol><li>连接点</li></ol><p>在一个类里面，==哪些方法可以被增强==，哪些方法就可以被称为==连接点==。</p><ol start="2"><li>切入点</li></ol><p>==实际真正被增强的方法==就被称为切入点。</p><ol start="3"><li>通知（增强）</li></ol><p>比如我们增强一个方法，==实际增强的逻辑部分==就叫做通知。</p><p>通知有多种类型，有5种</p><ul><li>前置通知 （在被增强的方法执行之前会执行）</li><li>后置通知 （在被增强的方法执行之后会执行）</li><li>环绕通知（在被增强的方法执行==之前之后都会执行==）</li><li>异常通知（在被增强的方法==出现异常==会执行）</li><li>最终通知（类似于finally中，一定会被执行）</li></ul><ol start="4"><li>切面</li></ol><p>是一个动作的操作，==把我们的通知应用到切入点的过程==，就叫做切面。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/35BC5D54C05C329B0B8D5F7E1DB8060A.png" alt="35BC5D54C05C329B0B8D5F7E1DB8060A"></p><h3 id="AOP的操作"><a href="#AOP的操作" class="headerlink" title="AOP的操作"></a>AOP的操作</h3><ol><li>在Spring框架中，一般基于AspectJ 实现 AOP 的操作</li></ol><p>什么是 AspectJ ？</p><p>答：AspectJ不是Spring 的组成部分，独立于AOP框架，一般把 AspectJ 和Spring 框架一起使用，完成AOP操作。</p><ol start="2"><li><p>基于 AspectJ 实现AOP的操作</p><p>(1) 基于XML配置文件的实现</p><p>(2) 基于注解的方式实现（使用）</p></li><li><p>在项目工程中引入AOP项目依赖</p></li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210123170228106.png" alt="image-20210123170228106" style="zoom:50%;" /><p>mvn代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sourceforge.cglib/com.springsource.net.sf.cglib --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.springsource.net.sf.cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aopalliance/com.springsource.org.aopalliance --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.springsource.org.aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/com.springsource.org.aspectj.weaver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.springsource.org.aspectj.weaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>切入点的表达式<ul><li>切入点表达式的作用：知道对哪个类型里面的哪个方法进行增强</li><li>语法结构<ul><li>execution([权限修饰符] [返回类型] [类全路径] [方法名称] ([参数列表])</li></ul></li></ul></li></ol><p>举例1：对com.lgy.dao.BookDao 类里面的 add()方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  * 表示任意的修饰符,返回类型没有没写，参数列表用了(..)</span></span><br><span class="line">execution(* com.lgy.dao.BookDao.add(..))</span><br></pre></td></tr></table></figure><p>举例2：对com.lgy.dao.BookDao 类里面的所有方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示任意的修饰符,返回类型没有没写，参数列表用了(..)</span></span><br><span class="line">execution(* com.lgy.dao.BookDao.*(..))</span><br></pre></td></tr></table></figure><p>举例3：对com.lgy.dao 包里面的所有类及类里面的所有方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 表示任意的修饰符,返回类型没有没写，参数列表用了(..)</span></span><br><span class="line">execution(* com.lgy.dao.*.*(..))</span><br></pre></td></tr></table></figure><p>####AspectJ注解</p><ol><li>创建一个类，在类里面定义一个方法进行增强</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User.add 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建增强类（编写增强逻辑，让不同的方法做不同的通知）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line"><span class="comment">//想作为前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before ..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>进行通知配置</p><ol><li>在Spring配置文件中，开启注解扫描</li><li>使用注解创建 User 和UserProxy 对象</li><li>在增强类上面增加@Aspect</li><li>在spring配置文件中开启生成代理对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意：加入context 和 aop--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启组建扫描--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若扫描多个包，也可以使用,隔开 ，或者扫描父包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lgy.aop.Annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这句话的意思就是到要扫描到包里面去找一下哪个类上有 @Aspect 注解，就生成代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置不同类型的通知</p></li></ol><p>在增强类的里面，在作为通知方法上面添加通知类型的注解，使用切入点表达式进行配置。</p><ol start="5"><li><p>相同的切入点抽取</p></li><li><p>有多个增强类对同一个方法进行增强，设置增强类对优先级</p><p>在增强类上面添加注解 @Order（数字类型的值），值越小优先级越高</p></li></ol><p>完全使用注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//把当前类变为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.lgy.annotation&quot;&#125;)</span> <span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AspectJ配置文件（了解）"><a href="#AspectJ配置文件（了解）" class="headerlink" title="AspectJ配置文件（了解）"></a>AspectJ配置文件（了解）</h4><ol><li>创建两个类，一个增强类，一个被增强类，创建方法。</li><li>在spring配置文件中创建两个类对象</li><li>在spring配置文件中配置切入点</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.aop.aopxml.bean.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.aop.aopxml.bean.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--配置aop的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--其中切入点id叫 p--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.lgy.aop.aopxml.bean.Book.buy(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置增强作用在具体点方法上--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span>s</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="JdbcTemplate的概念"><a href="#JdbcTemplate的概念" class="headerlink" title="JdbcTemplate的概念"></a>JdbcTemplate的概念</h3><p>Spring 框架对JDBC进行封装，使用JdbcTemplate方便实现对数据库的操作</p><ol><li>准备工作<ul><li>引入相关依赖</li></ul></li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210125161357017.png" alt="image-20210125161357017" style="zoom:50%;" /><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210125161940389.png" alt="image-20210125161940389" style="zoom:50%;" /><ol start="2"><li>在Spring配置文件里面配置连接池</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置JdbcTemplate对象，注入DataSource</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建service,创建dao，在dao注入JdbcTemplate对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.JdbcTemplate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>servcie</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>dao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JdbcTemplate操作数据库"><a href="#JdbcTemplate操作数据库" class="headerlink" title="JdbcTemplate操作数据库"></a>JdbcTemplate操作数据库</h3><p>添加、修改、删除、查询在代码中实现了</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h2 id="Spring5新特性"><a href="#Spring5新特性" class="headerlink" title="Spring5新特性"></a>Spring5新特性</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>@ResponseBody的作用其实是将java对象转为json格式的数据。</p><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。<br>注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。</p><p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。<br>注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">后台 Controller类中对应的方法：</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(String name, String password, HttpSession session)</span> </span>&#123;</span><br><span class="line">user = userService.checkLogin(name, password);</span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JsonResult(user);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestBody</span>是作用在形参列表上，用于将前台发送过来固定格式的数据【xml格式 或者 json等】封装为对应的 JavaBean 对象，</span><br><span class="line">封装时使用到的一个对象是系统默认配置的 HttpMessageConverter进行解析，然后封装到形参上。</span><br><span class="line">如上面的登录后台代码可以改为：</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User loginUuser, HttpSession session)</span> </span>&#123;</span><br><span class="line">user = userService.checkLogin(loginUser);</span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JsonResult(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea中遇见的问题</title>
      <link href="2021/01/11/IDEA%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/11/IDEA%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<center>止语是上等的智慧，止心是上等的律己</center><a id="more"></a><h3 id="1-忽略文件设置：（上传git忽略的文件，忽略后不上传也不显示）"><a href="#1-忽略文件设置：（上传git忽略的文件，忽略后不上传也不显示）" class="headerlink" title="1.忽略文件设置：（上传git忽略的文件，忽略后不上传也不显示）"></a>1.忽略文件设置：（上传git忽略的文件，忽略后不上传也不显示）</h3><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210111170308538.png" alt="image-20210111170308538"></p><h3 id="2-control-h，能显示继承关系"><a href="#2-control-h，能显示继承关系" class="headerlink" title="2.control+h，能显示继承关系"></a>2.control+h，能显示继承关系</h3><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210131113627423.png" alt="image-20210131113627423"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea中遇见的问题</title>
      <link href="2021/01/11/idea%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/11/idea%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<center>沅有芷兮澧有兰，思公子兮未敢言</center><a id="more"></a><h3 id="问题1-关于项目导入idea不识别module-的问题及解决方法"><a href="#问题1-关于项目导入idea不识别module-的问题及解决方法" class="headerlink" title="问题1. 关于项目导入idea不识别module 的问题及解决方法"></a>问题1. 关于项目导入idea不识别module 的问题及解决方法</h3><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210111164220243.png" alt="image-20210111164220243"></p><p>解决方法：</p><ol><li>右键父项目、选择Open Module Settings.   或者选择Project Structrue</li></ol><ol start="2"><li><p>第三步选择Import Module<img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210111164703630.png" alt="image-20210111164703630" style="zoom:50%;" /></p></li><li><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210111164941255.png" alt="image-20210111164941255"></p></li><li><p>如果是maven项目选择maven，不是就选择第一项，然后一直next<img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210111165025101.png" alt="image-20210111165025101"></p></li><li><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210111165141910.png" alt="image-20210111165141910"></p></li><li><p>遇见错误Error creating bean with name ‘org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping#0’ </p></li></ol><p>情况：确保项目没有错，是因为修改了子模块的名字导致的</p><p>解决方法：找到maven，然后clean后再install，就可以了。</p><ol start="7"><li>修改子模块的名称</li></ol><p>若要是修改子模块的名称，需要修改文件目录还有模块目录，然后在父工程的pom文件夹里面进行修改，然后点击Project Structure进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis复习总结（未完结）</title>
      <link href="2021/01/09/SpringMVC/"/>
      <url>2021/01/09/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html">SpringMVC官网</a></p><p><a href="https://docs.spring.io/spring-framework/docs/4.3.24.RELEASE/spring-framework-reference/">SpringMVC</a></p><p>SSM: spring SpringMVC Mybatis</p><p>MVC三层架构：</p><p>学习过程：</p><p>JavaSE：基础</p><p>JavaWeb：基础</p><p>框架：研究官方文档，锻炼<strong>自学</strong>能力，锻炼笔记能力，锻炼项目能力。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210225204634862.png" alt="image-20210225204634862"></p><p><strong>SpringMVC执行流程:</strong></p><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用处理器映射器HandlerMapping。</li><li>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。</li><li>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</li><li>执行处理器Handler(Controller，也叫页面控制器)。</li><li>Handler执行完成返回ModelAndView</li><li>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ol>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis复习总结（未完结）</title>
      <link href="2021/01/09/MyBatis/"/>
      <url>2021/01/09/MyBatis/</url>
      
        <content type="html"><![CDATA[<center>技术没有高低之分，只有使用的人有高低之分。</center><center>先把ssm中的MyBatis重新再来一遍！</center><a id="more"></a><p>基础代码github地址：<a href="https://github.com/dllgdxlgy/Mybatis">https://github.com/dllgdxlgy/Mybatis</a></p><p>时间：2020.12.29</p><p>环境：</p><ul><li>JDK 1.8</li><li>Mysql 5.7</li><li>Maven 3.6.1</li><li>IDEA</li></ul><p>回顾：</p><ul><li>JDBC</li><li>Mysql （基本的增删改查）</li><li>Java基础</li><li>Maven</li><li>Junit</li></ul><p>ssm框架学习都需要配置配置文件，都需要看<a href="https://mybatis.org/mybatis-3/zh/index.html">官网文档</a></p><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><h2 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h2><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201229201021860.png" alt="image-20201229201021860" style="zoom:67%;" /><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong>，</li><li>它支持自定义 SQL、存储过程以及高级映射。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li><li>MyBatis 可以通过<strong>简单的 XML</strong> 或<strong>注解</strong>来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li></ul><p>百度百科：</p><p>MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p><p>获取Mybatis的方式</p><ul><li>Maven </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>GitHub <a href="https://github.com/search?q=mybatis">github上的mybatis</a></li><li><a href="https://mybatis.org/mybatis-3/zh/index.html#">中文文档</a> </li></ul><h2 id="1-2、什么是持久化"><a href="#1-2、什么是持久化" class="headerlink" title="1.2、什么是持久化"></a>1.2、什么是持久化</h2><ul><li>数据持久化，持久化就是将程序的数据在持状态和顺势状态转化的过程</li><li>内存： <strong>断电即失</strong></li><li>数据库：io文件的持久化</li><li>生活中：冷藏，也是持久化，就是延长保留</li></ul><p><strong>为什么需要持久化？</strong></p><ul><li>有些数据需要保留</li><li>内存太贵</li></ul><h2 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h2><p>Dao层，Service层，Controller层</p><ul><li>能完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h2 id="1-4、为什么需要Mybatis"><a href="#1-4、为什么需要Mybatis" class="headerlink" title="1.4、为什么需要Mybatis"></a>1.4、为什么需要Mybatis</h2><ul><li><p>方便</p></li><li><p>传统的JDBC太复杂，简化，框架，自动化</p></li><li><p>帮助我们进行数据保存</p></li><li><p>其实不用Mybatis也可以，现在主流公司都需要进行学习。</p></li></ul><h2 id="1-5、Mybatis特点"><a href="#1-5、Mybatis特点" class="headerlink" title="1.5、Mybatis特点"></a>1.5、Mybatis特点</h2><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><p><strong>最重要的一点：使用的人多！</strong></p><h1 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h1><p>思路：搭建环境 –&gt;导入Mybatis –&gt; 编写代码 –&gt;测试</p><h2 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h2><ol><li>搭建数据库</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mybaties;</span><br><span class="line">create table user(</span><br><span class="line"> id INT(20) NOT NULL PRIMARY KEY,</span><br><span class="line"> name VARCHAR(20)DEFAULT NULL,</span><br><span class="line"> pwd VARCHAR(30) DEFAULT NUll</span><br><span class="line">)ENGINE=INNODB DEFAULT charset= utf8;</span><br><span class="line"></span><br><span class="line">insert into user(id,name,pwd) values(1,&#x27;gy&#x27;,&#x27;123&#x27;),(2,&#x27;lgy&#x27;,&#x27;123&#x27;),(3,&#x27;y&#x27;,&#x27;123&#x27;);</span><br></pre></td></tr></table></figure><p>新建项目：</p><ol><li>新建一个普通的maven项目</li><li>删除src目录，就可以当作父工程了。为了能进行创建子工程。</li><li>导入maven依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h2><p>new一个model，然后</p><ul><li>编写mybatis的核心配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--可以配置多个环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写mybatis的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写mybatis的工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取mybatis的sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h2><ul><li>编写实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后写Dao接口 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.dao;</span><br><span class="line"><span class="keyword">import</span> com.lgy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>最后写实现类(由原来的UserDaoImpl转换为Mapper配置文件)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口,就相当于之前实现了接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lgy.dao.userDao&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--查询语句--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id对应着方法名字，因为之前需要写一个实现类进行实现userDao，这里没有实现，</span></span><br><span class="line"><span class="comment">    只是写了一个配置文件，实现类要重写之前的方法，但是这里没有重写，只是用select标签代替了--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resultType要写他的全类名，这是返回类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lgy.pojo.User&quot;</span> &gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lgy.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lgy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.lgy.utils.mybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = mybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//执行SQl</span></span><br><span class="line">        userDao userDao = sqlSession.getMapper(userDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可能遇见的问题</p><ul><li>配置文件没有注册</li><li>绑定接口错误</li><li>方法名不对</li><li>返回类型不对</li><li>maven导出资源问题</li></ul><h1 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h1><p>namespace里面的包名要和接口的包名一致</p><ol><li><p>select 选择语句</p><ul><li>id：就是对应的namespace里面的方法名</li><li>resultset： 就是结果的返回值</li><li>parameterType：参数类型</li></ul></li><li><p>insert</p></li><li><p>update</p></li><li><p>delete</p></li></ol><p>流程：<strong>编写接口—&gt;写Mapper里面的sql语句—&gt;测试</strong>。 <strong>增删改需要提交事务</strong></p><ol start="5"><li>万能的map</li></ol><p><strong>问题描述</strong>：如果要是传递一个实体类，比如进行修改密码，只传一个id和密码就可以， 其他的信息不需要，而进行传递一个实体类很麻烦，还带有其他信息，这时候需要map就可以， 需要什么信息直接穿进去，而且名字可以随意起，只要在mapper里面用对就可以。如果实体类中的字段或者参数过多，可以使用map。</p><h1 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h1><h2 id="4-1、核心配置文件"><a href="#4-1、核心配置文件" class="headerlink" title="4.1、核心配置文件"></a>4.1、核心配置文件</h2><ul><li>Mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure><h2 id="4-2、环境配置"><a href="#4-2、环境配置" class="headerlink" title="4.2、环境配置"></a>4.2、环境配置</h2><p>可以配置多套环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--默认是有数据库连接池的--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis? useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3、属性"><a href="#4-3、属性" class="headerlink" title="4.3、属性"></a>4.3、属性</h2><p>除了上面的代码直接写入数据库连接信息，还可进行配置文件的配置</p><p>db.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里面参数连接不需要进行&amp;amp;</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>在核心配置文件中引用</p><p>遇到的问题：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210104102832311.png" alt="image-20210104102832311"></p><p>这里面规定了配置文件中标签的顺序，所以不能乱了顺序写。</p><p>引用后</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里面还可以进行写其他属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以直接引入外部配置文件</li><li>也可以在其中mybatis-config.xml 的properties文件中增加配置</li><li>如果两个文件有同一个字段，优先使用配置文件的中属性。</li></ul><h2 id="4-4、别名"><a href="#4-4、别名" class="headerlink" title="4.4、别名"></a>4.4、别名</h2><p>起别名就是就是为了在XXXMapper.xml文件中的result类型中使用更方便，但是要注意在mybatis-config.xml文件的要正确使用<typeAliases>标签。</p><p>有两种使用方式，第一种，直接指定某一个实体类</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.lgy.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种：可以指定某一个包名，Mybatis会自动扫描该包下的 java Bean,默认别名就是实体类的小写格式。</p><p>使用情况：</p><ul><li>在实体类比较少的时候可以使用第一种，这种就是比较简单，而且能够进行自己定义</li><li>如果要使用第二种且要进行自己定义，不使用他默认的格式，可以添加@alias注解。</li></ul><h2 id="4-5、设置"><a href="#4-5、设置" class="headerlink" title="4.5、设置"></a>4.5、设置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里只注意mapUnderscoreToCamelCase就可以了。</p><h2 id="4-6、映射器"><a href="#4-6、映射器" class="headerlink" title="4.6、映射器"></a>4.6、映射器</h2><p>方式一：<strong>使用相对于类路径的资源引用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/lgy/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：使用class文件进行绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.pojo.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须相同</li><li>接口和他的配置文件必须在同一个包下</li></ul><p>方式三：使用扫描包进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.lgy.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接口和他的Mapper配置文件必须相同</li><li>接口和他的配置文件必须在同一个包下</li></ul><h1 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h1><p>数据库的字段名</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210104152441089.png" alt="image-20210104152441089" style="zoom:50%;" /><p>实体类的属性名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p>但是查出来password显示为空</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210104154030017.png" alt="image-20210104154030017"></p><p>解决方法1：在xml文件的相应sql中进行修改，</p><p>解决方法2: resultMap（结果集映射）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultMap中的id与&lt;select&gt;标签里面的resultMap里面的值要一样，要代表引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;usermap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--column代表数据库中字段，property代表实体类中的属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lgy.pojo.User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;usermap&quot;</span>&gt;</span></span><br><span class="line">  select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h1><h2 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h2><p>如果数据库操作出现了异常，我们需要排错，日志就是最好的助手！这里使用日志工厂</p><p>只需要在mybatis-config.xml文件里显示添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">settings&gt;</span><br><span class="line"><span class="comment">&lt;!--注意name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;不要有空格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210104203938105.png" alt="image-20210104203938105"></p><h2 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h2><ol><li>导入Log4j依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入log4j依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在resources中创建log4j.properties文件并写入：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里是日志输出的位置</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="meta">log4j.additivity.org.apache</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c,%L] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log4j.appender.logfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment">#log4j.appender.logfile=org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.logfile.File=$&#123;lms.root&#125;/WEB-INF/logs/lms.log</span></span><br><span class="line"><span class="comment">#log4j.appender.logfile.MaxFileSize=512KB</span></span><br><span class="line"><span class="comment"># Keep three backup files.</span></span><br><span class="line"><span class="comment">#log4j.appender.logfile.MaxBackupIndex=3</span></span><br><span class="line"><span class="comment"># Pattern to output: date priority [category] - message</span></span><br><span class="line"><span class="comment">#log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.logfile.layout.ConversionPattern=%d %p [%c,%L] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.logger.orga.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.logger.com.opensymphony.xwork2</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.struts2</span>=<span class="string">INFO</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在mybatis-config.xml文件中配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里LOG4J必须大写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>Log4j的使用</p><ol><li>在要使用Log4j类中导入包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br></pre></td></tr></table></figure><ol start="2"><li>日志对象，参数为当前类的class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure><ol start="3"><li>日志级别 info、debug、error</li></ol></li></ol><h1 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h1><h2 id="7-1使用limit分页"><a href="#7-1使用limit分页" class="headerlink" title="7.1使用limit分页"></a>7.1使用limit分页</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> limitstartIndex,pageMax;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="number">0</span>,<span class="number">2</span>;  </span><br></pre></td></tr></table></figure><p>使用mybatis实现分页，核心就是使用sql</p><ol><li>接口</li><li>MapperXml</li><li>测试</li></ol><h2 id="7-2使用mybatis插件实现分页"><a href="#7-2使用mybatis插件实现分页" class="headerlink" title="7.2使用mybatis插件实现分页"></a>7.2使用mybatis插件实现分页</h2><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210106140128103.png" alt="image-20210106140128103" style="zoom:50%;" /><p><a href="https://pagehelper.github.io/">mybatis插件</a></p><h1 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h1><p>使用mybatis大多数使用配置文件，而是用其他的是使用注解的方式</p><h2 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h2><p>面向接口编程的根本原因就是为了<strong>解耦</strong>，是定义与实现的分离。</p><h2 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h2><p>使用注解对于简单的可以去写，但是对于有些繁杂的还是需要进行xml文件配置。</p><ol><li>注解在接口上的实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解就是简化开发的作用</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>需要在核心配置文件中绑定</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--之前是绑定配置文件，这里是进行绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.lgy.dao.userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><p>实现本质：反射</p><p>底层：动态代理</p><h2 id="8-3、基于注解的CRUD"><a href="#8-3、基于注解的CRUD" class="headerlink" title="8.3、基于注解的CRUD"></a>8.3、基于注解的CRUD</h2><ol><li>可以设置自动提交事务(可不做)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//true代表着自动提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解就是简化开发的作用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里本应该就一个参数id，但是由多个参数的时候一定要使用 @Param 注解，@Param 里面的id对应于sql语句里面的#&#123;id&#125;</span></span><br><span class="line">    <span class="meta">@Select(&quot;select *from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id,<span class="meta">@Param(&quot;String&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写测试类</li></ol><h1 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h1><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p><p>翻译：Lombok项目是一个Java库，它会自动插入您的编辑器和构建工具中，从而使您的Java更加生动有趣。永远不要再写另一个getter或equals方法，带有一个注释的您的类有一个全功能的生成器，自动化您的记录变量，等等。</p><p>说白了就是写bean更方便了。</p><ol><li><p>首先需要在idea里面进行插件的安装</p><p>preferences –&gt;plugins,进行搜索Lombok插件，然后选择进行安装。</p></li><li><p>在项目中导入Lombok的包，如果使用maven直接在maven仓库里面进行搜索。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>可以加注解进行使用</li></ol><p>可以使用的注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Getter and @Setter</span><br><span class="line">@FieldNameConstants</span><br><span class="line">@ToString</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor</span><br><span class="line">@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog</span><br><span class="line">@Data</span><br><span class="line">@Builder</span><br><span class="line">@SuperBuilder</span><br><span class="line">@Singular</span><br><span class="line">@Delegate</span><br><span class="line">@Value</span><br><span class="line">@Accessors</span><br><span class="line">@Wither</span><br><span class="line">@With</span><br><span class="line">@SneakyThrows</span><br><span class="line">@val</span><br><span class="line">@var</span><br><span class="line">experimental @var</span><br><span class="line">@UtilityClass</span><br><span class="line">Lombok config system</span><br><span class="line">Code inspections</span><br><span class="line">Refactoring actions (lombok and delombok)</span><br></pre></td></tr></table></figure><p>@Data : 生成无参构造，get、set、toString、hashcode、equals。</p><ol start="4"><li>举例子</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> </span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Grage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10、多对一"><a href="#10、多对一" class="headerlink" title="10、多对一"></a>10、多对一</h1><p>举例：一个老师对应多个学生，多个学生对应（关联）一个老师。</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210115115059452.png" alt="image-20210115115059452" style="zoom: 50%;" /><p>关于XXXMapper.xml文件模版：</p><p>只需要改动是把mybatis 的核心配置文件，把configuration换为mapper，然后把config换为mapper即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XXXMapper.xml文件模版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-1、测试环境搭建"><a href="#10-1、测试环境搭建" class="headerlink" title="10.1、测试环境搭建"></a>10.1、测试环境搭建</h2><ol><li>导入Lombok</li><li>创建实体类Teacher，Student</li><li>建立Mapper接口</li><li>建立Mapper.xml文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件</li><li>测试查询是否成功</li></ol><h2 id="10-2、查询处理"><a href="#10-2、查询处理" class="headerlink" title="10.2、查询处理"></a>10.2、查询处理</h2><h3 id="12-2-1、按照嵌套查询处理"><a href="#12-2-1、按照嵌套查询处理" class="headerlink" title="12.2.1、按照嵌套查询处理"></a>12.2.1、按照嵌套查询处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lgy.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;select id=&quot;getStudent&quot; resultType=&quot;com.lgy.pojo.Student&quot;&gt;--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--select * from student--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">     select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lgy.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property实体 column 对应数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性 进行单独处理--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对象的时候使用--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;association property=&quot;&quot;&gt;&lt;/association&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--集合的时候使用--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;collection property=&quot;&quot;&gt;&lt;/collection&gt;        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--javaType 对应的 Teacher 类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.lgy.pojo.Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lgy.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-2-2、按照结果查询处理"><a href="#10-2-2、按照结果查询处理" class="headerlink" title="10.2.2、按照结果查询处理"></a>10.2.2、按照结果查询处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果查询处理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">      select s.id sid,s.name sname ,t.name tname from student s, teacher t  where s.tid = t.id</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lgy.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.lgy.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="11、一对多"><a href="#11、一对多" class="headerlink" title="11、一对多"></a>11、一对多</h1><ul><li>一个老师教多个学生，对于老师而言，是1对多</li></ul><h2 id="11-1、查询处理"><a href="#11-1、查询处理" class="headerlink" title="11.1、查询处理"></a>11.1、查询处理</h2><h3 id="11-1-1、按照结果查询处理"><a href="#11-1-1、按照结果查询处理" class="headerlink" title="11.1.1、按照结果查询处理"></a>11.1.1、按照结果查询处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;st&quot;</span>&gt;</span></span><br><span class="line">       select s.id sid, s.name sname, t.name tname,t.id tid from</span><br><span class="line">       student s, teacher t where s.tid=t.id and t.id = #&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;st&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lgy.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--集合用collection--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--javaType 是指定属性的类型，所以这里不行写com.lgy.pojo.Student,因为是集合，这里使用ofType--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.lgy.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-1-2、按照查询嵌套处理"><a href="#11-1-2、按照查询嵌套处理" class="headerlink" title="11.1.2、按照查询嵌套处理"></a>11.1.2、按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子查询--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line">       select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lgy.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span>  <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.lgy.pojo.Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lgy.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">       select  *from student where tid = #&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>javaType 用来指定实体类中的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，范型中的约束类型</li></ul><h1 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h1><p>什么是动态sql：<strong>动态sql就是指根据不同的条件生成不同的sql语句</strong>    见官网</p><h1 id="13、缓存（了解）"><a href="#13、缓存（了解）" class="headerlink" title="13、缓存（了解）"></a>13、缓存（了解）</h1><h2 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h2><p>什么是缓存【Cache】：</p><ul><li>缓存是存在内存中的临时数据</li><li>将用户经常用的数据存放在缓存（内存）中，用户去查询数据就不用从磁盘上进行查询，而是直接在缓存中进行查询。</li></ul><p>为什么使用缓存：</p><ul><li>能够提高查询速度，节省时间，能解决高并发系统的性能问题。</li></ul><p>什么样的数据能够使用缓存：</p><ul><li>经常查询，并且经常使用的数据。</li><li>不经常修改。</li></ul><h2 id="13-2-Mybatis缓存"><a href="#13-2-Mybatis缓存" class="headerlink" title="13.2 Mybatis缓存"></a>13.2 Mybatis缓存</h2>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的工具</title>
      <link href="2021/01/08/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
      <url>2021/01/08/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<center>其他的路都不会获取真正的自由，唯有自身这条路没有堵死，所以...全靠自己。</center><a id="more"></a><ol><li>好用的链接：<a href="https://www.guoxingjun.com/">小蜜蜂工具</a></li></ol><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210108115439868.png" alt="image-20210108115439868"></p><ol start="2"><li>比较好用的电子书下载网站<a href="https://www.jiumodiary.com/">鸠摩搜书</a></li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210109124906150.png" alt="image-20210109124906150" style="zoom:50%;" /><ol start="3"><li>在线画图软件：<a href="https://www.processon.com/">Process On</a></li></ol><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210115093826228.png" alt="image-20210115093826228"></p><ol start="4"><li>可以下载音乐的网站</li></ol><p><a href="http://www.333ttt.com/">http://www.333ttt.com/</a></p><ol start="5"><li><a href="https://whoer.net/zh">检查自己的ip地址和DNS地址</a></li></ol><p>判断翻墙的信息</p><ol start="6"><li>激活Jetbrains全家桶网站vrg123.com</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用于图的半监督学习的图随机神经网络</title>
      <link href="2020/11/27/%E7%94%A8%E4%BA%8E%E5%9B%BE%E7%9A%84%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9B%BE%E9%9A%8F%E6%9C%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C--%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/27/%E7%94%A8%E4%BA%8E%E5%9B%BE%E7%9A%84%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9B%BE%E9%9A%8F%E6%9C%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C--%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center>总体来说，没有什么迫在眉睫一定要得到的东西。这一路上也不曾感觉有所失去。所以，我是一个幸福的人!</center><a id="more"></a><h2 id="题目：用于图的半监督学习的图随机神经网络"><a href="#题目：用于图的半监督学习的图随机神经网络" class="headerlink" title="题目：用于图的半监督学习的图随机神经网络"></a>题目：用于图的半监督学习的图随机神经网络</h2><p><strong>摘要</strong>：研究了图的半监督学习问题，然而GNN存在许多缺点，过度平滑，鲁棒性差（也就是不稳定）标记节点稀缺时泛化能力一般，本论文提出了一个GRAND框架，能有效解决这些问题。</p><p>怎么解决：</p><ol><li>设计随机传播策略来实现图数据的扩展</li><li>然后利用一致性正则化来优化未标记节点在不同数据扩展中的预测一致性。</li></ol><p>结果：在半监督分类上面，此方法比GNN好。</p><p><img src="https://gitee.com/dlutlgy/window_typora/raw/master/images/image-20210315191146422.png" alt="image-20210315191146422"></p><p>GNN：确定性传播，GRAND：不确定性传播</p><p><strong>介绍</strong>：本篇论文的目的是”能有效预测一个给定图中只有一小部分标记节点的未标记节点的类别“</p><p>设计思想：思想是设计一种传播策略来随机生成多个图，进行数据扩充，在此基础上提出一种一致性正则化训练来提高半监督设置下的泛化能力。</p><p>提的问题</p><p>关于激活函数：</p><p>什么是激活函数，有哪几种激活函数，他们的作用是什么？使用不同的激活函数有什么样的效果？</p><ol><li><p>激活函数的引入是为了增加神经网络模型的非线性，没有激活函数每层就相当于矩阵相乘。每一层输出都是上层的输入的线性函数，无论神经网络多少层，输出都是输入的线性组合，就是最原始的感知机</p></li><li><p>加入激活函数，给神经元引入非线性因素，神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p></li></ol><p>ReLU函数，还有sigmod激活函数、tanh激活函数，除了ReLU激活函数，还有其变形ELU函数和PReLU函数。<a href="https://blog.csdn.net/tian_panda/article/details/82113203?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">链接</a></p><p>文中使用ReLU激活函数的作用是：1. 克服梯度消失的问题 2. 能加快训练速度。</p><h2 id="题目：推荐系统的知识图卷积网络"><a href="#题目：推荐系统的知识图卷积网络" class="headerlink" title="题目：推荐系统的知识图卷积网络"></a>题目：推荐系统的知识图卷积网络</h2><p>一般推荐系统：基于协同过滤的，缺点就是稀疏性与冷启动问题</p><p>而知识图卷积网络：是挖掘相关属性来捕获实体间的隐藏关系。</p><p>目的：是为了发现知识图谱的高阶结构信息和语意信息</p><p>思想：我们从知识图谱中每个实体的邻居那里取样，作为他们能够接受的属性，然后在计算给定实体的表示时，将邻居信息与偏差结合起来。</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20210316093255041.png" alt="image-20210316093255041"></p><p>KGCN的目的：是为了捕获高阶结构的邻近性</p><p>之所以去掉一部分邻居，是因为显示生活中，关系可能太多，这里是直接取半。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-143-重排链表</title>
      <link href="2020/10/20/LeetCode-143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
      <url>2020/10/20/LeetCode-143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，<br>将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><a id="more"></a><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</span><br></pre></td></tr></table></figure><p>实例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>如果是直接去把L<del>n</del>取出来添加到L<del>1</del>下，不仅第一次需要遍历整个链表，第二次还需要遍历，很麻烦，很浪费时间。</p><p>我们不如直接把整个链表遍历一遍，放在List里面（跟数组一样），然后定义两个整数，一个在前面，一个在后面，把后面的数添加到前面的数的后面，然后前面的加，后面的减。直到最后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存到 list 中去</span></span><br><span class="line">    List&lt;ListNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        list.add(head);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//头尾指针依次取元素</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = list.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        list.get(i).next = list.get(j);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="comment">//偶数个节点的情况，会提前相遇</span></span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.get(j).next = list.get(i);</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    list.get(i).next = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(N)<em>O</em>(<em>N</em>)，其中 N<em>N</em> 是链表中的节点数。</li><li>空间复杂度：O(N)<em>O</em>(<em>N</em>)，其中 N<em>N</em> 是链表中的节点数。主要为线性表的开销。</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebStorm常用快捷键</title>
      <link href="2020/10/17/WebStorm%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/10/17/WebStorm%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<center>一天 24 小时。学习 24 小时，休息 24 小时。</center><a id="more"></a><p>file —&gt;Setting—&gt;Keymap  例如：搜索duplicate即可找到关于复制的快捷键设置，双击设置。</p><table><thead><tr><th>操作</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>复制当前行并粘贴到下一行（windows）</td><td>Ctrl+D</td><td></td></tr><tr><td>快速上移一行</td><td>shift+Alt+上</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebStorm </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac安装brew</title>
      <link href="2020/10/15/mac%E5%AE%89%E8%A3%85brew/"/>
      <url>2020/10/15/mac%E5%AE%89%E8%A3%85brew/</url>
      
        <content type="html"><![CDATA[<center>一人为轴，一人悬空～</center><a id="more"></a><p>mac上执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span></span><br></pre></td></tr></table></figure><p>就完美解决～</p><p>以下是我的安装过程～</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">Last login: Thu Oct <span class="number">15</span> <span class="number">14</span>:<span class="number">17</span>:<span class="number">49</span> on ttys000</span><br><span class="line">LGYdeMacBook-Pro:~ lvguangyue$ brew search wget</span><br><span class="line">-bash: brew: command not found</span><br><span class="line">LGYdeMacBook-Pro:~ lvguangyue$ ruby -e “$（curl -fsSL /homebrew/go“</span><br><span class="line">ruby: invalid option -f  (-h will show valid options) (RuntimeError)</span><br><span class="line">LGYdeMacBook-Pro:~ lvguangyue$ /bin/zsh -c <span class="string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span></span><br><span class="line"></span><br><span class="line">              开始执行Brew自动安装程序</span><br><span class="line">             [cunkai.wang@foxmail.com]</span><br><span class="line">           [<span class="number">2020</span><span class="number">-10</span><span class="number">-15</span> <span class="number">14</span>:<span class="number">22</span>:<span class="number">57</span>][<span class="number">10.13</span>]</span><br><span class="line">       https:<span class="comment">//zhuanlan.zhihu.com/p/111014448</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请选择一个下载镜像，例如中科大，输入<span class="number">1</span>回车。</span><br><span class="line">源有时候不稳定，如果git克隆报错重新运行脚本选择源。cask非必须，有部分人需要。</span><br><span class="line"><span class="number">1</span>、中科大下载源 <span class="number">2</span>、清华大学下载源 <span class="number">3</span>、北京外国语大学下载源 <span class="number">4</span>、腾讯下载源（不显示下载进度） <span class="number">5</span>、阿里巴巴下载源(缺少cask源)</span><br><span class="line">请输入序号: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  你选择了中国科学技术大学下载源</span><br><span class="line"></span><br><span class="line">！！！此脚本将要删除之前的brew(包括它下载的软件)，请自行备份。</span><br><span class="line">-&gt;是否现在开始执行脚本（N/Y）y</span><br><span class="line"></span><br><span class="line">--&gt; 脚本开始执行</span><br><span class="line">==&gt; 通过命令删除之前的brew、创建一个新的Homebrew文件夹</span><br><span class="line">(设置开机密码：在左上角苹果图标-&gt;系统偏好设置-&gt;<span class="string">&quot;用户与群组&quot;</span>-&gt;更改密码)</span><br><span class="line">(如果提示This incident will be reported. 在<span class="string">&quot;用户与群组&quot;</span>中查看是否管理员)</span><br><span class="line">请输入开机密码，输入过程不显示，输入完后回车</span><br><span class="line">Password:</span><br><span class="line">开始执行</span><br><span class="line">-&gt; 创建文件夹 /usr/local/Homebrew</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/Caskroom</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/Cellar</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/<span class="keyword">var</span>/homebrew</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/etc</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/sbin</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/opt</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/share/zsh</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/share/zsh/site-functions</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/<span class="keyword">var</span>/homebrew/linked</span><br><span class="line">此步骤成功</span><br><span class="line">-&gt; 创建文件夹 /usr/local/Frameworks</span><br><span class="line">此步骤成功</span><br><span class="line">git version <span class="number">2.23</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">下载速度觉得慢可以ctrl+c或control+c重新运行脚本选择下载源</span><br><span class="line">==&gt; 克隆Homebrew基本文件(<span class="number">32</span>M+)</span><br><span class="line"></span><br><span class="line">未发现Git代理（属于正常状态）</span><br><span class="line">Cloning into <span class="string">&#x27;/usr/local/Homebrew&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">164328</span>, done.</span><br><span class="line">remote: Total <span class="number">164328</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">164328</span>/<span class="number">164328</span>), <span class="number">40.57</span> MiB | <span class="number">2.42</span> MiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">122161</span>/<span class="number">122161</span>), done.</span><br><span class="line">此步骤成功</span><br><span class="line">==&gt; 创建brew的替身</span><br><span class="line">此步骤成功</span><br><span class="line">==&gt; 克隆Homebrew Core(<span class="number">224</span>M+) </span><br><span class="line">此处如果显示Password表示需要再次输入开机密码，输入完后回车</span><br><span class="line">Cloning into <span class="string">&#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">806194</span>, done.</span><br><span class="line">remote: Total <span class="number">806194</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">806194</span>/<span class="number">806194</span>), <span class="number">320.67</span> MiB | <span class="number">2.25</span> MiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">541877</span>/<span class="number">541877</span>), done.</span><br><span class="line">Updating files: <span class="number">100</span>% (<span class="number">5552</span>/<span class="number">5552</span>), done.</span><br><span class="line">此步骤成功</span><br><span class="line">==&gt; 克隆Homebrew Cask(<span class="number">248</span>M+) 类似AppStore </span><br><span class="line">此处如果显示Password表示需要再次输入开机密码，输入完后回车</span><br><span class="line">Cloning into <span class="string">&#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">485405</span>, done.</span><br><span class="line">remote: Total <span class="number">485405</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)B | <span class="number">2.42</span> MiB/s</span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">485405</span>/<span class="number">485405</span>), <span class="number">220.07</span> MiB | <span class="number">2.23</span> MiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">345258</span>/<span class="number">345258</span>), done.</span><br><span class="line">此步骤成功</span><br><span class="line">==&gt; 配置国内镜像源HOMEBREW BOTTLE</span><br><span class="line">此步骤成功</span><br><span class="line"></span><br><span class="line">==&gt; 安装完成，brew版本</span><br><span class="line"></span><br><span class="line">检测到你不是最新系统，会有一些报错，请稍等Ruby下载安装;</span><br><span class="line">    </span><br><span class="line">brew -v</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles-portable-ruby/portable-ruby-2.6.3_2.yosemite.bottle.tar.gz</span></span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring portable-ruby<span class="number">-2.6</span><span class="number">.3</span>_2.yosemite.bottle.tar.gz</span><br><span class="line">Homebrew <span class="number">2.5</span><span class="number">.6</span><span class="number">-41</span>-g8aa6502-dirty</span><br><span class="line">Homebrew/homebrew-core (git revision a7549a; last commit <span class="number">2020</span><span class="number">-10</span><span class="number">-15</span>)</span><br><span class="line">Homebrew/homebrew-cask (git revision <span class="number">499</span>c7; last commit <span class="number">2020</span><span class="number">-10</span><span class="number">-15</span>)</span><br><span class="line">Brew前期配置成功</span><br><span class="line"></span><br><span class="line">==&gt; brew update</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew has enabled anonymous aggregate formula and cask analytics.</span><br><span class="line">Read the analytics documentation (and how to opt-out) here:</span><br><span class="line">  https:<span class="comment">//docs.brew.sh/Analytics</span></span><br><span class="line">No analytics have been recorded yet (or will be during <span class="built_in">this</span> <span class="string">`brew`</span> run).</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:</span><br><span class="line">  https:<span class="comment">//github.com/Homebrew/brew#donations</span></span><br><span class="line">Already up-to-date.</span><br><span class="line"></span><br><span class="line">        上一句如果提示Already up-to-date表示成功</span><br><span class="line">            Brew自动安装程序运行完成</span><br><span class="line">              国内地址已经配置完成</span><br><span class="line"></span><br><span class="line">                初步介绍几个brew命令</span><br><span class="line"></span><br><span class="line">        本地软件库列表：brew ls</span><br><span class="line">        查找软件：brew search google（其中google替换为要查找的软件关键字）</span><br><span class="line">        查看brew版本：brew -v  更新brew版本：brew update</span><br><span class="line"></span><br><span class="line">现在可以输入命令open ~<span class="regexp">/.zshrc -e 或者 open ~/</span>.bash_profile -e 整理一下重复的语句(运行 echo $SHELL 可以查看应该打开那一个文件修改)</span><br><span class="line"></span><br><span class="line">        https:<span class="comment">//zhuanlan.zhihu.com/p/111014448  欢迎来给点个赞</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax学习笔记</title>
      <link href="2020/10/14/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/14/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center>文案</center><center>白天隐藏在入夜的灯，风躺进熟睡人的呼吸</center><center>芦苇是地底的云，你推窗望过来，瞳孔是距我最近的星🌟</center><a id="more"></a><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201014162325571.png" alt="image-20201014162325571"></p><p>完成高功能：局部刷新，但是不可以后退。</p><p>使用XMLHttpRequest对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr = <span class="keyword">new</span> XMLHttpReuqest();</span><br></pre></td></tr></table></figure><p>xhr拥有一些属性方法，</p><h3 id="什么是-Ajax？"><a href="#什么是-Ajax？" class="headerlink" title="什么是 Ajax？"></a>什么是 Ajax？</h3><p>不用刷新页面，但可以和服务端进行通信的方式，使用Ajax的主要方式是XMLHttpRequest对象</p><h3 id="Ajax-传送数据的3种方式"><a href="#Ajax-传送数据的3种方式" class="headerlink" title="Ajax 传送数据的3种方式"></a>Ajax 传送数据的3种方式</h3><p>(1 )xml：笨重，解析困难，但是 xml 是通用的数据交换模式。</p><p>(2) html：不需要解析直接放到文档中，若尽更新一部分数据，但传送数据不是很方便，且HTML代码需要拼装完成。</p><p>(3) JSON：小巧，有面向对象的特性，且第三方的 jar 包可以把 java 对象或集合转化为 JSON 字符串（用的最多）</p><h3 id="使用-jQuery-完成-AJAX-操作"><a href="#使用-jQuery-完成-AJAX-操作" class="headerlink" title="使用 jQuery 完成 AJAX 操作"></a>使用 jQuery 完成 AJAX 操作</h3><p>(1) load方法：可以用于 HTML 文档的元素节点，把结果直接加为对应的子元素，通常而言，load 方法加载后的数据是一个 HTML 片段，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = ...</span><br><span class="line"></span><br><span class="line">Var url = ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> args = &#123;<span class="attr">key</span>:value,...&#125;</span><br><span class="line"></span><br><span class="line">$obj.load (url,args);</span><br></pre></td></tr></table></figure><p>(2). </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get ,  $post, $.getJSON: </span><br></pre></td></tr></table></figure><p>上面这3个方法更加灵活，除去使用 load 方法的情况， 大部分时候都使用这3个方法。</p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好句子</title>
      <link href="2020/10/13/%E5%A5%BD%E5%8F%A5%E5%AD%90/"/>
      <url>2020/10/13/%E5%A5%BD%E5%8F%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<center>总有一些句子，让我们理解很多东西</center><a id="more"></a><ol><li>我们，大多数，普通人，都是时代大潮下的游泳者。有人遇缓流，有人遇漩涡，有人游得好点，有人游得差点。有一技傍身，都不至于淹死。但好也罢，坏也罢，谁也抵抗不过潮水中的一波巨浪</li></ol>]]></content>
      
      
      <categories>
          
          <category> LQBZ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node学习笔记（1）</title>
      <link href="2020/10/12/Node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>2020/10/12/Node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<center>人如果活着不学习，那么跟死了有什么区别～</center><a id="more"></a><p>1.命令行窗口(小黑屏)、CMD窗口、终端、shell<br>    - 开始菜单 –&gt; 运行 –&gt; CMD –&gt; 回车<br>    - 常用的指令：<br>        dir 列出当前目录下的所有文件<br>        cd 目录名 进入到指定的目录<br>        md 目录名 创建一个文件夹<br>        rd 目录名 删除一个文件夹    </p><pre><code>- 目录    . 表示当前目录    .. 表示上一级目录- 环境变量（windows系统中变量）        path        C:\work\jdk\jdk1.7.0_75/bin;        %CATALINA_HOME%/bin;        C:\work\soft\tools\AppServ\Apache24\bin;        C:\work\soft\tools\AppServ\php5;        C:\Users\lilichao\AppData\Local\Programs\Fiddler;        C:\work\environment\Egret\Egret Wing 3\bin;        C:\Users\lilichao\AppData\Roaming\npm;        C:\Program Files\MongoDB\Server\3.2\bin;        C:\Users\lilichao\Desktop\hello- 当我们在命令行窗口打开一个文件，或调用一个程序时，        系统会首先在当前目录下寻找文件程序，如果找到了则直接打开        如果没有找到则会依次到环境变量path的路径中寻找，直到找到为止        如果没找到则报错- 所以我们可以将一些经常需要访问的程序和文件的路径添加到path中，        这样我们就可以在任意位置来访问这些文件和程序了</code></pre><p>I/O (Input/Output)<br>    - I/O操作指的是对磁盘的读写操作</p><p>Node<br>    - Node是对ES标准一个实现，Node也是一个JS引擎<br>    - 通过Node可以使js代码在服务器端执行<br>    - Node仅仅对ES标准进行了实现，所以在Node中不包含DOM 和 BOM<br>    - Node中可以使用所有的内建对象<br>        String Number Boolean Math Date RegExp Function Object Array<br>        而BOM和DOM都不能使用<br>            但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）</p><pre><code>- Node可以在后台来编写服务器    Node编写服务器都是单线程的服务器    - 进程        - 进程就是一个一个的工作计划（工厂中的车间）    - 线程        - 线程是计算机最小的运算单位（工厂中的工人）            线程是干活的- 传统的服务器都是多线程的    - 每进来一个请求，就创建一个线程去处理请求- Node的服务器单线程的    - Node处理请求时是单线程，但是在后台拥有一个I/O线程池</code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery复习（3）</title>
      <link href="2020/10/10/jQuery%E5%A4%8D%E4%B9%A0%EF%BC%883%EF%BC%89/"/>
      <url>2020/10/10/jQuery%E5%A4%8D%E4%B9%A0%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<center>继续学习~</center><a id="more"></a><ol><li>关于新添加的元素没有被绑定事件，解决方法：给要绑定的元素的父元素绑定（事件委托）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问题：新添加的元素，点击以后不会变红</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;<span class="number">11111</span>&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;<span class="number">1111111</span>&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;<span class="number">111111111</span>&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;<span class="number">11111111111</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;添加新的li&lt;/button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;ul&gt;li&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;ul&#x27;</span>).append(<span class="string">&#x27;&lt;li&gt;新增的li....&lt;/li&gt;&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>事件委托(委派/代理):<br>将多个子元素(li)的事件监听委托给父辈元素(ul)处理<br>监听回调是加在了父辈元素上<br>当操作任何一个子元素(li)时, 事件会冒泡到父辈元素(ul)<br>父辈元素不会直接处理事件, 而是根据event.target得到发生事件的子元素(li), 通过这个子元素调用事件回调函数</p><p>事件委托的2方:<br>委托方: 业主  li<br>被委托方: 中介  ul</p><p>使用事件委托的好处<br>添加新的子元素, 自动有事件响应处理<br>减少事件监听的数量: n==&gt;1</p><p>jQuery的事件委托API<br>设置事件委托: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(parentSelector).delegate(childrenSelector, eventName, callback)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).delegate(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">   <span class="built_in">this</span>.style.background = <span class="string">&#x27;red&#x27;</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>移除事件委托: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(parentSelector).undelegate(eventName)</span><br></pre></td></tr></table></figure></li><li><p>淡入淡出: 不断改变元素的透明度(opacity)来实现的<br>fadeIn(): 带动画的显示<br>fadeOut(): 带动画隐藏<br>fadeToggle(): 带动画切换显示/隐藏</p><p>fadeIn()无参数，效果会立刻出现</p><p>fadeIn(‘slow’)字符串参数</p><p>fadeIn(3000)   3秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn1&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//$div1.fadeOut()</span></span><br><span class="line">    <span class="comment">//$div1.fadeOut(&#x27;slow&#x27;)</span></span><br><span class="line">   $div1.fadeOut(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;动画完成了!!!&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome上的Ghelper插件</title>
      <link href="2020/10/09/Ghelper%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>2020/10/09/Ghelper%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<center>能帮助我们打卡谷歌学术的插件～～～</center><a id="more"></a><p>我们时不时需要查阅资料，但是像在百度上搜不到，资料也比较少，这是我们就可能要“FQ”，但是还需要买服务器，很麻烦，这里我推荐一个插件，它能够帮我们进行查阅一些资料，像谷歌学术这类的网站能够快速进去</p><p>下载网址：<a href="http://googlehelper.net/">点这里</a></p><p>下载后，解压，然后打开谷歌浏览器，</p><p>点击：</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201009091724613.png" alt="image-20201009091724613" style="zoom:67%;" /><p>然后依次点击 更过工具–&gt;扩展程序  或者直接在chrome上输入：chrome://extensions/</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201009091850917.png" alt="image-20201009091850917" style="zoom:67%;" /><p>然后按下图点击啊：</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201009092427481.png" alt="image-20201009092427481" style="zoom:67%;" /><p>把下载后解压的ghelper_source文件夹就可以了。</p><p>这时候就能上谷歌学术查阅资料辽～～～</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery复习（2）</title>
      <link href="2020/10/08/jQuery%E5%A4%8D%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
      <url>2020/10/08/jQuery%E5%A4%8D%E4%B9%A0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<center>赶快来学习～～</center><a id="more"></a><ol><li><p>选择p标签的第一个元素，并且把它的样式设置为红色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p:first&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>，<span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>选的是第二个p元素，这里设置了样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p:eq(1)&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>内容尺寸<br>  height(): height<br>  width(): width<br>内部尺寸<br>  innerHeight(): height+padding<br>  innerWidth(): width+padding<br>外部尺寸<br>  outerHeight(false/true): height+padding+border  如果是true, 加上margin<br>  outerWidth(false/true): width+padding+border 如果是true, 加上margin</p></li><li><p>在jQuery对象中的元素对象数组中过滤出一部分元素来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first()</span><br><span class="line">last()</span><br><span class="line">eq(index|-index)</span><br><span class="line">filter(selector)</span><br><span class="line">not(selector)</span><br><span class="line">has(selector)</span><br></pre></td></tr></table></figure></li><li><p>在已经匹配出的元素集合中根据选择器查找孩子/父母/兄弟标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">children(): 子标签中找</span><br><span class="line">find() : 后代标签中找</span><br><span class="line">parent() : 父标签</span><br><span class="line">prevAll() : 前面所有的兄弟标签</span><br><span class="line">nextAll() : 后面所有的兄弟标签</span><br><span class="line">siblings() : 前后所有的兄弟标签</span><br></pre></td></tr></table></figure></li><li><p>添加/替换元素<br>  append(content)</p><pre><code>向当前匹配的所有元素内部的最后插入指定内容</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> $ul1 = $(<span class="string">&#x27;#ul1&#x27;</span>)</span><br><span class="line"> <span class="comment">//$ul1.append(&#x27;&lt;span&gt;append()添加的span&lt;/span&gt;&#x27;)</span></span><br><span class="line"> $(<span class="string">&#x27;&lt;span&gt;appendTo()添加的span&lt;/span&gt;&#x27;</span>).appendTo($ul1)</span><br><span class="line"><span class="comment">//这两种方法都可以</span></span><br></pre></td></tr></table></figure><p> prepend(content)</p><pre><code>向当前匹配的所有元素内部的最前面插入指定内容</code></pre><p> before(content)</p><pre><code>将指定内容插入到当前所有匹配元素的前面</code></pre><p> after(content)</p><pre><code>将指定内容插入到当前所有匹配元素的后面替换节点</code></pre><p>replaceWith(content)</p><pre><code>用指定内容替换所有匹配的标签删除节点</code></pre><p>删除元素<br>empty()</p><pre><code>删除所有匹配元素的子元素</code></pre><p>remove()</p><pre><code>删除所有匹配的元素</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#ul2&gt;li&#x27;</span>).remove() <span class="comment">// 移除id为u12下的所有li元素</span></span><br></pre></td></tr></table></figure></li><li><p>事件绑定(2种)：</p><ol><li><p>eventName(function(){})</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#div&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>on(eventName, funcion(){})</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#div&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>优缺点:<br>   eventName: 编码方便, 但只能加一个监听, 且有的事件监听不支持<br>   on: 编码不方便, 可以添加多个监听, 且更通用</p></li><li><p>区别mouseover与mouseenter</p><p>mouseover: 在移入子元素时也会触发, 对应mouseout</p><p>mouseenter: 只在移入当前元素时才触发, 对应mouseleave</p><p>hover()使用的就是mouseenter()和mouseleave()</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雷哥诗句汇总</title>
      <link href="2020/10/08/%E9%9B%B7%E5%93%A5%E8%AF%97%E5%8F%A5%E6%B1%87%E6%80%BB/"/>
      <url>2020/10/08/%E9%9B%B7%E5%93%A5%E8%AF%97%E5%8F%A5%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<center>为了方便记住我大哥，特此开辟一个专栏，进行独家记忆。保证绝对有特色，绝对有深度。</center><a id="more"></a><ol><li>雷哥说：对女生过敏</li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/1E2139FC8D33A4A71DD91A1913993118.png" alt="1E2139FC8D33A4A71DD91A1913993118" style="zoom:67%;" /><ol start="2"><li>若为爱情故，一切皆可抛。</li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/9F67701569CB9B2FE4677C86983093B4.png" alt="9F67701569CB9B2FE4677C86983093B4" style="zoom:67%;" /><ol start="3"><li>两情若是长久时，又岂在朝朝暮暮。</li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/29B887625C7B9E7424162FACC5110DE0.png" alt="29B887625C7B9E7424162FACC5110DE0" style="zoom:67%;" /><ol start="4"><li>为人性癖耽佳句，语不惊人死不休。</li></ol><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/AC0E789655CD903CE9A4A002AE199242.png" alt="AC0E789655CD903CE9A4A002AE199242" style="zoom:67%;" /><ol start="5"><li><p>Love is confusing and life hard.</p></li><li><p>You have to forgive and start to heal.</p></li><li><p>车到山前必有路，船到桥头自然直。</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201010104408915.png" alt="image-20201010104408915"  /></li></ol><p>8.</p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201010181052953.png" alt="image-20201010181052953" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> LQBZ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-344-反转字符串</title>
      <link href="2020/10/08/LeetCode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2020/10/08/LeetCode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><a id="more"></a> <p>示例 1：</p><p>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]<br>示例 2：</p><p>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>; left &lt; right; ++left, --right) &#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-string">https://leetcode-cn.com/problems/reverse-string</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="2020/10/07/JDBC/"/>
      <url>2020/10/07/JDBC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery复习（1）</title>
      <link href="2020/10/07/jQuery%E5%A4%8D%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
      <url>2020/10/07/jQuery%E5%A4%8D%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<center>开始第一天复习jQuery</center><a id="more"></a><p>####基础知识</p><ol><li><p>$ 或 jQuery是一个函数，既是函数也是对象。</p></li><li><p>$( )返回的对象就是jQuery对象。</p></li><li><p>文档夹在完成才执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//绑定文件加载完成后的监听</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>引入jQuery后，当函数用：$(***)</p><p>当对象用：$.(***)</p></li><li><p>作为一般函数调用: $(param)<br>  1). 参数为函数 : 当DOM加载完成后，执行此回调函数<br>  2). 参数为选择器字符串: 查找所有匹配的标签, 并将它们封装成jQuery对象<br>  3). 参数为DOM对象: 将dom对象封装成jQuery对象<br>  4). 参数为html标签字符串 (用得少): 创建标签对象并封装成jQuery对象</p><p>作为对象使用: $.xxx()</p><p>1). $.each() : 隐式遍历数组</p><p>2). $.trim() : 去除两端的空格</p></li><li><p>jQuery对象是一个包含所有匹配的任意多个dom元素的伪数组对象，所谓的伪数组对象就是只拥有数组的属性，例如长度属性、数值下标属性，但是没有数组的方法。</p><p>基本行为</p><ul><li><p>size()/length: 包含的DOM元素个数</p></li><li><p>[index]/get(index): 得到对应位置的DOM元素</p></li><li><p>each(): 遍历包含的所有DOM元素</p></li><li><p>index(): 得到在所在兄弟元素中的下标</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $btn = $(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log($btn.size())</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ol><li><p>是什么?</p><ul><li>有特定格式的字符串</li></ul></li><li><p>作用</p><ul><li>用来查找特定页面元素</li></ul></li><li><p>基本选择器</p><p>​        ‘#’id : id选择器</p><ul><li>element : 元素选择器</li><li>.class : 属性选择器</li><li>*: 任意标签</li><li>selector1,selector2,selectorN : 取多个选择器的并集(组合选择器)</li><li>selector1selector2selectorN : 取多个选择器的交集(相交选择器)</li></ul></li></ol><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><p>层次选择器: 查找子元素, 后代元素, 兄弟元素的选择器</p><ol><li><p>ancestor descendant<br>  在给定的祖先元素下匹配所有的后代元素</p></li><li><p>parent&gt;child<br>  在给定的父元素下匹配所有的子元素</p></li><li><p>prev+next<br>匹配所有紧接在 prev 元素后的 next 元素</p></li><li><p>prev~siblings<br>匹配 prev 元素之后的所有 siblings 元素<br>–&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//1. 选中ul下所有的的span</span></span><br><span class="line">$(<span class="string">&#x27;ul span&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. 选中ul下所有的子元素span</span></span><br><span class="line">$(<span class="string">&#x27;ul&gt;span&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 选中class为box的下一个li</span></span><br><span class="line">$(<span class="string">&#x27;.box+li&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4. 选中ul下的class为box的元素后面的所有兄弟元素</span></span><br><span class="line">$(<span class="string">&#x27;ul .box~*&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><p>理解：在原有的选择器上进行进一步筛选</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 选择第一个div</span></span><br><span class="line"><span class="comment">// $(&#x27;div:first&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 选择最后一个class为box的元素</span></span><br><span class="line"><span class="comment">//$(&#x27;.box:last&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 选择所有class属性不为box的div</span></span><br><span class="line"><span class="comment">// $(&#x27;div:not(.box)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)  //没有class属性也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 选择第二个和第三个li元素</span></span><br><span class="line"><span class="comment">// $(&#x27;li:gt(0):lt(2)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;) // 多个过滤选择器不是同时执行, 而是依次</span></span><br><span class="line"><span class="comment">//$(&#x27;li:lt(3):gt(0)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 选择内容为BBBBB的li</span></span><br><span class="line"><span class="comment">// $(&#x27;li:contains(&quot;BBBBB&quot;)&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 选择隐藏的li</span></span><br><span class="line"><span class="comment">//console.log($(&#x27;li:hidden&#x27;).length, $(&#x27;li:hidden&#x27;)[0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 选择有title属性的li元素</span></span><br><span class="line"><span class="comment">// $(&#x27;li[title]&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//8. 选择所有属性title为hello的li元素</span></span><br><span class="line"><span class="comment">//$(&#x27;li[title=&quot;hello&quot;]&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><p>具体看相关文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input  type=<span class="string">&quot;text&quot;</span>    /&gt;  </span><br><span class="line">    &lt;input type=<span class="string">&quot;radio&quot;</span>  /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;:text&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h4><ol><li><p>$.each(): 遍历数组或对象中的数据</p></li><li><p>$.trim(): 去除字符串两边的空格</p></li><li><p>$ .type(obj): 得到数据的类型</p></li><li><p>$.isArray(obj): 判断是否是数组</p></li><li><p>$.isFunction(obj): 判断是否是函数</p></li><li><p>$.parseJSON(json) : 解析json字符串转换为js对象/数组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora常用命令</title>
      <link href="2020/10/07/typora%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2020/10/07/typora%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>​                先把用到的命令总结一下，之后遇见新的会继续维护此文档。</p><a id="more"></a><h2 id="Typora-的快捷键"><a href="#Typora-的快捷键" class="headerlink" title="Typora 的快捷键"></a>Typora 的快捷键</h2><table><thead><tr><th align="center">操作</th><th align="center">快捷键</th><th>备注</th></tr></thead><tbody><tr><td align="center">插入表格</td><td align="center">option+command+t</td><td></td></tr><tr><td align="center">代码块</td><td align="center">option+command+c 或者```</td><td></td></tr><tr><td align="center">最大标题</td><td align="center">command+1 或者 #</td><td>其他也类似</td></tr><tr><td align="center">有序列表</td><td align="center">数字+.+空格 或者option+command+o</td><td></td></tr><tr><td align="center">无序空心列表</td><td align="center"></td><td></td></tr><tr><td align="center">无序实心列表</td><td align="center">‘+’  + 空格 或者option+command+u</td><td></td></tr><tr><td align="center">取消继承格式</td><td align="center">command+[</td><td></td></tr><tr><td align="center">下划线</td><td align="center">command+u</td><td></td></tr><tr><td align="center">粗体</td><td align="center">commend+B</td><td></td></tr><tr><td align="center">超链接</td><td align="center">commend+k</td><td></td></tr><tr><td align="center">代码块整体前移</td><td align="center">shift+tab</td><td></td></tr></tbody></table><h2 id="Github上面的使用技巧"><a href="#Github上面的使用技巧" class="headerlink" title="Github上面的使用技巧"></a>Github上面的使用技巧</h2><p>搜索框里面：</p><p>in:name example        名字中有“example”<br>in:readme example        readme中有“example”<br>in:description example    描述中有“example”</p><p>stars:&gt;1000        star&gt;1000<br>forks:&gt;1000        fork&gt;1000<br>pushed:&gt;2019-09-01        2019年9月1日后有更新的</p><p>language:java        用Java编写的项目</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建终极解决方案</title>
      <link href="2020/09/27/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/09/27/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="gitee-git-hexo-typora打造终极博客"><a href="#gitee-git-hexo-typora打造终极博客" class="headerlink" title="gitee+git+hexo+typora打造终极博客"></a>gitee+git+hexo+typora打造终极博客</h1><p>连续花了4天多的时间，终于把我的博客搭建好了～～<a href="https://dllgdxlgy.github.io/">俺的博客</a>，</p><a id="more"></a><p>虽然有点累，但还是挺开心的，哈哈哈哈，我花的时间太多了，大神遇见不要笑我，期间遇见很多问题，也查到很多很多方案，今天有时间，在这里记录一下，我用的mac中，windows上搭建也是大同小异，需要的可以参考。</p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>先看一张图片，上图</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20200930204251672.png" alt="image-20200930204251672"></p><h3 id="解决图片传输的终极方案"><a href="#解决图片传输的终极方案" class="headerlink" title="解决图片传输的终极方案"></a>解决图片传输的终极方案</h3><p>参考链接：<a href="https://blog.csdn.net/baidu_41656912/article/details/106431054">我在这呢</a></p><h4 id="GItee准备"><a href="#GItee准备" class="headerlink" title="GItee准备"></a>GItee准备</h4><ol><li><p>这里需要先准备一个Gitee账号</p></li><li><p>然后在Gitee里面建立一个账户，这里仓库必须公开，要是不公开是没有办法进行图片上传的，（我踩过坑）</p><p>新建仓库–&gt;然后给仓库起一个名字</p></li><li><p>然后点击头像–&gt;设置，在安全设置里面，选择私人令牌，然后生成新令牌，记得把令牌保存一下，一会要用。</p></li></ol><h4 id="PicGO配置"><a href="#PicGO配置" class="headerlink" title="PicGO配置"></a>PicGO配置</h4><ol><li><p>去官网下载<a href="https://molunerfinn.com/PicGo/">链接</a></p></li><li><p>然后安装好，点击插件设置，在搜索框输入gitee，安装gitee插件，据说两个都可以。随便安装一个</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201002201414373.png" alt="image-20201002201414373"></p></li><li><p>点击下面的设置按钮，进行插件设置</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201002201623841.png" alt="image-20201002201623841"></p><p>owner：是拥有者</p><p>repo：是图片仓库的名称</p><p>path：是在哪里文件夹下</p><p>token：是刚刚复制的令牌</p><p>message：可以不填。</p></li><li><p>然后进行图片上传，可以看到这里能进行上传了，</p></li><li><p>可以尝试去一下自己的gitee网站下，看一下是不是路径下有自己的图片存在，</p><p>（这里在上传图片时不要传太大的，要不回传上去，但是不显示在文档里）</p></li></ol><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h4><ol><li><p>下载typora后，进行偏好设置</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201002202718374.png" alt="image-20201002202718374"></p></li></ol><ol start="2"><li><p>点击图像，可以插入图片时可以像我，这样设置（我这样设置的目的为了在本地有备份）也可以直接上传，接着选择上传服务，以及选择PicGo的安装路径，最后可以验证一下图片上传选项</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201002202851487.png" alt="image-20201002202851487"></p></li><li><p>这时候新建一个文件，就可以进行编辑了，图片自动上传到gitee，这样图片就不会丢失了。</p></li></ol><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>参考链接<a href="https://www.jianshu.com/p/13e64c9e2295">点这里</a></p><p>因为在typora上面写md文件特别舒服，但是在搭建博客的时候容易出现图片不显示问题，所以在这里重点解决一下图片显示问题。</p><p>方案：gitee+picgo+typora</p><p>思路：把typora图片上传到gitee，之所以不传到git，是因为git太慢了，本来图片就不小，加载太慢很容易丢失信心～，而PicGo很容易解决，在中间起中间支撑作用。再加上图片自动上传，那简直不要太爽～</p><hr><ol><li><p>安装Node.js <a href="https://nodejs.org/en/">链接在这</a></p><p>其主要目的是用来生成静态页面</p></li><li><p>安装Git</p><p>检查版本：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20200930205936952.png" alt="image-20200930205936952"></p></li><li><p>安装Hexo</p><ul><li><p>首先在终端执行下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>选择你要保存博客的根目录，接下来将要创建博客文件</p></li><li><p>假设你把文件保存在blog中，则在上一层文件中创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令，开启服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li></ul><p>此时，打开浏览器访问<a href="http://localhost:4000，就能看到如下页面">http://localhost:4000，就能看到如下页面</a></p></li></ol><p>   <img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20201001200925073.png" alt="image-20201001200925073"></p><ol start="4"><li><p>关联github</p><p>登陆账号，新建仓库，命名为<span style='color:red;background:yellow;font-size:文字大小;font-family:字体;'>用户名.github.io</span></p><p>此时blog文件夹下的文件目录为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_config.yml </span><br><span class="line">db.json </span><br><span class="line">node_modules </span><br><span class="line"><span class="keyword">package</span>.json</span><br><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br></pre></td></tr></table></figure><p>然后进入到<span style='color:red;background:yellow;font-size:文字大小;font-family:字体;'>blog</span>文件夹下，使用vim命令打开_config.yml，命令如下：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><p>然后修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;dllgdxlgy&#x2F;dllgdxlgy.github.io.git</span><br><span class="line">  branch: master     </span><br></pre></td></tr></table></figure><p>你需要把dllgdxlgy换为自己的用户名，并且冒号里面需要空格，否则就出现错误。</p><p>然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -generate   或者 hexo g     </span><br></pre></td></tr></table></figure><p>目的：为了生成静态页面。</p><p>若出现以下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Local hexo not found in ~&#x2F;blog</span><br><span class="line">ERROR Try runing: &#39;npm install hexo --save&#39;</span><br></pre></td></tr></table></figure><p>则执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure><p>若无报错，则忽略此步骤。</p><p>在执行配置命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy           或者：hexo d</span><br></pre></td></tr></table></figure><p>如果此步骤出现错误：无法连接git或找不到git</p><p>则执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save      </span><br></pre></td></tr></table></figure><p>然后在执行hexo g 和 hexo d 命令</p><p>执行成功后就能在<a href="http://dllgdxlgy.github.io上看到和之前一样页面./">http://dllgdxlgy.github.io上看到和之前一样页面。</a></p></li></ol><ol start="5"><li>检查ssh keys是否存在Github上（我这里是存在的）</li></ol><ol start="6"><li><p>然后将ssh key 添加到github上。</p><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p><p>进入GitHub –&gt; Settings –&gt; SSH keys –&gt; add SSH key:</p><p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方<code>Add key</code>绿色按钮即可。</p></li><li><p>（小记：commend+[  就能稀释掉前面的样式）</p><p>发布文章，进入到blog文件夹下，打开命令行，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文件夹名字&quot; </span><br></pre></td></tr></table></figure><p>会在文件夹下发现文档（md格式）</p><p>然后再用typora编写就可以</p></li></ol><h3 id="安装主题Next"><a href="#安装主题Next" class="headerlink" title="安装主题Next"></a>安装主题Next</h3><p>官网链接<a href="https://hexo.io/themes/">点击这里</a>，选自己喜欢的就行了，这里选择的是<span style='color:red;background:yellow;font-size:文字大小;font-family:字体;'>hexo-theme-next</span>主题，</p><p>终端进入到blog文件夹下，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>可以看到blog文件夹目录下的theme文件下多出了theme的文件，这就是刚下的文件，</p><p>然后进入到blog文件下的_config.xml文件下，修改他，可以用vscode改，也可以使用命令行的格式进行修改，</p><p>修改内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">landscape:next  (这里改为next)</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean           &#x2F;&#x2F;清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line"></span><br><span class="line">$ hexo g             &#x2F;&#x2F;生成缓存和静态文件</span><br><span class="line"> </span><br><span class="line">$ hexo d             &#x2F;&#x2F;重新部署到服务器</span><br></pre></td></tr></table></figure><p>也可以修改其他的选项。</p><h4 id="关于执行hexo-d-命令卡住然后报错"><a href="#关于执行hexo-d-命令卡住然后报错" class="headerlink" title="关于执行hexo d 命令卡住然后报错"></a>关于执行hexo d 命令卡住然后报错</h4><p>解决方式：重启电脑</p><p>网上的解决方式：<a href="https://blog.csdn.net/weixin_41256398/article/details/117994899%EF%BC%8C%E6%9C%AA%E6%9B%BE%E5%B0%9D%E8%AF%95%E3%80%82">https://blog.csdn.net/weixin_41256398/article/details/117994899，未曾尝试。</a></p><p>​    </p><p>​    </p><p>​    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
            <tag> typora </tag>
            
            <tag> Git </tag>
            
            <tag> Gitee </tag>
            
            <tag> hexo </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux修改文件等命令</title>
      <link href="2020/09/26/Linux%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%AD%89%E5%91%BD%E4%BB%A4/"/>
      <url>2020/09/26/Linux%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%AD%89%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1、 vi 文件名（编辑文件）</p><p>2、按insert按键，是编辑文件</p><p>3、esc退出编辑</p><p>4、:wq 保存并退出</p><p>5、:q! 不保存并退出</p><a id="more"></a><p>6、在没有编辑的情况下，当光标在最后一行的时候，输入o，不显示，但是可以插入一行，如图：</p><p><img src="https://gitee.com/dlutlgy/images_for_typora/raw/master/images/image-20200926190125902.png" alt="image-20200926190125902"></p><p>7、dd（删除光标所在一行）</p><p>8、</p><p>ls 显示当前下面的文件及文件夹</p><p>ls -a 显示<a href="https://www.baidu.com/s?wd=%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">当前目录</a>下的所有文件及文件夹包括隐藏的.和..等</p><p>ls -al 显示<a href="https://www.baidu.com/s?wd=%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">当前目录</a>下的所有文件及文件夹包括隐藏的.和..等并显示详细信息，详细信息包括大小，属组，创建时间</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入党积极分子</title>
      <link href="2020/03/14/%E5%85%A5%E5%85%9A%E7%A7%AF%E6%9E%81%E5%88%86%E5%AD%90/"/>
      <url>2020/03/14/%E5%85%A5%E5%85%9A%E7%A7%AF%E6%9E%81%E5%88%86%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<center>跟党走～～～</center><a id="more"></a><ol><li><p>“四个全面”战略布局，即：<strong>全面建成小康社会、全面深化改革、全面依法治国、全面从严治党</strong>。</p></li><li><p>“五位一体”总体布局，即：<strong>经济建设、政治建设、文化建设、社会建设、生态文明建设</strong>–着眼于全面建成小康社会、实现社会主义现代化和中华民族伟大复兴，这是党的十八大报告对推进中国特色社会主义事业作出的“五位一体”总体布局。</p></li><li><p>“五大发展理念”即：“十三五”的新发展格局，将在“四个全面”战略布局下，坚持“五位一体”的发展思路。全面推进和落实<strong>创新、协调、绿色、开放和共享</strong>五大发展理念，这是当代中国共产党人的大思维、大战略、大格局、大智慧，从而为我国经济社会的平衡、包容和可持续发展提供坚实的支撑。是管全局、管根本、管长远的导向，具有战略性、纲领性、引领性。</p></li><li><p>四个自信：坚持中国特色社会主义<strong>道路自信、理论自信、制度自信、文化自信</strong>。</p></li><li><p>四个意识：牢固树立<strong>政治意识、大局意识、核心意识、看齐意识</strong>。</p></li><li><p>中国共产党人的初心和使命，就是<strong>为中国人民谋幸福，为中华民族谋复兴</strong></p></li><li><p>我国社会主要矛盾已经转化为<strong>人民日益增长的美好生活需要</strong>和<strong>不平衡不充分的发展</strong>之间的矛盾。</p></li><li><p>将新型冠状病毒感染的肺炎命名为“Covid-19”</p></li><li><p>根本政治制度：人民代表大会制度</p></li><li><p><strong>发展</strong>是我们党执政兴国的第一要务。<em>必须<strong>坚持以人民为中心</strong>的发展思想</em>，<em>坚持**</em>创新、协调、绿色、开放、共享**的发展理念。</p></li><li><p>发展党员，必须把<strong>政治标准</strong>放在首位。</p></li><li><p>党的根本宗旨：<strong>全心全意为人民服务</strong></p></li><li><p>我党最大的政治优势：<strong>密切联系群众</strong>。</p></li><li><p>中国共产党必须始终代表中国先进生产力的发展要求、中国先进文化的前进方向、中国最广大人民的根本利益，是我们党的<strong>立党之本、执政之基、力量之源</strong>。</p></li><li><p>科学发展观的基本原则：<strong>以人为本</strong></p></li><li><p><em>科学发展观</em>，第一要务是发展，核心是以人为本，<em>基本</em>要求是全面协调可持续发展，根本方法是统筹兼顾</p></li><li><p><strong>民主集中制</strong>是党的根本组织原则和领导制度</p></li><li><p>中国共产党的最高理想和最终目标是<strong>实现共产主义制度</strong></p></li><li><p>党的纪律处分有五种:<strong>警告、严重警告、撤销党内职务、留党察看、开除党籍。</strong></p></li><li><p>预备党员如果延长预备期，最长不能超过<strong>一年</strong></p></li><li><p>预备党员的预备期，从<strong>支部大会通过他为预备党员之日</strong>算起</p></li><li><p>把人民放在心中最高位置，一切工作<strong>要以人民利益为出发点</strong>是无产阶级的党性的根本要求。</p></li><li><p>2013年1月中共中央政治局会议上出台的新的党员发展工作“十六字方针”，即“<strong>控制总量、优化结构、提高质量、发挥作用</strong>”，对高校组织发展工作提出了新的要求。</p></li><li><p><strong>民主集中制</strong>是党的根本组织制度和领导制度，也是党最重要的组织纪律和政治纪律</p></li><li><p>第一个阶段，从2020年到2035年，在全面建成小康社会的基础上，再奋斗15年，<strong>基本实现社会主义现代化</strong>。</p><p>第二个阶段，从2035年到本世纪中叶，在基本实现现代化的基础上，再奋斗15年，把<strong>我国建成富强民主文明和谐美丽的社会主义现代化强国</strong>。</p></li></ol><ol><li>在对资本主义工商业的社会主义改造中，所谓初、中级国家资本主义的主要含义是，社会主义国家对资本主义工商业采取<strong>加工订货</strong>，高级阶段采取<strong>公私合营</strong></li><li>中共12大：1982年</li><li>1971年10月25日，第（<strong>26</strong> ）联合国大会通过决议，恢复中华人民共和国在联合国的合法席位。</li><li><strong>农业生产互助组、初级农业合作社、高级农业合作社</strong>实现农业合作化的过程</li><li>中国共产党在中国革命事业中的领导地位，是由<strong>党的性质</strong>决定的。</li><li><strong>统一战线，武装斗争，党的建设</strong>中国新民主主义革命胜利的三大法宝</li><li>大革命失败后，中共将工作重心由城市转向农村，标志着向农村进军新起点的是（ 秋收起义后建立了井冈山根据地 ）。</li><li>1967年2月批评“文化大革命”倒行逆施，1976年又领导粉碎“四人帮”的是（ <strong>叶剑英</strong>）。</li><li>1937年，中共洛川政治局扩大会议指出，争取全民族抗战胜利的关键是（实行全面抗战路线，反对片面抗战路线 ）</li><li>第一次提出“毛泽东思想”这一概念的是（ <strong>王稼祥</strong> ）</li></ol><p>To alleviate sparsity and cold start problem of collaborative filtering based recommender systems, researchers and engineers usually collect attributes of users and items, and design delicate algorithms to exploit these additional information. In general, the attributes are not isolated but connected with each other, which forms a knowl- edge graph (KG). In this paper, we propose Knowledge Graph Convolutional Networks (KGCN), an end-to-end framework that captures inter-item relatedness effectively by mining their associ- ated attributes on the KG. To automatically discover both high-order structure information and semantic information of the KG, we sam- ple from the neighbors for each entity in the KG as their receptive field, then combine neighborhood information with bias when cal- culating the representation of a given entity. The receptive field can be extended to multiple hops away to model high-order proximity information and capture users’ potential long-distance interests. Moreover, we implement the proposed KGCN in a minibatch fash- ion, which enables our model to operate on large datasets and KGs. We apply the proposed model to three datasets about movie, book, and music recommendation, and experiment results demonstrate that our approach outperforms strong recommender baselines.</p><p>为了缓解基于协同过滤的推荐系统的稀疏性和冷启动问题，研究人员和工程师通常收集用户和项目的属性，并设计精细的算法来利用这些附加信息。一般情况下，属性之间不是孤立的，而是相互联系的，形成一个知识边图。本文提出了一种端到端的知识图卷积网络（KGCN）框架，通过挖掘知识图卷积网络上的关联属性，有效地获取项目间的关联性。为了自动发现KG的高阶结构信息和语义信息，我们从KG中每个实体的邻域中抽取样本作为它们的感受野，然后在计算给定实体的表示时结合邻域信息和偏差。接收场可以扩展到多跳距离，以模拟高阶邻近信息并捕获用户的潜在远程兴趣。此外，我们以小批量方式实现了所提出的KGCN，这使得我们的模型能够在大数据集和KG上运行。我们将该模型应用于电影、书籍和音乐推荐的三个数据集，实验结果表明，该方法优于强推荐基线。</p><p>B:To alleviate … and …problem of collaborative filtering based recommender systems, researchers and engineers usually collect attributes of users and items, and design delicate algorithms to exploit these additional information.</p><p>For grayscale photos, how to  supplement its color is a question worth thinking about. This can clearly find that for some things , specific colors can be obtained through the semantic information and surface texture of the scene.</p>]]></content>
      
      
      <categories>
          
          <category> 入党 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入党 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
